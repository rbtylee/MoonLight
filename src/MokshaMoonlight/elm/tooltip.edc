group { "elm/label/base/tooltip";
	styles {
		style { "tooltip_style";
			base: "font=""Sans"" font_size=10 color=#ffffff wrap=word text_class=bubble";
			tag:  "br" "\n";
			tag: "hilight" "+ font=""Sans"" text_class=bubble";
			tag: "b" "+ font=""Sans"" text_class=bubble";
			tag:  "tab" "\t";
		}
	}
	parts {
		textblock { "elm.text"; nomouse; scale;
			desc { "default"; color_class: "border_title_active";
				text.style: "tooltip_style";
				text.min: 1 1;
				text.ellipsis: -1;
			}
		}
	}
}

group { "elm/tooltip/base/default";
	min: 30 30;
	data.item: "pad_x" "10";
	data.item: "pad_y" "10";
	data.item: "pad_border_x" "1";
	data.item: "pad_border_y" "1";
	/* tooltip is hidden after this amount.
	   Keep in sync with hide animations */
	data.item: "hide_timeout" "0.35";
	// if in a window... it's transparent!
	data.item: "transparent" "enabled";

	images.image: "tooltip-base.png" COMP;
	images.image: "tooltip-base_SH.png" COMP;
	images.image: "tooltip-corner-top-left-tip.png" COMP;
	images.image: "tooltip-corner-top-right-tip.png" COMP;
	images.image: "tooltip-corner-bottom-left-tip.png" COMP;
	images.image: "tooltip-corner-bottom-right-tip.png" COMP;
	images.image: "tooltip-corner-top-left-tip_SH.png" COMP;
	images.image: "tooltip-corner-top-right-tip_SH.png" COMP;
	images.image: "tooltip-corner-bottom-left-tip_SH.png" COMP;
	images.image: "tooltip-corner-bottom-right-tip_SH.png" COMP;
	images.image: "tooltip-edge-left-tip.png" COMP;
	images.image: "tooltip-edge-right-tip.png" COMP;
	images.image: "tooltip-edge-bottom-tip.png" COMP;
	images.image: "tooltip-edge-top-tip.png" COMP;
	images.image: "tooltip-edge-left-tip_SH.png" COMP;
	images.image: "tooltip-edge-right-tip_SH.png" COMP;
	images.image: "tooltip-edge-bottom-tip_SH.png" COMP;
	images.image: "tooltip-edge-top-tip_SH.png" COMP;

	script {
		hide_corners() {
			set_state(PART:"corner-top-left", "default", 0.0);
			set_state(PART:"corner-top-right", "default", 0.0);
			set_state(PART:"corner-bottom-left", "default", 0.0);
			set_state(PART:"corner-bottom-right", "default", 0.0);
			set_state(PART:"corner-top-left_SH", "default", 0.0);
			set_state(PART:"corner-top-right_SH", "default", 0.0);
			set_state(PART:"corner-bottom-left_SH", "default", 0.0);
			set_state(PART:"corner-bottom-right_SH", "default", 0.0);
		}
		hide_edges() {
			set_state(PART:"clipper-edge-left", "default", 0.0);
			set_state(PART:"clipper-edge-right", "default", 0.0);
			set_state(PART:"clipper-edge-top", "default", 0.0);
			set_state(PART:"clipper-edge-bottom", "default", 0.0);
		}
		show_corner_top_left() {
			set_state(PART:"corner-top-left", "visible", 0.0);
			set_state(PART:"corner-top-right", "default", 0.0);
			set_state(PART:"corner-bottom-left", "default", 0.0);
			set_state(PART:"corner-bottom-right", "default", 0.0);
			set_state(PART:"corner-top-left_SH", "visible", 0.0);
			set_state(PART:"corner-top-right_SH", "default", 0.0);
			set_state(PART:"corner-bottom-left_SH", "default", 0.0);
			set_state(PART:"corner-bottom-right_SH", "default", 0.0);
			hide_edges();
		}
		show_corner_top_right() {
			set_state(PART:"corner-top-right", "visible", 0.0);
			set_state(PART:"corner-top-left", "default", 0.0);
			set_state(PART:"corner-bottom-left", "default", 0.0);
			set_state(PART:"corner-bottom-right", "default", 0.0);
			set_state(PART:"corner-top-right_SH", "visible", 0.0);
			set_state(PART:"corner-top-left_SH", "default", 0.0);
			set_state(PART:"corner-bottom-left_SH", "default", 0.0);
			set_state(PART:"corner-bottom-right_SH", "default", 0.0);
			hide_edges();
		}
		show_corner_bottom_left() {
			set_state(PART:"corner-bottom-left", "visible", 0.0);
			set_state(PART:"corner-bottom-right", "default", 0.0);
			set_state(PART:"corner-top-left", "default", 0.0);
			set_state(PART:"corner-top-right", "default", 0.0);
			set_state(PART:"corner-bottom-left_SH", "visible", 0.0);
			set_state(PART:"corner-bottom-right_SH", "default", 0.0);
			set_state(PART:"corner-top-left_SH", "default", 0.0);
			set_state(PART:"corner-top-right_SH", "default", 0.0);
			hide_edges();
		}
		show_corner_bottom_right() {
			set_state(PART:"corner-bottom-right", "visible", 0.0);
			set_state(PART:"corner-bottom-left", "default", 0.0);
			set_state(PART:"corner-top-left", "default", 0.0);
			set_state(PART:"corner-top-right", "default", 0.0);
			set_state(PART:"corner-bottom-right_SH", "visible", 0.0);
			set_state(PART:"corner-bottom-left_SH", "default", 0.0);
			set_state(PART:"corner-top-left_SH", "default", 0.0);
			set_state(PART:"corner-top-right_SH", "default", 0.0);
			hide_edges();
		}
		show_edge_left(Float:val) {
			set_state(PART:"clipper-edge-left", "visible", 0.0);
			set_drag(PART:"edge-drag-left", 0.0, val);
			set_state(PART:"clipper-edge-right", "default", 0.0);
			set_state(PART:"clipper-edge-top", "default", 0.0);
			set_state(PART:"clipper-edge-bottom", "default", 0.0);
			hide_corners();
		}
		show_edge_right(Float:val) {
			set_state(PART:"clipper-edge-right", "visible", 0.0);
			set_drag(PART:"edge-drag-right", 0.0, val);
			set_state(PART:"clipper-edge-left", "default", 0.0);
			set_state(PART:"clipper-edge-top", "default", 0.0);
			set_state(PART:"clipper-edge-bottom", "default", 0.0);
			hide_corners();
		}
		show_edge_top(Float:val) {
			set_state(PART:"clipper-edge-top", "visible", 0.0);
			set_drag(PART:"edge-drag-top", val, 0.0);
			set_state(PART:"clipper-edge-bottom", "default", 0.0);
			set_state(PART:"clipper-edge-left", "default", 0.0);
			set_state(PART:"clipper-edge-right", "default", 0.0);
			hide_corners();
		}
		show_edge_bottom(Float:val) {
			set_state(PART:"clipper-edge-bottom", "visible", 0.0);
			set_drag(PART:"edge-drag-bottom", val, 0.0);
			set_state(PART:"clipper-edge-top", "default", 0.0);
			set_state(PART:"clipper-edge-left", "default", 0.0);
			set_state(PART:"clipper-edge-right", "default", 0.0);
			hide_corners();
		}
		public message(Msg_Type:type, id, ...) {
			if ((type == MSG_FLOAT_SET) && (id == 1)) {
				new Float:x, Float:y;

				x = getfarg(2);
				y = getfarg(3);

				if (x < 0.0) {
					if (y < 0.0) show_corner_top_left();
					else if (y > 1.0) show_corner_bottom_left();
					else show_edge_left(y);
				} else if (x > 1.0) {
					if (y < 0.0) show_corner_top_right();
					else if (y > 1.0) show_corner_bottom_right();
					else show_edge_right(y);
				} else {
					if (y < 0.0) show_edge_top(x);
					else if (y > 1.0) show_edge_bottom(x);
					else {
						hide_corners();
						hide_edges();
					}
				}
			}
		}
	}

	parts {
		rect { "clipper";
			desc { "default"; color: TRANSPARENT;
				rel1 { to: "pop"; offset: -5 -5; }
				rel2 { to: "pop"; offset: 5 5; }
			}
			desc { "visible"; inherit; color: VISIBLE; }
		}
		part { "pop"; nomouse; clip: "clipper"; scale;
			desc { "default"; min: 30 30; color: 255 255 255 TOOLTIP_OPACITY;
				color_class: "focus";
				rel1.to: "elm.swallow.content";
				rel1.offset: -5 -4;
				rel2.to: "elm.swallow.content";
				rel2.offset: 4 5;
				image.normal: "tooltip-base.png";
				image.border: 7 7 6 8;
				image.middle: SOLID;
			}
		}
		PART_SHINE("tooltip", "pop", "tooltip-base_SH.png", 7 7 6 8)

		#define TT_CORNER(name_, rx, ry, ax, ay, ox, oy) \
		part { "corner-"name_; clip: "clipper"; nomouse;  scale;					\
			desc { "default"; color: 255 255 255 TOOLTIP_OPACITY; hid;			\
				color_class: "focus";																					\
				align: ax ay;																									\
				FIXED_SIZE(12, 12)																						\
				rel1.relative: rx ry;																					\
				rel1.offset: ox oy;																						\
				rel1.to: "pop";																								\
				rel2.relative: rx ry;																					\
				rel2.offset: ox oy;																						\
				rel2.to: "pop";																								\
				image.normal: "tooltip-corner-"name_"-tip.png";								\
			}																																\
			desc { "visible";  inherit; vis; }															\
		}																																	\
		part { "corner-"name_"_SH"; clip: "clipper";											\
			desc { "default"; hid;																					\
				image.normal: "tooltip-corner-"name_"-tip_SH.png";						\
				STAY_ON("corner-"name_)																				\
			}																																\
			desc { "visible"; inherit; vis; }																\
		}

		TT_CORNER("top-left", 0, 0, 0, 0, -4, -5);
		TT_CORNER("top-right", 1, 0, 1, 0, 3, -5);
		TT_CORNER("bottom-left", 0, 1, 0, 1, -4, 2);
		TT_CORNER("bottom-right", 1, 1, 1, 1, 3, 2);
		#undef TT_CORNER

		#define TT_EDGE_VERT(name_, rx, ax, ox) \
		rect{ "clipper-edge-"name_; clip: "clipper";											\
			desc { "default"; min: 9 13; hid;																\
				align: ax 0.5;																								\
				fixed: 1 1;																										\
				rel1.relative: rx 0.0;																				\
				rel1.offset: ox 0;																						\
				rel1.to: "elm.swallow.content";																\
				rel2.relative: rx 1.0;																				\
				rel2.offset: ox 0;																						\
				rel2.to: "elm.swallow.content";																\
			}																																\
			desc { "visible"; inherit; vis; }																\
		}																																	\
		rect { "edge-area-"name_; nomouse; scale;													\
			clip: "clipper-edge-"name_;																			\
			desc { "default"; color: "#00000000"; min: 9 13;								\
				align: ax 0.5;																								\
				fixed: 1 1;																										\
				rel1.relative: rx 0.0;																				\
				rel1.offset: ox 0;																						\
				rel1.to: "elm.swallow.content";																\
				rel2.relative: rx 1.0;																				\
				rel2.offset: ox 0;																						\
				rel2.to: "elm.swallow.content";																\
			}																																\
		}																																	\
		rect { "edge-drag-"name_; scale; nomouse;													\
			clip: "clipper-edge-"name_;																			\
			dragable.x: 0 0 0;																							\
			dragable.y: 1 1 0;																							\
			dragable.confine: "edge-area-"name_;														\
			desc { "default"; color: "#00000000"; min: 9 13; 								\
				rel1.to: "edge-area-"name_;																		\
				rel2.to: "edge-area-"name_;																		\
			}																																\
		}																																	\
		part { "edge-img-"name_; nomouse;																	\
			clip: "clipper-edge-"name_;																			\
			desc { "default";																								\
				FIXED_SIZE(9, 13)																							\
				align: ax 0.5;																								\
				rel1.to: "edge-drag-"name_;																		\
				rel2.to: "edge-drag-"name_;																		\
				image.normal: "tooltip-edge-"name_"-tip.png";									\
				color_class: "focus" ;																				\
				color: 255 255 255 TOOLTIP_OPACITY;														\
			}																																\
		}																																	\
		PART_SHINE_CLIPTO("edge-img-"name_, "edge-img-"name_, "tooltip-edge-"name_"-tip_SH.png", 0 0 0 0, "clipper-edge-"name_)

		TT_EDGE_VERT("left", 0, 1, -3);
		TT_EDGE_VERT("right", 1, 0, 2);
		#undef TT_EDGE_VERT

		#define TT_EDGE_HORIZ(name_, ry, ay, oy) \
		rect { "clipper-edge-"name_; clip: "clipper"; scale;								\
			desc { "default"; min: 11 9; hid;																	\
				align: 0.5 ay;																									\
				fixed: 1 1;																											\
				rel1.relative: 0.0 ry;																					\
				rel1.offset: 0 oy;																							\
				rel1.to: "elm.swallow.content";																	\
				rel2.relative: 1.0 ry;																					\
				rel2.offset: 0 oy;																							\
				rel2.to: "elm.swallow.content";																	\
			}																																	\
			desc { "visible"; inherit; vis; }																	\
		}																																		\
		rect { "edge-area-"name_; nomouse; scale;														\
			clip: "clipper-edge-"name_;																				\
			desc { "default"; color: "#00000000"; min: 11 9;									\
				align: 0.5 ay;																									\
				fixed: 1 1;																											\
				rel1.to: "clipper-edge-"name_;																	\
				rel2.to: "clipper-edge-"name_;																	\
			}																																	\
		}																																		\
		rect { "edge-drag-"name_; nomouse; scale;														\
			clip: "clipper-edge-"name_;																				\
			dragable.x: 1 1 0;																								\
			dragable.y: 0 0 0;																								\
			dragable.confine: "edge-area-"name_;															\
			desc { "default"; color: "#00000000"; min: 11 9;									\
				rel1.to: "edge-area-"name_;																			\
				rel2.to: "edge-area-"name_;																			\
			}																																	\
		}																																		\
		part { "edge-img-"name_; nomouse; scale;														\
			clip: "clipper-edge-"name_;																				\
			desc { "default";color: 255 255 255 TOOLTIP_OPACITY;							\
				color_class: "focus";																						\
				FIXED_SIZE(11, 9)																								\
				align: 0.5 ay;																									\
				rel1.to: "edge-drag-"name_;																			\
				rel2.to: "edge-drag-"name_;																			\
				image.normal: "tooltip-edge-"name_"-tip.png";										\
			}																																	\
		}																																		\
		PART_SHINE_CLIPTO("edge-img-"name_, "edge-img-"name_, "tooltip-edge-"name_"-tip_SH.png", 0 0 0 0, "clipper-edge-"name_)

		TT_EDGE_HORIZ("top", 0, 1, -1);
		TT_EDGE_HORIZ("bottom", 1, 0, 1);
		#undef TT_EDGE_HORIZ
		rect { "clipper_content";
			desc { "default"; color: TRANSPARENT;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
			}
			desc { "visible"; inherit; color: VISIBLE; }
		}
		swallow { "elm.swallow.content"; clip: "clipper_content";
			desc { "default";
				rel1.offset: 10 10;
				rel2.offset: -11 -11;
			}
		}

		programs {
			program { "show0";
				signal: "elm,action,show"; source: "elm";
				action: ACTION_STOP;
				target: "hide0";
				target: "hide1";
				target: "hide2";
				target: "hide3";
				after: "show1";
				after: "show2";
			}
			program { "show1";
				action: STATE_SET "visible" 0.0;
				transition: LINEAR 0.15;
				target: "clipper";
			}
			program { "show2";
				in: 0.1 0.0;
				action: STATE_SET "visible" 0.0;
				transition: LINEAR 0.15;
				target: "clipper_content";
			}
			program { "hide0";
				signal: "elm,action,hide"; source: "elm";
				action: ACTION_STOP;
				target: "show0";
				target: "show1";
				target: "show2";
				after: "hide1";
				after: "hide2";
				after: "hide3";
			}
			program { "hide1";
				script {
					hide_corners();
					hide_edges();
				}
			}
			program { "hide2";
				action: STATE_SET "default" 0.0;
				transition: LINEAR 0.1;
				target: "clipper_content";
			}
			program { "hide3";
				in: 0.1 0.0;
				action: STATE_SET "default" 0.0;
				transition: LINEAR 0.1;
				target: "clipper";
			}
		}
	}
}

group { "elm/tooltip/base/transparent";
	data.item: "pad_x" "10";
	data.item: "pad_y" "10";
	data.item: "transparent" "enabled";

	parts {
		swallow { "elm.swallow.content"; nomouse; scale;
			desc { "default"; }
		}
	}
}
