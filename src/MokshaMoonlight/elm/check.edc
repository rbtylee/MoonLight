group { "elm/check/base/default";
	images.image: "check_base.png" COMP;
	images.image: "check_on.png" COMP;
	
#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
	script {
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					//set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					//set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					//set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "disabled", 0.0);
					//set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					//set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					//set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
		} else {
			if (!d) {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				//set_state(PART:"base", "default", 0.0);
				set_state(PART:"clip", "default", 0.0);
				set_state(PART:"event", "default", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				//set_state(PART:"base", "disabled", 0.0);
				set_state(PART:"clip", "disabled", 0.0);
				set_state(PART:"event", "disabled", 0.0);
			}
			}
		}
	}
	parts {
		part { "base"; mouse_events: 0;
		  clip: "clip";
			desc { "default";
				align: 0.0 0.5;
				min: 18 19;
				max: 18 19;
				fixed: 1 1;
				image.normal: "check_base.png";
				}
				desc {
				state: "selected" 0.0;
				inherit;
				image.normal: "check_on.png";
			}
		}
	part { "clip"; type: RECT;
			desc { "default";
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: 255 255 255 100;
			}
		}
		part { "elm.swallow.content"; type: SWALLOW;
			scale;
			clip: "clip";
			desc { "default";
				fixed: 1 0;
				hid;
				align: 0.0 0.5;
				max: 0 0;
				rel1.to_x: "base";
				rel1.relative: 1.0 0.0;
				rel1.offset: 1 1;
				rel2.to_x: "base";
				rel2.offset: 1 -2;
				rel2.relative: 1.0 1.0;
			}
			desc { state: "visible" 0.0;
				inherit;
				fixed: 0 0;
				vis;
				aspect: 1.0 1.0;
				min: 16 16;
			}
		}
		part { "sizer.content"; type: TEXT; nomouse;
			scale;
			desc { "default";
				fixed: 1 1;
				hid;
				text { font: "Sans"; size: 10;
					min: 0 0;
					text_class: "check_text";
				}
			}
			desc { state: "visible" 0.0;
				inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text {
					min: 1 1;
					ellipsis: -1;
					text: "M";
				}
			}
			desc { state: "icononly" 0.0;
				inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text {
					min: 1 1;
					ellipsis: -1;
					text: "M";
				}
			}
		}
		part { "elm.text"; type: TEXT; mouse_events: 0;
			effect: SHADOW BOTTOM;
			scale;
			desc { "default";
				rel1.offset: 2 2;
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel2.offset: -3 -3;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "check_text";
				text { font: "Sans"; size: 10;
				  min: 0 0;
				  align: 0.0 0.5;
				  text_class: "check";
				}
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "check_text_disabled";
			}
			desc { state: "visible" 0.0;
				inherit;
				vis;
				text.min: 1 1;
					text.ellipsis: -1;
			}
			desc { state: "disabled_visible" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "check_text_disabled";
				vis;
				text.min: 1 1;
					text.ellipsis: -1;
			}
		}
		part { "event"; type: RECT;
			ignore_flags: ON_HOLD;
			desc { "default";
				color: "#00000000";
			}
			desc { state: "disabled" 0.0;
				inherit;
				hid;
			}
		}
	}
	programs {	   
		
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,check,toggle" "elm";
		}
		program {
			signal: "elm,state,check,on"; source: "elm";
			action:  STATE_SET "selected" 0.0;
			target: "base";
		}
		program {
			signal: "elm,state,check,off"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "base";
		}
		program {
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
	}
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
}

group { "elm/check/base/toggle";

	images.image: "slider_runnerh.png" COMP;
	images.image: "barH.png" COMP;
	images.image: "button-normal.png" COMP;
	images.image: "button-prelight.png" COMP;
	images.image: "button-pressed.png" COMP;
	images.image: "button-insensitive.png" COMP;
	
#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
	script {
		public is_rtl;
		public is_drag;
		public was_drag;
		
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"drag_button", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
					set_state(PART:"event2", "default", 0.0);
					set_state(PART:"elm.ontext", "default", 0.0);
					set_state(PART:"elm.offtext", "default", 0.0);
					set_state(PART:"onrect", "default", 0.0);
					set_state(PART:"offrect", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"drag_button", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
					set_state(PART:"event2", "disabled", 0.0);
					set_state(PART:"elm.ontext", "disabled", 0.0);
					set_state(PART:"elm.offtext", "disabled", 0.0);
					set_state(PART:"onrect", "disabled", 0.0);
					set_state(PART:"offrect", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"drag_button", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
					set_state(PART:"event2", "default", 0.0);
					set_state(PART:"elm.ontext", "default", 0.0);
					set_state(PART:"elm.offtext", "default", 0.0);
					set_state(PART:"onrect", "default", 0.0);
					set_state(PART:"offrect", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "disabled", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"drag_button", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
					set_state(PART:"event2", "disabled", 0.0);
					set_state(PART:"elm.ontext", "disabled", 0.0);
					set_state(PART:"elm.offtext", "disabled", 0.0);
					set_state(PART:"onrect", "disabled", 0.0);
					set_state(PART:"offrect", "disabled", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"drag_button", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
					set_state(PART:"event2", "default", 0.0);
					set_state(PART:"elm.ontext", "default", 0.0);
					set_state(PART:"elm.offtext", "default", 0.0);
					set_state(PART:"onrect", "default", 0.0);
					set_state(PART:"offrect", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"drag_button", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
					set_state(PART:"event2", "disabled", 0.0);
					set_state(PART:"elm.ontext", "disabled", 0.0);
					set_state(PART:"elm.offtext", "disabled", 0.0);
					set_state(PART:"onrect", "disabled", 0.0);
					set_state(PART:"offrect", "disabled", 0.0);
				}
		} else {
			if (!d) {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"base", "default", 0.0);
				set_state(PART:"drag_button", "default", 0.0);
				set_state(PART:"clip", "default", 0.0);
				set_state(PART:"event", "default", 0.0);
				set_state(PART:"event2", "default", 0.0);
				set_state(PART:"elm.ontext", "default", 0.0);
				set_state(PART:"elm.offtext", "default", 0.0);
				set_state(PART:"onrect", "default", 0.0);
				set_state(PART:"offrect", "default", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"base", "disabled", 0.0);
				set_state(PART:"drag_button", "disabled", 0.0);
				set_state(PART:"clip", "disabled", 0.0);
				set_state(PART:"event", "disabled", 0.0);
				set_state(PART:"event2", "disabled", 0.0);
				set_state(PART:"elm.ontext", "disabled", 0.0);
				set_state(PART:"elm.offtext", "disabled", 0.0);
				set_state(PART:"onrect", "disabled", 0.0);
				set_state(PART:"offrect", "disabled", 0.0);
			}
			}
		}
	}
	parts {
		part { "tog"; type: SPACER;
			scale;
			desc { "default";
				fixed: 1 0;
				rel1.relative: 1.0 0.0;
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
				align: 1.0 0.5;
				min: 106 24;
				max: 106 24;
			}
		}
		part { "base";
			desc { "default";
				image.normal: "slider_runnerh.png";
				image.border: 4 4 4 4;
				STAY_ON("tog")
				fill.smooth: 0;
			}
			desc { state: "disabled" 0.0;
				inherit;
			color: "#FFFFFFC8";
			}
		}
		
		part { "onrect"; mouse_events: 0;
			scale;
			clip: "tog_clip";
			desc { "default";
				rel1.to: "base";
				rel1.relative: 0.0 0.0;
				rel1.offset: 1 2;
				rel2.to: "button";
				//rel2.to_y: "base";
				rel2.relative: 1.0 1.0;
				rel2.offset: -2 -3;
				image.normal: "barH.png";
				image.border: 5 5 5 5 ;
			}
			desc { state: "disabled" 0.0;
				inherit;
			color: "#FFFFFFC8";
			}
		}
		part { "offrect"; type: RECT; mouse_events: 0;
			scale;
			clip: "tog_clip";
			desc { "default";
				rel1.to: "button";
				rel1.relative: 0.5 0.0;
				rel2.to: "base";
				rel2.relative: 1.0 1.0;
				color: "#00000000";
			}
		}
		
		
		part { "elm.offtext"; type: TEXT; nomouse;
			effect: SHADOW BOTTOM;
			scale;
			clip: "tog_clip";
			desc { "default";
				fixed: 1 1;
				rel1.to: "button";
				rel1.relative: 1.0 0.0;
				rel1.offset: 2 3;
				rel2.to: "offrect";
				rel2.offset: -2 -2;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "border_frame";
				text { font: "Sans"; size: 10;
					min: 0 1;
					align: 0.5 0.5;
					text_class: "check_off_text";
					text: "OFF";
				}
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "button_text_disabled";
			}
		}
		part { "elm.ontext"; type: TEXT; nomouse;
			effect: SHADOW BOTTOM;
			scale;
			clip: "tog_clip";
			desc { "default";
				fixed: 1 1;
				rel1.to: "onrect";
				rel1.offset: 4 0;
				rel2.to: "button";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -2;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "ilist_item_selected";
				text { font: "Sans"; size: 10;
					min: 0 1;
					align: 0.5 0.5;
					text_class: "check_on_text";
					text: "ON";
				}
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "button_text_disabled";
			}
		}
		part { "tog_clip"; type: RECT;
			desc { "default";
				rel1.to: "tog";
				rel2.to: "tog";
			}
		}
		part { "button"; type: RECT;
			scale;
			clip: "tog_clip";
			dragable {
				x: 1 1 0;
				y: 0 0 0;
				confine: "tog";
			}
			desc { "default";
				//fixed: 1 1;
				rel1.to: "tog";
				rel2.to: "tog";
				min: 52 24;
				max: 52 99999;
				color: "#00000000";
			}
		}
		
		part { "drag_button"; mouse_events: 0;
			desc { "default";
				image.normal: "button-normal.png";
				image.border: 6 6 6 6;
				STAY_ON("button")
				rel1.offset: 0 1;
				rel2.offset: -1 -2;
				fill.smooth: 0;
			}
			desc { state: "over" 0.0;
			inherit;
			image.normal: "button-prelight.png";
		}
			desc { state: "clicked" 0.0;
			inherit;
			image.normal: "button-pressed.png";
		}
			desc { state: "disabled" 0.0;
			inherit;
			image.normal: "button-insensitive.png";
		}
		}
		
	 
		part { "button_events"; type: RECT;
			dragable.events: "button";
			desc { "default";
				color: "#00000000";
			}
		}
		part { "clip"; type: RECT;
			desc { "default";
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: 255 255 255 64;
			}
		}
		part { "elm.swallow.content"; type: SWALLOW;
			scale;
			clip: "clip";
			desc { "default";
				fixed: 1 0;
				hid;
				align: 0.0 0.5;
				max: 0 0;
				rel1.offset: 1 1;
				rel2.offset: 1 -2;
				rel2.relative: 0.0 1.0;
			}
			desc { state: "visible" 0.0;
				inherit;
				fixed: 0 0;
				vis;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				min: 16 16;
			}
		}
		part { "sizer.content"; type: TEXT; nomouse;
			scale;
			desc { "default";
				fixed: 1 1;
				hid;
				text { font: "Sans"; size: 10;
					min: 0 0;
					text_class: "check_text";
				}
			}
			desc { state: "visible" 0.0;
				inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text {
					min: 1 1;
					ellipsis: -1;
					text: "M";
				}
			}
			desc { state: "icononly" 0.0;
				inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text {
					min: 1 1;
					ellipsis: -1;
					text: "M";
				}
			}
		}
		part { "elm.text"; type: TEXT; mouse_events: 0;
			effect: SHADOW BOTTOM;
			scale;
			desc { "default";
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel1.offset: 2 2;
				rel2.to_x: "tog";
				rel2.relative: 0.0 1.0;
				rel2.offset: -5 -3;
				color: VISIBLE;
				color3: 0 0 0 128;
				color_class: "check_text";
				text { font: "Sans"; size: 10;
				  min: 0 0;
				  align: 0.0 0.5;
				  text_class: "check";
				}
			}
			desc { state: "disabled" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "check_text_disabled";
			}
			desc { state: "visible" 0.0;
				inherit;
				vis;
				text.min: 1 1;
					text.ellipsis: -1;
			}
			desc { state: "disabled_visible" 0.0;
				inherit;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "check_text_disabled";
				vis;
				text.min: 1 1;
					text.ellipsis: -1;
			}
		}
		part { "event"; type: RECT;
			ignore_flags: ON_HOLD;
			desc { "default";
				color: "#00000000";
				rel1.to_x: "elm.swallow.content";
				rel2.to_x: "elm.text";
			}
			desc { state: "disabled" 0.0;
				inherit;
				hid;
			}
		}
		part { "event2"; type: RECT;
			ignore_flags: ON_HOLD;
			desc { "default";
				color: "#00000000";
				hid;
			}
			desc { state: "disabled" 0.0;
				inherit;
				vis;
			}
		}
	}
	programs {
		OVER_P("drag_button", "button_events", "default", "over")
	program {
			signal: "mouse,down,1"; source: "button_events";
			action: STATE_SET "clicked" 0.0;
			target: "drag_button";
		}
		program {
			signal: "mouse,up,1"; source: "button_events";
			action: STATE_SET "default" 0.0;
			target: "drag_button";
		}
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,check,toggle" "elm";
		}
		program {
			signal: "elm,state,check,on"; source: "elm";
			script {
				new Float:drag;
				if (get_int(is_rtl) == 0) {
					drag = 100.0;
				} else {
					drag = 0.0;
				}
				set_drag(PART:"button", drag, 0.0);
			}
		}
		program {
			signal: "elm,state,check,off"; source: "elm";
			script {
				new Float:drag;
				if (get_int(is_rtl) == 0) {
					drag = 0.0;
				} else {
					drag = 100.0;
				}
				set_drag(PART:"button", drag, 0.0);
			}
		}
		program {     
			signal: "mouse,clicked,1"; source: "button";
			script {
				new Float:dx, Float:dy;
				get_drag(PART:"button", dx, dy);
				if (!get_int(was_drag)) {
					if (dx > 0.5) {
						set_drag(PART:"button", 0.0, 0.0);
					} else {
						set_drag(PART:"button", 1.0, 0.0);
					}
					if (((get_int(is_rtl) == 1) && (dx <= 0.5)) ||
						 (get_int(is_rtl) == 0) && (dx > 0.5)) {
						emit("elm,action,check,off", "");
					} else {
						emit("elm,action,check,on", "");
					}
				}
			}
		}
		program {
			signal: "drag"; source: "button";
			script {
				set_int(is_drag, 1);
			}
		}
		program {
			signal: "mouse,down,1"; source: "button";
			script {
				set_int(was_drag, 0);
				set_int(is_drag, 0);
			}
		}
		program { "drag_end";
			signal: "mouse,up,1"; source: "button";
			script {
				new Float:dx, Float:dy;
				get_drag(PART:"button", dx, dy);
				if (get_int(is_drag)) {
					if (dx > 0.5) {
					  set_drag(PART:"button", 1.0, 0.0);
					} else {
					  set_drag(PART:"button", 0.0, 0.0);
					}
					if (((get_int(is_rtl) == 1) && (dx <= 0.5)) ||
						 (get_int(is_rtl) == 0) && (dx > 0.5)) {
					  emit("elm,action,check,on", "");
					} else {
					  emit("elm,action,check,off", "");
					}
					set_int(was_drag, 1);
					set_int(is_drag, 0);
				}
			}
		}
	  
		program {
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "edje,state,rtl"; source: "edje";
			script {
				set_int(is_rtl, 1);
			}
		}
		program {
			signal: "edje,state,ltr"; source: "edje";
			script {
				set_int(is_rtl, 0);
			}
		}
	}
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
}
