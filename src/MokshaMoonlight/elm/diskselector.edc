group { "elm/diskselector/base/default";
	images.image: "bar_shine.png" COMP;

	parts {
		rect { "bg"; nomouse;
			desc { "default"; color: VISIBLE; color_class: "dialog_base"; }
		}
		part { "shine_center"; nomouse;
			desc { "default"; color: "#FFFFFFC8"; color_class: "focus";
				rel1.to: "bg";
				rel2.to: "bg";
				image.normal: "bar_shine.png";
			}
		}
		rect { "clipper";
			desc { "default";
				rel1.to: "bg";
				rel2.to: "bg";
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
		}
		swallow { "elm.swallow.content"; clip: "clipper";
			desc { "default";
				rel1.to: "bg";
				rel2.to: "bg";
			}
		}
	}
}

group { "elm/diskselector/item/default";
	data.item: "len_threshold" "14";
	data.item: "display_item_num" "3";
	data.item: "min_height" "-1";
	data.item: "min_width" "-1";

	parts {
		swallow { "elm.swallow.icon"; scale;
			desc { "default";
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.relative: 0 0;
				rel1.offset: 1 1;
				rel2.relative: 0 1;
				rel2.offset: 1 -2;
			}
			desc { "show"; inherit; min: 10 10;
				aspect: 1.0 1.0;
			}
			desc { "default_small"; inherit; min: 10 10;
				rel1.relative: 0 0.2;
				rel2.relative: 0 0.8;
				aspect: 1.0 1.0;
			}
			desc { "left_side"; inherit; min: 10 10; color: "#FFFFFFA0";
				rel1.relative: 0 0.2;
				rel2.relative: 0 0.8;
				aspect: 1.0 1.0;
			}
			desc { "right_side"; color: "#FFFFFFA0"; min: 10 10;
				inherit: "left_side" 0.0;
				rel1.relative: 0.4 0.2;
				rel2.relative: 0.4 0.8;
				aspect: 1.0 1.0;
			}
			desc { "icon_only"; inherit; min: 10 10;
				align: 0.5 0.5;
				rel1.relative: 0 0;
				rel2.relative: 1 1;
				aspect: 1.0 1.0;
			}
		}
		text { "elm.text"; scale;
			desc { "default"; color_class: "button_text"; hid;
				rel1.relative: 1 0.0;
				rel1.to_x: "elm.swallow.icon";
				rel2.relative: 1.0 1.0;
				text.font: "Sans,Edje-Vera"; text.size: 10;
				text.align: 0.5 0.5;
				text.min: 0 1;
			}
			desc { "show"; inherit; vis; }
			desc { "default_small"; inherit; vis;
				text.size: 10;
			}
			desc { "left_side"; inherit; color_class: "button_text_disabled"; vis;
				text.size: 8;
				text.align: 0.2 0.5;
			}
			desc { "right_side"; inherit; color_class: "button_text_disabled"; vis;
				text.size: 8;
				text.align: 0.8 0.5;
			}
			desc { "text_only"; inherit; vis;
				rel1.relative: 0 0;
				rel2.relative: 1 1;
			}
			desc { "text_only_left_side"; inherit: "left_side" 0.0;
				rel1.relative: 0 0;
				rel2.relative: 1 1;
			}
			desc { "text_only_right_side"; inherit: "right_side" 0.0; vis;
				rel1.relative: 0 0;
				rel2.relative: 1 1;
			}
		}
		rect { "over1"; mouse; repeat;
			ignore: ON_HOLD;
			desc { "default"; color: "#00000000"; }
		}
	}

	programs {
		script {
			public item_style; // 0:icon and text, 1:text only, 2:con only
		}
		program { "center_text";
			signal: "elm,state,center"; source: "elm";
			script {
				if (get_int(item_style) == 1)
					set_state(PART:"elm.text", "text_only", 0.0);
				else if (get_int(item_style) == 2)
					set_state(PART:"elm.swallow.icon", "icon_only", 0.0);
				else {
					set_state(PART:"elm.text", "show", 0.0);
					set_state(PART:"elm.swallow.icon", "show", 0.0);
				}
			}
		}
		program { "center_small_text";
			signal: "elm,state,center_small"; source: "elm";
			action: STATE_SET "default_small" 0.0;
			target: "elm.text";
			target: "elm.swallow.icon";
		}
		program { "l_side_text";
			signal: "elm,state,left_side"; source: "elm";
			script {
				if (get_int(item_style) == 1)
					set_state(PART:"elm.text", "text_only_left_side", 0.0);
				else if (get_int(item_style) == 2)
					set_state(PART:"elm.swallow.icon", "left_side", 0.0);
				else {
					set_state(PART:"elm.text", "left_side", 0.0);
					set_state(PART:"elm.swallow.icon", "left_side", 0.0);
				}
			}
		}
		program { "r_side_text";
			signal: "elm,state,right_side"; source: "elm";
			script {
				if (get_int(item_style) == 1)
					set_state(PART:"elm.text", "text_only_right_side", 0.0);
				else if (get_int(item_style) == 2)
					set_state(PART:"elm.swallow.icon", "right_side", 0.0);
				else {
					set_state(PART:"elm.text", "right_side", 0.0);
					set_state(PART:"elm.swallow.icon", "right_side", 0.0);
				}
			}
		}
		program { "icon_only";
			signal: "elm,state,icon,only"; source: "elm";
			script {
				set_state(PART:"elm.swallow.icon", "icon_only", 0.0);
				set_int(item_style, 2);
			}
		}
		program { "text_only";
			signal: "elm,state,text,only"; source: "elm";
			script {
				set_state(PART:"elm.text", "text_only", 0.0);
				set_int(item_style, 1);
			}
		}
		program { "text_icon";
			signal: "elm,state,text,icon"; source: "elm";
			script {
				set_int(item_style, 0);
			}
		}
		program { "field_click";
			signal: "mouse,clicked,1"; source: "over1";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
	}
}

group { "elm/diskselector/item/datetime/default";
	data.item: "len_threshold" "10";
	data.item: "min_height" "-1";
	data.item: "min_width" "-1";

	parts {
		text { "elm.text"; nomouse; scale;
			desc { "default"; min: 10 10; color_class: "button_text"; vis;
				align: 0.0 0.0;
				text.font: "Sans,Edje-Vera"; text.size: 10;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "center_sel"; inherit; color: VISIBLE; }
			desc { "left_side"; inherit; color_class: "button_text_disabled";
				text.align: 0.2 0.5;
			}
			desc { "left_side_sel"; inherit; color: VISIBLE;
				text.align: 0.2 0.5;
			}
			desc { "right_side"; inherit; color_class: "button_text_disabled";
				text.align: 0.8 0.5;
			}
			desc { "right_side_sel"; inherit; color: VISIBLE;
				text.align: 0.8 0.5;
			}
		}
		rect { "over1"; mouse; repeat;
			ignore: ON_HOLD;
			desc { "default"; color: "#00000000"; }
		}
	}

	programs {
		script {
			public field_pos; // center = 0,left = 1, right =2.
			public field_selected; //field is selected(1) or not(0).

			public update_state() {
				new pos, is_sel;
				pos = get_int(field_pos)
				is_sel = get_int(field_selected);
				if (is_sel == 1) {
					if (pos == 0)
						set_state(PART:"elm.text", "center_sel", 0.0);
					else if (pos == 1)
						set_state(PART:"elm.text", "left_side_sel", 0.0);
					 else if (pos == 2)
						set_state(PART:"elm.text", "right_side_sel", 0.0);
				}
				else if (is_sel == 0) {
					if (pos == 0)
						set_state(PART:"elm.text", "default", 0.0);
					else if (pos == 1)
						set_state(PART:"elm.text", "left_side", 0.0);
					 else if (pos == 2)
						set_state(PART:"elm.text", "right_side", 0.0);
				}
			}
		}
		program { "selected_text";
			signal: "elm,state,selected"; source: "elm";
			script {
				set_int(field_selected, 1);
				update_state();
			}
		}
		program { "default_text";
			signal: "elm,state,default"; source: "elm";
			script {
				set_int(field_selected, 0);
				update_state();
			}
		}
		program { "center_text";
			signal: "elm,state,center"; source: "elm";
			script {
				set_int(field_pos, 0);
				update_state();
			}
		}
		program { "center_small_text";
			signal: "elm,state,center_small"; source: "elm";
			script {
				set_int(field_pos, 0);
				update_state();
			}
		}
		program { "l_side_text";
			signal: "elm,state,left_side"; source: "elm";
			script {
				set_int(field_pos, 1);
				update_state();
			}
		}
		program { "r_side_text";
			signal: "elm,state,right_side"; source: "elm";
			script {
				set_int(field_pos, 2);
				update_state();
			}
		}
		program { "field_click";
			signal: "mouse,clicked,1"; source: "over1";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
	}
}
