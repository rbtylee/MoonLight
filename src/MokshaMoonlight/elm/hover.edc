/* TODO: replicate diagonal swallow slots to the other hover styles */
group { "elm/hover/base/default";
	parts {
		swallow { "elm.swallow.offset";
			desc { "default";
				align: 0.0 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
				rel2.relative: 1.0 1.0;
			}
		}
		rect { "base"; mouse;
			desc { "default"; color: "#00000040"; }
		}
		rect { "box"; nomouse;
			desc { "default"; color: "#00000000";
				rel1.to: "elm.swallow.size";
				rel1.offset: -2 -2;
				rel2.to: "elm.swallow.size";
				rel2.offset: 1 1;
			}
		}
		swallow { "elm.swallow.slot.left";
			desc { "default";
				align: 1.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: -1 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.top-left";
			desc { "default";
				align: 1.0 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 0.0 0.0;
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.top";
			desc { "default";
				align: 0.5 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 -1;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.top-right";
			desc { "default";
				align: 0.0 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.right";
			desc { "default";
				align: 0.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: 0 -1;
			}
		}
		swallow { "elm.swallow.slot.bottom-right";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 1.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.bottom";
			desc { "default";
				align: 0.5 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 0;
			}
		}
		swallow { "elm.swallow.slot.bottom-left";
			desc { "default";
				align: 1.0 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 0;
			}
		}
		swallow { "elm.swallow.slot.middle";
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
	}
}

group { "elm/hover/base/popout";
	images.image: "dia_bg.png" COMP;

	parts {
		swallow { "elm.swallow.offset";
			desc { "default";
				align: 0.0 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
				rel2.relative: 1.0 1.0;
			}
		}
		rect { "base"; mouse;
			desc { "default"; color: "#00000000"; }
			desc { "visible";; inherit; color: "#00000040"; }
		}
		rect { "leftclip";
			desc { "default";
				rel2.to_x: "pop";
				rel2.relative: 0.0 1.0;
				rel2.offset: 1 -1;
			}
		}
		part { "left";
			clip: "leftclip";
			desc { "default"; color_class: "dialog_base"; hid;
				rel1.to: "elm.swallow.slot.left";
				rel1.offset: -5 -5;
				rel2.to: "elm.swallow.slot.left";
				rel2.offset: 4 4;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "visible";; inherit; vis; }
		}
		swallow { "elm.swallow.slot.left"; clip: "leftclip";
			desc { "default";
				align: 0.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: -1 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -1;
			}
			desc { "visible";; inherit;
				rel1.offset: -7 0;
				rel2.offset: -7 -1;
				align: 1.0 0.5;
			}
		}
		rect { "rightclip";
			desc { "default";
				rel1.to_x: "pop";
				rel1.relative: 1.0 0.0;
				rel1.offset: -2 0;
			}
		}
		part { "right"; clip: "rightclip";
			desc { "default"; color_class: "dialog_base"; hid;
				rel1.to: "elm.swallow.slot.right";
				rel1.offset: -5 -5;
				rel2.to: "elm.swallow.slot.right";
				rel2.offset: 4 4;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "visible";; inherit; vis; }
		}
		swallow { "elm.swallow.slot.right";  clip: "rightclip";
			desc { "default";
				align: 1.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: 0 -1;
			}
			desc { "visible";; inherit;
				rel1.offset: 6 0;
				rel2.offset: 6 -1;
				align: 0.0 0.5;
			}
		}
		rect { "topclip";
			desc { "default";
				rel2.to_y: "pop";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 1;
			}
		}
		part { "top"; clip: "topclip"; 
			desc { "default"; color_class: "dialog_base"; hid;
				rel1.to: "elm.swallow.slot.top";
				rel1.offset: -5 -5;
				rel2.to: "elm.swallow.slot.top";
				rel2.offset: 4 4;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "visible";; inherit; vis; }
	  }
		swallow { "elm.swallow.slot.top";  clip: "topclip";
			desc { "default"; vis;
				align: 0.5 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 -1;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 -1;
			}
			desc { "visible";; inherit;
				rel1.offset: 0 -7;
				rel2.offset: -1 -7;
				align: 0.5 1.0;
			}
		}
		rect { "bottomclip";
			desc { "default";
				rel1.to_y: "pop";
				rel1.relative: 0.0 1.0;
				rel1.offset: -1 -2;
			}
		}
		part { "bottom"; clip: "bottomclip";
			desc { "default"; color_class: "dialog_base"; hid;
				rel1.to: "elm.swallow.slot.bottom";
				rel1.offset: -5 -5;
				rel2.to: "elm.swallow.slot.bottom";
				rel2.offset: 4 4;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "visible";; inherit; vis; }
		} 
		swallow { "elm.swallow.slot.bottom"; clip: "bottomclip";
			desc { "default";
				align: 0.5 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 0;
			}
			desc { "visible";; inherit;
				rel1.offset: 0 6;
				rel2.offset: -1 6;
				align: 0.5 0.0;
			}
		}
		part { "pop"; mouse; 
			desc { "default"; color_class: "dialog_base";
				rel1.to: "elm.swallow.slot.middle";
				rel1.offset: -6 -6;
				rel2.to: "elm.swallow.slot.middle";
				rel2.offset: 5 5;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
		}
		swallow { "elm.swallow.slot.middle";
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
		program { "show";
			signal: "elm,action,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "base";
		}
		program { "hide";
			signal: "elm,action,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program { "leftshow";
			signal: "elm,action,slot,left,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "left";
			target: "elm.swallow.slot.left";
		}
		program { "lefthide";
			signal: "elm,action,slot,left,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "left";
			target: "elm.swallow.slot.left";
		}
		program { "rightshow";
			signal: "elm,action,slot,right,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "right";
			target: "elm.swallow.slot.right";
		}
		program { "righthide";
			signal: "elm,action,slot,right,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "right";
			target: "elm.swallow.slot.right";
		}
		program { "topshow";
			signal: "elm,action,slot,top,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "top";
			target: "elm.swallow.slot.top";
		}
		program { "tophide";
			signal: "elm,action,slot,top,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "top";
			target: "elm.swallow.slot.top";
		}
		program { "bottomshow";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "bottom";
			target: "elm.swallow.slot.bottom";
		}
		program { "bottomhide";
			signal: "elm,action,slot,bottom,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "bottom";
			target: "elm.swallow.slot.bottom";
		}
	}
}

group { "elm/hover/base/hoversel_vertical/default";
	alias: "elm/hover/base/hoversel_vertical/entry";

	parts {
		swallow { "elm.swallow.offset";
			desc { "default";
				align: 0.0 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
				rel2.relative: 1.0 1.0;
			}
		}
		part { "bg"; mouse; 
			desc { "default"; color_class: "dialog_base";
				rel1.to_x: "limit0";
				rel1.to_y: "elm.swallow.slot.top";
				rel1.offset: -7 -4;
				rel2.to_x: "limit1";
				rel2.to_y: "elm.swallow.slot.middle";
				rel2.relative: 1.0 0.0;
				rel2.offset: 0 5;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "bottom"; color_class: "dialog_base";
				rel1.to_x: "limit0";
				rel1.to_y: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: -7 -4;
				rel2.to_x: "limit1";
				rel2.to_y: "elm.swallow.slot.bottom";
				rel2.offset: 0 5;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
		}
		spacer { "limit0";
			desc { "default"; min: 1 1; max: 1 99999;
				rel1.to_x: "elm.swallow.slot.top";
				rel1.offset: 1 0;
				rel2.to_x: "elm.swallow.slot.middle";
				rel2.offset: 0 0;
				rel2.relative: 0.0 1.0;
				align: 0.0 0.5;
			}
			desc { "bottom"; inherit;
				rel1.to_x: "elm.swallow.slot.bottom";
			}
		}
		spacer { "limit1";
			desc { "default"; min: 1 1; max: 1 99999;
				rel1.to_x: "elm.swallow.slot.middle";
				rel1.offset: -1 0;
				rel1.relative: 1.0 0.0;
				rel2.to_x: "elm.swallow.slot.top";
				rel2.offset: -2 0;
				align: 1.0 0.5;
			}
			desc { "bottom"; inherit;
				rel2.to_x: "elm.swallow.slot.bottom";
			}
		}
		rect { "base";
			desc { "default"; color: "#00000000"; }
			desc { "visible";; inherit; color: "#00000000"; }
		}
		rect { "topclip";
			desc { "default";
				rel2.to_y: "bg";
				rel2.offset: -1 -6;
			}
		}
		swallow { "elm.swallow.slot.top";  clip: "topclip";
			desc { "default"; vis;
				align: 0.5 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 -1;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 -1;
			}
			desc { "visible";; inherit;
				align: 0.5 1.0;
			}
		}
		rect { "bottomclip";
			desc { "default";
				rel1.to_y: "bg";
				rel1.offset: 0 3;
			}
		}
		swallow { "elm.swallow.slot.bottom"; clip: "bottomclip";
			desc { "default";
				align: 0.5 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 2;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 2;
			}
			desc { "visible";; inherit;
				align: 0.5 0.0;
			}
		}
		swallow { "elm.swallow.slot.middle";
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
		program { "show";
			signal: "elm,action,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "base";
		}
		program { "hide";
			signal: "elm,action,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program { "topshow";
			signal: "elm,action,slot,top,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.top";
		}
		program { "topshow3";
			signal: "elm,action,slot,top,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "bg";
			target: "limit0";
			target: "limit1";
		}
		program { "tophide";
			signal: "elm,action,slot,top,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.top";
		}
		program { "bottomshow";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.bottom";
		}
		program { "bottomshow3";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "bottom" 0.0;
			target: "bg";
			target: "limit0";
			target: "limit1";
		}
		program { "bottomhide";
			signal: "elm,action,slot,bottom,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.bottom";
		}
	}
}

group { "elm/hover/base/hoversel_horizontal/default";
	alias: "elm/hover/base/hoversel_horizontal/entry";

	parts {
		swallow { "elm.swallow.offset";
			desc { "default";
				align: 0.0 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
				rel2.relative: 1.0 1.0;
			}
		}
		rect { "base";
			desc { "default"; color: "#00000000"; }
			desc { "visible";; inherit; color: "#00000000"; }
		}
		part { "bg"; nomouse;
			desc { "default"; color_class: "dialog_base";
				rel1.to_x: "elm.swallow.slot.left";
				rel1.to_y: "elm.swallow.slot.middle";
				rel1.offset: -6 0;
				rel2.to_x: "elm.swallow.slot.middle";
				rel2.to_y: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
				rel2.offset: 4 0;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
			desc { "right"; color_class: "dialog_base";
				rel1.to_x: "elm.swallow.slot.middle";
				rel1.to_y: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
				rel1.offset: -5 0;
				rel2.to_x: "elm.swallow.slot.right";
				rel2.to_y: "elm.swallow.slot.middle";
				rel2.offset: 5 0;
				image.normal: "dia_bg.png";
				image.border: 15 15 2 2;
				fill.smooth: 0;
			}
		} 
		rect { "leftclip";
			desc { "default";
				rel2.to_x: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
			}
		}
		swallow { "elm.swallow.slot.left"; clip: "leftclip";
			desc { "default";
				align: 0.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 0.0;
				rel1.offset: -1 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -1;
			}
			desc { "visible";; inherit;
				rel1.offset: -7 0;
				rel2.offset: -7 -1;
				align: 1.0 0.5;
			}
		}
		rect { "rightclip";
			desc { "default";
				rel1.to_x: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
			}
		}
		swallow { "elm.swallow.slot.right"; clip: "rightclip";
			desc { "default";
				align: 1.0 0.5;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 1.0 0.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: 0 -1;
			}
			desc { "visible";; inherit;
				rel1.offset: 6 0;
				rel2.offset: -6 -1;
				align: 0.0 0.5;
			}
		}
		swallow { "elm.swallow.slot.middle";
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
		program { "show";
			signal: "elm,action,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "base";
		}
		program { "hide";
			signal: "elm,action,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "base";
		}
		program { "leftshow";
			signal: "elm,action,slot,left,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.left";
		}
		program { "leftshow3";
			signal: "elm,action,slot,left,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "bg";
		}
		program { "lefthide";
			signal: "elm,action,slot,left,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.left";
		}
		program { "rightshow";
			signal: "elm,action,slot,right,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.right";
		}
		program { "rightshow3";
			signal: "elm,action,slot,right,show"; source: "elm";
			action: STATE_SET "right" 0.0;
			transition: DECELERATE 0.5;
			target: "bg";
		}
		program { "righthide";
			signal: "elm,action,slot,right,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.right";
		}
	}
}
