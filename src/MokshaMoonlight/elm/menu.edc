group { "elm/menu/item/default";
	images.image: "selected.png" COMP;
	script {
		public menu_text_visible; //0:hide (default), 1:visible
		public menu_disable; //0:enable, 1:disable
	}
	parts {
		part { "base"; nomouse;
			desc { "default"; hid;
				image.normal: "selected.png";
				image.border: 2 2 2 2;
			}
			desc { "active"; inherit; vis; }
			desc { "disabled"; inherit; }
		}
		// XXX: need to handle no icon mode
		swallow { "elm.swallow.content"; nomouse; clip: "disabler"; scale;
			desc { "default"; min: 16 16;
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.offset: 2 2;
				rel2.offset: -2 -2;
				rel2.relative: 0.0 1.0;
			}
		}
		// XXX: check/radio goes next (right of) content, no radio/check handle
		// XXX: need to handle no text?
		// XXX: need arrowspace on/off based on submenus in menu
		spacer { "arrowspace"; scale;
			desc { "default";
				FIXED_SIZE(5,7)
				rel1.offset: -8 0;
				rel1.relative: 1.0 0.0;
				rel2.offset: -6 -1;
				align: 1.0 0.5;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "menu_item";
				color3: VISIBLE;
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel1.offset: 5 -1;
				rel2.to_x: "arrowspace";
				rel2.offset: -6 -1;
				rel2.relative: 0.0 1.0;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.ellipsis: -1;
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; hid; }
			desc { "disabled"; inherit; hid; }
		}
		text { "label2"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "menu_item_disabled"; hid;
				color3: VISIBLE;
				STAY_ON("elm.text")
				text.font: "Sans"; text.size: 10;
				text.text_source: "elm.text";
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; hid; }
			desc { "disabled"; inherit; vis; }
		}
		text { "label3"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "menu_item_active"; hid;
				color3: VISIBLE;
				STAY_ON("elm.text")
				text.font: "Sans"; text.size: 10;
				text.text_source: "elm.text";
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; vis; }
			desc { "disabled"; inherit; hid; }
		}
		rect { "event"; ignore: ON_HOLD;
			desc { "default"; color: TRANSPARENT; }
			desc { "disabled"; inherit; hid; }
		}
		rect { "disabler";
			desc { "default"; color: VISIBLE; }
			desc { "disabled"; inherit; color: "#FFFFFF80"; }
		}
	}

	programs {
		program {
			signal: "mouse,in"; source: "event";
			action: SIGNAL_EMIT "elm,action,activate" "elm";
			after: "selected";
		}
		program {
			signal: "mouse,out"; source: "event";
			after: "unselected";
		}
		program { signal: "mouse,down,1"; source: "event";
			after: "selected";
		}
		program {
			signal: "mouse,up,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
		program { "text_show";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				set_int(menu_text_visible, 1);
			}
		}
		program { "text_hide";
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				set_int(menu_text_visible, 0);
			}
		}
		program { "selected";
			signal: "elm,state,selected"; source: "elm";
			action: STATE_SET "active" 0.0;
			target: "base";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program { "unselected";
			signal: "elm,state,unselected"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "base";
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
	}
}

group { "elm/menu/item_with_submenu/default";
	inherit: "elm/menu/item/default";
  // alias: "elm/menu/main_menu_submenu/default";
	images.image: "menu_arrow_normal.png" COMP;
	images.image: "menu_arrow_sel.png" COMP;

	parts {
		part { "arrow"; nomouse;
			desc { "default";
				image.normal: "menu_arrow_normal.png";
				STAY_ON("arrowspace")
				FIXED_SIZE(9,12)
			}
			desc { "active"; inherit;
				image.normal: "menu_arrow_sel.png";
			}
			desc { "disabled"; inherit;
				color: "#FFFFFF7D";
			}
		}
	}
	programs {
		program { "selected";
			target: "arrow";
		}
		program { "unselected";
			target: "arrow";
		}
		program {
			signal: "mouse,in"; source: "event";
			action: SIGNAL_EMIT "elm,action,open" "elm";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "arrow";
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "base";
			target: "arrow";
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
	}
}

group { "elm/menu/separator/default";
	inherit: "e/widgets/menu/default/separator";
}

group { "elm/menu/main_menu_submenu/default";
	images.image: "menu_focus.png" COMP;
	script {
		public menu_text_visible; //0:hide (default), 1:visible
		public menu_disable; //0:enable, 1:disable
	}

	parts {
		part { "base_sel"; nomouse;
			desc { "default"; hid;
				image.normal: "menu_focus.png";
				image.border: 5 5 5 5;
			}
			desc { "active"; inherit; vis; }
		}
		swallow { "elm.swallow.content"; nomouse; clip: "disabler"; scale;
			desc { "default"; min: 16 16;
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.offset: 1 1;
				rel2.offset: -1 -1;
				rel2.relative: 0.0 1.0;
			}
			desc { "noicon"; inherit; hid; }
		}
		// XXX: check/radio goes next (right of) content, no radio/check handle
		// XXX: need to handle no text?
		// XXX: need arrowspace on/off based on submenus in menu
		spacer { "arrowspace"; scale;
			desc { "default";
				FIXED_SIZE(5,7)
				rel1.offset: -8 0;
				rel1.relative: 1.0 0.0;
				rel2.offset: -6 -1;
				align: 1.0 0.5;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "menu_item";
				color3: VISIBLE;
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel1.offset: 3 0;
				rel2.to_x: "arrowspace";
				rel2.offset: -3 -1;
				rel2.relative: 0.0 1.0;
				text.font: "Sans:style=Bold"; text.size: 12;
				text.min: 1 1;
				text.ellipsis: -1;
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; hid; }
			desc { "disabled"; inherit; hid; }
		}
		text { "label2"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; hid;
				color_class: "menu_item_disabled";
				color3: VISIBLE;
				STAY_ON("elm.text")
				text.font: "Sans"; text.size: 12;
				text.text_source: "elm.text";
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; hid; }
			desc { "disabled"; inherit; vis; }
		}
		text { "label3"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; hid;
				color3: TRANSPARENT;
				STAY_ON("elm.text")
				text.font: ":style=Bold"; text.size: 12;
				text.text_source: "elm.text";
				text.align: 0.0 0.5;
				text.text_class: "menu_item";
			}
			desc { "active"; inherit; vis; }
			desc { "disabled"; inherit; hid; }
		}
		rect { "event"; ignore: ON_HOLD;
			desc { "default"; color: TRANSPARENT; }
			desc { "disabled"; inherit; hid; }
		}
		rect { "disabler";
			desc { "default"; color: VISIBLE; }
			desc { "disabled"; inherit; color: "#FFFFFF80"; }
		}
	}
	programs {
		program {
			signal: "mouse,out"; source: "event";
			after: "unselected";
		}
		program { signal: "mouse,down,1"; source: "event";
			after: "selected";
		}
		program {
			signal: "mouse,down,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
		program { "text_show";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				set_int(menu_text_visible, 1);
			}
		}
		program { "text_hide";
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				set_int(menu_text_visible, 0);
			}
		}
		program { "icon_show";
			signal: "elm,state,icon,visible"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.content";
		}
		program { "icon_hide";
			signal: "elm,state,icon,hidden"; source: "elm";
			action: STATE_SET "noicon" 0.0;
			target: "elm.swallow.content";
		}
		program { "selected";
			signal: "elm,state,selected"; source: "elm";
			action: STATE_SET "active" 0.0;
			target: "base_sel";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program { "unselected";
			signal: "elm,state,unselected"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base_sel";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "event";
			target: "disabler";
			target: "elm.text";
			target: "label2";
			target: "label3";
		}
	}
}


//In the hover used by the menu only the bottom part is used.
group { "elm/hover/base/menu/default";
	images.image: "base_ibar.png" COMP;

	parts {
		swallow { "elm.swallow.offset";
			desc { "default";
				align: 0.0 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
				rel2.relative: 1.0 1.0;
			}
		}
		rect { "base"; repeat;
			desc { "default"; color: "#00000000"; }
		}
		swallow { "elm.swallow.slot.left";
			desc { "default"; }
		}
		swallow { "elm.swallow.slot.right";
			desc { "default"; }
		}
		swallow { "elm.swallow.slot.top";
			desc { "default"; }
			desc { "visible"; inherit; }
		}
		rect { "bottomclip";
			desc { "default"; color: TRANSPARENT; }
			desc { "visible"; inherit; color: VISIBLE; }
		}
		part { "bg"; nomouse; clip: "bottomclip";
			desc { "default";
				rel1.to: "elm.swallow.slot.bottom";
				rel2.to: "elm.swallow.slot.bottom";
				rel1.offset: -16 -6;
				rel2.offset: 17 17;
				image.normal: "base_ibar.png";
				image.border: 17 17 7 17;
				fill.smooth: 0;
			}
		}
		swallow { "elm.swallow.slot.bottom"; clip: "bottomclip";
			desc { "default";
				align: 0.5 0.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 0;
			}
			desc { "visible"; inherit; }
		}
		swallow { "elm.swallow.slot.middle"; repeat;
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
		program { "bottomshow";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.5;
			target: "bottomclip";
			target: "elm.swallow.slot.bottom";
		}
		program { "bottomhide";
			signal: "elm,action,slot,bottom,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "bottomclip";
			target: "elm.swallow.slot.bottom";
		}
	}
}

//In the hover used by the submenu only the bottom part is used
//and no part should interact except the bottom area
group { "elm/hover/base/submenu/default";
	inherit: "elm/hover/base/menu/default";

	parts {
		part { "elm.swallow.offset"; repeat; }
		//here we don't catch events like the hover does
		rect { "base"; repeat;
			desc { "visible"; color: "#00000000"; hid; }
		}
	}
}

group { "elm/hover/base/main_menu/default";
	parts {
		swallow { "elm.swallow.offset";
			desc { "default"; hid;
				fixed: 1 1;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				rel1.offset: 0 0;
				fixed: 1 1;
			}
		}
		rect { "bottomclip";
			desc { "default";
				rel1.offset: -1 -2;
			}
		}
		rect { "bottom"; clip: "bottomclip";
			desc { "default"; hid;
				rel1.to: "elm.swallow.slot.bottom";
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.bottom";
				rel2.offset: -1 -1;
			}
		}
		swallow { "elm.swallow.slot.bottom"; clip: "bottomclip";
			desc { "default";
				align: 0.5 0.0;
				rel1.to: "elm.swallow.size";
				rel1.relative: 0.0 1.0;
				rel2.to: "elm.swallow.size";
				fixed: 1 0;
			}
			desc { "visible"; inherit; }
		}
	}
	programs {
		program { "bottomshow";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.3;
			target: "elm.swallow.slot.bottom";
		}
	}
}

group { "elm/hover/base/main_menu_submenu/default";
	parts {
		swallow { "elm.swallow.offset";
			repeat;
			desc { "default";
				align: 0.0 0.0;
				rel2.relative: 0.0 0.0;
			}
		}
		swallow { "elm.swallow.size";
			desc { "default";
				align: 0.0 0.0;
				rel1.to: "elm.swallow.offset";
				rel1.relative: 1.0 1.0;
				rel2.to: "elm.swallow.offset";
			}
		}
		rect { "base"; repeat;
			desc { "default"; color: "#00000000"; }
			desc { "visible"; inherit; }
		}
		rect { "bottomclip";
			desc { "default";
				rel1.to_y: "pop";
				rel1.relative: 0.0 1.0;
				rel1.offset: -1 -2;
			}
		}
		part { "bg"; nomouse; clip: "bottomclip";
			desc { "default";
				rel1.to: "elm.swallow.slot.bottom";
				rel2.to: "elm.swallow.slot.bottom";
				rel1.offset: -16 -6;
				rel2.offset: 17 17;
				image.normal: "base_ibar.png";
				image.border: 17 17 7 17;
				fill.smooth: 0;
			}
		}
		swallow { "elm.swallow.slot.bottom";  clip: "bottomclip";
			desc { "default";
				align: 0.5 1.0;
				rel1.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 0;
			}
			desc { "visible"; inherit;
				rel1.offset: 0 6;
				rel2.offset: -1 6;
				align: 0.5 0.0;
			}
		}
		rect { "pop"; mouse; repeat;
			desc { "default"; hid;
				rel1.to: "elm.swallow.slot.middle";
				rel1.offset: 0 0;
				rel2.to: "elm.swallow.slot.middle";
				rel1.relative: 0.0 1.0;
				rel2.offset: -1 0;
			}
		}
		swallow { "elm.swallow.slot.middle";  repeat;
			desc { "default";
				rel1.to: "elm.swallow.size";
				rel2.to: "elm.swallow.size";
			}
		}
	}

	programs {
		program { "end";
			signal: "mouse,up,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,dismiss" "elm";
		}
		program { "show";
			signal: "elm,action,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "base";
		}
		program { "hide";
			signal: "elm,action,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program { "bottomshow";
			signal: "elm,action,slot,bottom,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: DECELERATE 0.3;
			target: "elm.swallow.slot.bottom";
		}
		program { "bottomhide";
			signal: "elm,action,slot,bottom,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "elm.swallow.slot.bottom";
		}
	}
}
