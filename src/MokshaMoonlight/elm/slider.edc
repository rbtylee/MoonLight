group { "elm/slider/hidden/limit";
	parts {
		text { "elm.units.min"; nomouse; scale;
			desc { "default"; hid;
				align: 1.0 0.5;
				text.font: "Sans"; text.size: 10;
				text.text_class: "slider_text";
				text.min: 1 1;
				text.ellipsis: -1;
				text.align: 0.0 0.5;
			}
		}
		text { "elm.units.max"; nomouse; scale;
			desc { "default"; hid;
				align: 1.0 0.5;
				text.font: "Sans"; text.size: 10;
				text.text_class: "slider_text";
				text.min: 1 1;
				text.ellipsis: -1;
				text.align: 0.0 0.5;
			}
		}
	}
}

group { "elm/slider/horizontal/default";
	alias: "elm/slider/horizontal/disabled";
	alias: "elm/slider/horizontal/media_player/position/default";
	alias: "elm/slider/horizontal/media_player/position/flush";
	alias: "elm/slider/horizontal/media_player/volume/default";
	alias: "elm/slider/horizontal/media_player/volume/flush";

	images.image: "slider_runnerh.png" COMP;
	images.image: "slider.png" COMP;
	images.image: "slider0.png" COMP;
	images.image: "slider_clicked.png" COMP;

#define ICON    1
#define LABEL   2
#define END     4
#define UNITS   8
#define MASK    15
#define INVERT  16
#define DISABLE 32
	script {
		public slmode;
		public eval_mode(m) {
			new ic = m & ICON;
			new l = m & LABEL;
			new e = m & END;
			new u = m & UNITS;
			new d = m & DISABLE;
			new i = m & INVERT;
			if (i) {
				if (!d) {
					set_state(PART:"slider", "default", 0.0);
				} else {
					set_state(PART:"slider", "disabled", 0.0);
				}
			} else {
				if (!d) {
					set_state(PART:"slider", "default", 0.0);
				} else {
					set_state(PART:"slider", "disabled", 0.0);
				}
			}
			if (l) {
				if (!d) {
					set_state(PART:"elm.text", "visible", 0.0);
				} else {
					set_state(PART:"elm.text", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.text", "default", 0.0);
			}
			if (u) {
				if (!d) {
					set_state(PART:"elm.units", "visible", 0.0);
					set_state(PART:"limits", "visible", 0.0);
				} else {
					set_state(PART:"elm.units", "disabled_visible", 0.0);
					set_state(PART:"limits", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.units", "default", 0.0);
				set_state(PART:"limits", "default", 0.0);
			}
			if (ic) {
				set_state(PART:"elm.swallow.icon", "visible", 0.0);
				set_state(PART:"sizer.content", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.icon", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
			}
			if (e) {
				set_state(PART:"elm.swallow.end", "visible", 0.0);
				set_state(PART:"sizer.content.end", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.end", "default", 0.0);
				set_state(PART:"sizer.content.end", "default", 0.0);
			}
			if (!d) {
				set_state(PART:"event", "default", 0.0);
				set_state(PART:"dis_clip", "default", 0.0);
			} else {
				set_state(PART:"event", "disabled", 0.0);
				set_state(PART:"dis_clip", "disabled", 0.0);
			}
		}
	}

	parts {
		swallow { "elm.swallow.bar"; scale;
			desc { "default"; min: 42 21; max: 99999 21;
				align: 1.0 0.5;
				rel1.to_x: "elm.text";
				rel1.relative: 1.0 0.0;
				rel1.offset: 2 0;
				rel2.to_x: "limits";
				rel2.relative: 0.0 1.0;
				rel2.offset: -3 -1;
			}
		}
		part { "base"; nomouse;
			desc { "default"; min: 8 12; max: 99999 12;
				rel1.to: "elm.swallow.bar";
				rel2.to: "elm.swallow.bar";
				image.normal: "slider_runnerh.png";
				image.border: 4 4 4 4;
				fill.smooth: 0;
				fixed: 0 1;
			}
			desc { "disabled"; inherit; }
		}
		rect { "dis_clip";
			desc { "default";
				rel1.to: "elm.swallow.icon";
				rel2.to: "elm.swallow.end";
			}
			desc { "disabled"; inherit; color: "#FFFFFF40";
			}
		}
		swallow { "elm.swallow.icon"; clip: "dis_clip";
			desc { "default"; hid;
				align: 0.0 0.5;
				rel1.offset: 0 2;
				rel1.to_y: "elm.swallow.bar";
				rel2.offset: -1 -3;
				rel2.relative: 0.0 1.0;
				rel2.to_y: "elm.swallow.bar";
			}
			desc {"visible"; inherit; vis;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				rel1.offset: 2 2;
				rel2.offset: 2 -3;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "slider_text";
			}
			desc {"visible"; inherit;
				rel1.to: "elm.swallow.icon";
				rel2.to: "elm.swallow.icon";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "slider_text"; hid;
				color3: VISIBLE;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1.to_x: "elm.swallow.icon";
				rel1.relative: 1.0 0.0;
				rel1.offset: -1 2;
				rel2.to_x: "elm.swallow.icon";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 -3;
				text { font: "Sans"; size: 10;
					text_class: "slider";
					min: 0 0;
					align: 0.0 0.5;
					ellipsis: -1;
				}
			}
			desc {"visible"; inherit; vis;
				fixed: 1 0;
				rel1.offset: 2 2;
				rel2.offset: 2 -3;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible";
				inherit: "visible" 0.0;
				color_class: "slider_text_disabled";
			}
		}
		swallow { "elm.swallow.end"; clip: "dis_clip";
			desc { "default"; hid;
				align: 1.0 0.5;
				rel1.offset: 0 2;
				rel1.relative: 1.0 0.0;
				rel2.offset: -1 -3;
			}
			desc {"visible"; inherit; vis;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				rel1.offset: -3 2;
				rel2.offset: -3 -3;
			}
		}
		text { "sizer.content.end"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "slider_text";
			}
			desc {"visible"; inherit;
				rel1.to: "elm.swallow.end";
				rel2.to: "elm.swallow.end";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		alias: "elm.units.min" "limits:elm.units.min";
		alias: "elm.units.max" "limits:elm.units.max";
		group { "limits"; nomouse;
			source: "elm/slider/hidden/limit";
			scale;
			desc { "default"; hid;
				align: 1.0 0.5;
				min: SOURCE;
				fixed: 1 1;
				rel1.to_x: "elm.swallow.end";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 2;
				rel2.to_x: "elm.swallow.end";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -3;
			}
			desc {"visible"; inherit;
				rel1.offset: -3 2;
				rel2.offset: -3 -3;
			}
			desc { "disabled_visible"; inherit;
				rel1.offset: -3 2;
				rel2.offset: -3 -3;
			}
		}
		text { "elm.units"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "slider_text"; hid;
				color3: VISIBLE;
				fixed: 1 1;
				rel1.to_x: "limits";
				rel2.to_x: "limits";
				text.font: "Sans"; text.size: 10;
				text.text_class: "slider";
				text.align: 1.0 0.5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc {"visible"; inherit; vis; }
			desc { "disabled_visible";
				inherit: "visible" 0.0;
				color_class: "slider_text_disabled";
			}
		}
		group { "button"; nomouse;
			source: "elm/slider/horizontal/indicator/default";
			desc { "default";
				fixed: 1 1;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
			desc {"hidden";
				inherit;
				hid;
			}
		}
		rect { "elm.dragable.slider"; scale;
			dragable.x: 1 1 0;
			dragable.y: 0 0 0;
			dragable.confine: "elm.swallow.bar";
			desc { "default"; color: "#00000000"; min: 16 16; max: 16 16;
				fixed: 1 1;
				rel1.relative: 0.5 0.0;
				rel1.to_x: "elm.swallow.bar";
				rel2.relative: 0.5 1.0;
				rel2.to_x: "elm.swallow.bar";
			}
		}
		part { "slider";
			desc { "default";
				image.normal: "slider.png";
				FIXED_SIZE(9, 9)
				step: 2 2;
				rel1.to: "elm.dragable.slider";
				rel1.offset: -1 -1;
				rel2.to: "elm.dragable.slider";
				rel2.offset: 0 0;
			}
			desc { "disabled"; inherit;
				image.normal: "slider0.png";
			}
			desc { "over"; inherit;
				image.normal: "slider_clicked.png";
		 }
			desc { "clicked"; inherit;
				image.normal: "slider_clicked.png";
			}
		}
		rect { "slideevent"; repeat; scale; ignore: ON_HOLD;
			dragable.events: "elm.dragable.slider";
			desc { "default"; color: "#00000000";
				fixed: 1 1;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
		}
		swallow { "elm.track.slider"; nomouse;
			desc { "default"; max: 0 0;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
		}
		rect { "event";
			desc { "default"; color: "#00000000"; hid; }
			desc { "disabled"; inherit; vis; }
		}
	}
	programs {
	  OVER_P("slider","slideevent","default","over")
		program {
			signal: "mouse,down,1"; source: "elm.dragable.slider";
			action:  STATE_SET "clicked" 0.0;
			target: "slider";
		}
		program {
			signal: "mouse,up,1"; source: "elm.dragable.slider";
			action:  STATE_SET "default" 0.0;
			target: "slider";
		}
		program {
			signal: "elm,state,indicator,show"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,show" "elm";
			after: "popup_show2";
		}
		program {
			signal: "elm,state,indicator,hide"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,hide" "elm";
			after: "popup_hide2";
		}
		program {
			signal: "mouse,down,1"; source: "slideevent";
			action:  SIGNAL_EMIT "elm,popup,show" "elm";
			after: "popup_show2";
		}
		program { "popup_show2";
			action:  STATE_SET "hidden" 0.0;
			target: "button";
		}
		program {
			signal: "mouse,up,1"; source: "slideevent";
			action:  SIGNAL_EMIT "elm,popup,hide" "elm";
			after: "popup_hide2";
		}
		program { "popup_hide2";
			action:  STATE_SET "default" 0.0;
			target: "button";
		}
		program {
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "end_show";
			signal: "elm,state,end,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= END; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "end_hide";
			signal: "elm,state,end,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~END; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= UNITS; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,visible"; source: "elm";
			action: SIGNAL_EMIT "limits:limits,visible" "elm";
		}
		program {
			signal: "elm,state,units,hidden"; source: "elm";
			action:  STATE_SET "default" 0.0;
			script {
				new m = get_int(slmode);
				m &= ~UNITS; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,hidden"; source: "elm";
			action: SIGNAL_EMIT "limits:limits,hide" "elm";
		}
		program {
			signal: "elm,state,inverted,on"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= INVERT; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,inverted,off"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~INVERT; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			action: SIGNAL_EMIT "elm.dragable.slider:elm,state,disabled" "elm";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action: SIGNAL_EMIT "elm.dragable.slider:elm,state,enabled" "elm";
		}
	}
#undef ICON
#undef LABEL
#undef END
#undef UNITS
#undef MASK
#undef INVERT
#undef DISABLE
}

group { "elm/slider/horizontal/indicator/default";
	alias: "elm/slider/horizontal/indicator/disabled";
	alias: "elm/slider/horizontal/popup/default";
	alias: "elm/slider/horizontal/indicator/media_player/position/default";
	alias: "elm/slider/horizontal/indicator/media_player/position/flush";
	alias: "elm/slider/horizontal/indicator/media_player/volume/default";
	alias: "elm/slider/horizontal/indicator/media_player/volume/flush";

	parts {
		spacer { "base"; scale;
			desc { "default"; min: 16 16;
				fixed: 1 1;
			}
			desc { "disabled"; inherit; }
		}
		rect { "clip";
			desc { "default"; hid;
				fixed: 1 1;
				rel1.to: "elm.indicator";
				rel1.offset: -100 -100;
				rel2.to: "elm.indicator";
				rel2.offset: 99 99;
			}
			desc {"visible"; inherit; vis; }
		}
		part { "bevel"; nomouse; clip: "clip";
			desc { "default"; color: TOOLTIP_COLOR; hid;
				rel1.offset: -10 -4;
				rel1.to: "elm.indicator";
				rel2.offset: 9 3;
				rel2.to: "elm.indicator";
				image.normal: "popup.png";
				image.border: 8 8 8 8;
				fill.smooth: 0;
			}
			desc {"visible"; inherit; vis; }
		}
		text { "elm.indicator"; effect: SHADOW BOTTOM; nomouse; scale;
			clip: "clip";
			desc { "default"; color: VISIBLE; color_class: "slider_indicator"; hid;
				color3: TRANSPARENT;
				fixed: 1 1;
				align: 0.5 1.0;
				rel1.to: "base";
				rel1.relative: 0.0 -0.1;
				rel1.offset: 0 -12;
				rel2.to: "base";
				rel2.relative: 1.0 -0.1;
				rel2.offset: -1 -12;
				text.font: "Sans:style"; text.size: 10;
				text.min: 1 1;
				text.align: 0.5 1.0;
				text.text_class: "slider_indicator";
				text.ellipsis: -1;
			}
			desc {"visible"; inherit; vis; }
		}
	}
	programs {
		program {
			signal: "elm,popup,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,popup,hide"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,popup,hide"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,hide,done" "elm";
		}
		program {
			signal: "elm,state,val,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target: "clip";
		}
		program {
			signal: "elm,state,val,hide"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "clip";
		}
		program {
			signal: "elm,state,indicator,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,state,indicator,hide"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal:  "elm,state,disabled"; source: "elm";
			action:  STATE_SET "disabled" 0.0;
			target:  "base";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target:  "base";
		}
	}
}

group { "elm/slider/vertical/default";
	alias: "elm/slider/vertical/disabled";
	alias: "elm/slider/vertical/media_player/position/default";
	alias: "elm/slider/vertical/media_player/position/flush";
	alias: "elm/slider/vertical/media_player/volume/default";
	alias: "elm/slider/vertical/media_player/volume/flush";

	images.image: "slider_runnerv.png" COMP;
	images.image: "slider.png" COMP;
	images.image: "slider0.png" COMP;
	images.image: "slider_clicked.png" COMP;

#define ICON    1
#define LABEL   2
#define END     4
#define UNITS   8
#define MASK    15
#define INVERT  16
#define DISABLE 32

	script {
		public slmode;
		public eval_mode(m) {
			new ic = m & ICON;
			new l = m & LABEL;
			new e = m & END;
			new u = m & UNITS;
			new d = m & DISABLE;
			new i = m & INVERT;
			if (i) {
				if (!d) {
					set_state(PART:"slider", "default", 0.0);
				} else {
					set_state(PART:"slider", "disabled", 0.0);
				}
			} else {
				if (!d) {
					set_state(PART:"slider", "default", 0.0);
				} else {
					set_state(PART:"slider", "disabled", 0.0);
				}
			}
			if (l) {
				if (!d) {
					set_state(PART:"elm.text", "visible", 0.0);
				} else {
					set_state(PART:"elm.text", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.text", "default", 0.0);
			}
			if (u) {
				if (!d) {
					set_state(PART:"elm.units", "visible", 0.0);
					set_state(PART:"limits", "visible", 0.0);
				} else {
					set_state(PART:"elm.units", "disabled_visible", 0.0);
					set_state(PART:"limits", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.units", "default", 0.0);
				set_state(PART:"limits", "default", 0.0);
			}
			if (ic) {
				set_state(PART:"elm.swallow.icon", "visible", 0.0);
				set_state(PART:"sizer.content", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.icon", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
			}
			if (e) {
				set_state(PART:"elm.swallow.end", "visible", 0.0);
				set_state(PART:"sizer.content.end", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.end", "default", 0.0);
				set_state(PART:"sizer.content.end", "default", 0.0);
			}
			if (!d) {
				set_state(PART:"event", "default", 0.0);
				set_state(PART:"dis_clip", "default", 0.0);
			} else {
				set_state(PART:"event", "disabled", 0.0);
				set_state(PART:"dis_clip", "disabled", 0.0);
			}
		}
	}
	parts {
		swallow { "elm.swallow.bar"; scale;
			desc { "default"; min: 21 42; max: 21 99999;
				align: 0.5 1.0;
				rel1.to_y: "elm.text";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 2;
				rel2.to_y: "limits";
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 -3;
			}
		}
		part { "base"; nomouse;
			desc { "default"; min: 12 8; max: 12 99999;
				rel1.to: "elm.swallow.bar";
				rel2.to: "elm.swallow.bar";
				image.normal: "slider_runnerv.png";
				image.border: 4 4 4 4;
				fill.smooth: 0;
				fixed: 1 0;
			}
		}
		rect { "dis_clip";
			desc { "default";
				rel1.to: "elm.swallow.icon";
				rel2.to: "elm.swallow.end";
			}
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		swallow { "elm.swallow.icon"; clip: "dis_clip";
			desc { "default"; hid;
				align: 0.5 0.0;
				rel1.offset: 2 0;
				rel1.to_x: "elm.swallow.bar";
				rel2.offset: -3 -1;
				rel2.relative: 1.0 0.0;
				rel2.to_x: "elm.swallow.bar";
			}
			desc {"visible"; inherit; vis;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "slider_text";
			}
			desc {"visible"; inherit;
				rel1.to: "elm.swallow.icon";
				rel2.to: "elm.swallow.icon";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "slider_text"; hid;
				color3: VISIBLE;
				fixed: 0 1;
				align: 0.5 0.0;
				rel1.to_y: "elm.swallow.icon";
				rel1.relative: 0.0 1.0;
				rel1.offset: 2 -1;
				rel2.to_y: "elm.swallow.icon";
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -1;
				text.font: "Sans"; text.size: 10;
				text.text_class: "slider";
				text.min: 1 0;
				text.ellipsis: -1;
				text.align: 0.5 0.0;
			}
			desc {"visible"; inherit; vis;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
				text.min: 1 1;
			}
			desc { "disabled_visible"; color_class: "slider_text_disabled";
				inherit: "visible" 0.0;
			}
		}
		swallow { "elm.swallow.end"; clip: "dis_clip";
			desc { "default"; hid;
				align: 0.5 1.0;
				rel1.offset: 2 0;
				rel1.relative: 0.0 1.0;
				rel2.offset: -3 -1;
			}
			desc {"visible"; inherit; vis;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				rel2.offset: 2 -3;
				rel2.offset: -3 -3;
			}
		}
		text { "sizer.content.end"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "slider_text";
			}
			desc {"visible"; inherit;
				rel1.to: "elm.swallow.end";
				rel2.to: "elm.swallow.end";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		alias: "elm.units.min" "limits:elm.units.min";
		alias: "elm.units.max" "limits:elm.units.max";
		group { "limits"; nomouse; scale;
			source: "elm/slider/hidden/limit";
			desc { "default"; max: 0 0;
				align: 0.5 1.0;
				fixed: 1 1;
				rel1.to_y: "elm.swallow.end";
				rel1.relative: 0.0 0.0;
				rel1.offset: 2 1;
				rel2.to_y: "elm.swallow.end";
				rel2.relative: 1.0 0.0;
				rel2.offset: -3 0;
			}
			desc {"visible"; inherit; min: SOURCE;
				rel1.offset: 2 -3;
				rel2.offset: -3 -3;
			}
			desc { "disabled_visible"; inherit;
				rel1.offset: -3 2;
				rel2.offset: -3 -3;
			}
		}
		text { "elm.units"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				rel1.to_y: "limits";
				rel2.to_y: "limits";
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "slider_text";
				text.font: "Sans"; text.size: 10;
				text.text_class: "slider";
				text.min: 0 0;
				text.align: 0.5 1.0;
			}
			desc {"visible"; inherit; vis;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible"; color_class: "slider_text_disabled";
				inherit: "visible" 0.0;
			}
		}
		group { "button"; nomouse;
			source: "elm/slider/vertical/indicator/default";
			desc { "default";
				fixed: 1 1;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
			desc {"hidden"; inherit; hid; }
		}
		rect { "elm.dragable.slider"; scale;
			dragable.x: 0 0 0;
			dragable.y: 1 1 0;
			dragable.confine: "elm.swallow.bar";
			desc { "default"; color: "#00000000"; min: 12 16; max: 12 16;
				fixed: 1 1;
				rel1.relative: 0.0 0.5;
				rel1.to_x: "elm.swallow.bar";
				rel2.relative: 1.0 0.5;
				rel2.to_x: "elm.swallow.bar";
			}
		}
		part { "slider";
			desc { "default";
				rel1.to: "elm.dragable.slider";
				rel1.offset: -1 -1;
				rel2.to: "elm.dragable.slider";
				rel2.offset: 0 0;
				image.normal: "slider.png";
				FIXED_SIZE(9, 9)
			}
			desc { "disabled"; inherit;
				image.normal: "slider0.png";
			}
			desc { "over"; inherit;
				image.normal: "slider_clicked.png";
		 }
			desc { "clicked"; inherit;
				image.normal: "slider_clicked.png";
			}
		}
		rect { "slideevent"; repeat; scale; ignore: ON_HOLD;
			dragable.events: "elm.dragable.slider";
			desc { "default"; color: "#00000000";
				fixed: 1 1;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
		}
		swallow { "elm.track.slider"; nomouse;
			desc { "default"; max: 0 0;
				rel1.to: "elm.dragable.slider";
				rel2.to: "elm.dragable.slider";
			}
		}
		rect { "event";
			desc { "default"; color: "#00000000"; hid; }
			desc { "disabled"; inherit; vis; }
		}
	}
	programs {
		 OVER_P("slider","slideevent","default","over")

		program {
			signal: "mouse,down,1"; source: "elm.dragable.slider";
			action:  STATE_SET "clicked" 0.0;
			target: "slider";
		}
		program {
			signal: "mouse,up,1"; source: "elm.dragable.slider";
			action:  STATE_SET "default" 0.0;
			target: "slider";
		}
		program {
			signal: "elm,state,indicator,show"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,show" "elm";
			after: "popup_show2";
		}
		program {
			signal: "elm,state,indicator,hide"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,hide" "elm";
			after: "popup_hide2";
		}
		program {
			signal: "mouse,down,1"; source: "slideevent";
			action:  SIGNAL_EMIT "elm,popup,show" "elm";
			after: "popup_show2";
		}
		program { "popup_show2";
			action:  STATE_SET "hidden" 0.0;
			target: "button";
		}
		program {
			signal: "mouse,up,1"; source: "slideevent";
			action:  SIGNAL_EMIT "elm,popup,hide" "elm";
			after: "popup_hide2";
		}
		program { "popup_hide2";
			action:  STATE_SET "default" 0.0;
			target: "button";
		}
		program {
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "end_show";
			signal: "elm,state,end,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= END; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "end_hide";
			signal: "elm,state,end,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~END; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= UNITS; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,visible"; source: "elm";
			action: SIGNAL_EMIT "limits:limits,visible" "elm";
		}
		program {
			signal: "elm,state,units,hidden"; source: "elm";
			action:  STATE_SET "default" 0.0;
			script {
				new m = get_int(slmode);
				m &= ~UNITS; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,units,hidden"; source: "elm";
			action: SIGNAL_EMIT "limits:limits,hide" "elm";
		}
		program {
			signal: "elm,state,inverted,on"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= INVERT; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,inverted,off"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~INVERT; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			action: SIGNAL_EMIT "elm.dragable.slider:elm,state,disabled" "elm";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action: SIGNAL_EMIT "elm.dragable.slider:elm,state,enabled" "elm";
		}
	}
#undef ICON
#undef LABEL
#undef END
#undef UNITS
#undef MASK
#undef INVERT
#undef DISABLE
}

group { "elm/slider/vertical/indicator/default";
	alias: "elm/slider/vertical/indicator/disabled";
	alias: "elm/slider/vertical/popup/default";
	alias: "elm/slider/vertical/indicator/media_player/position/default";
	alias: "elm/slider/vertical/indicator/media_player/position/flush";
	alias: "elm/slider/vertical/indicator/media_player/volume/default";
	alias: "elm/slider/vertical/indicator/media_player/volume/flush";

	parts {
		spacer { "base"; scale;
			desc { "default"; min: 16 16;
				fixed: 1 1;
			}
			desc { "disabled"; inherit; }
		}
		rect { "clip"; 
			desc { "default"; hid;
				fixed: 1 1;
				rel1.to: "elm.indicator";
				rel1.offset: -100 -100;
				rel2.to: "elm.indicator";
				rel2.offset: 99 99;
			}
			desc {"visible"; inherit; vis; }
		}
		part { "bevel"; nomouse; clip: "clip";
			desc { "default"; color: TOOLTIP_COLOR; hid;
				rel1.offset: -10 -4;
				rel1.to: "elm.indicator";
				rel2.offset: 9 3;
				rel2.to: "elm.indicator";
				image.normal: "popup.png";
				image.border: 8 8 8 8;
				fill.smooth: 0;
			}
			desc {"visible"; inherit; vis; }
		}
		text { "elm.indicator"; effect: SHADOW BOTTOM; nomouse; scale;
			clip: "clip";
			desc { "default"; color: VISIBLE; hid; 
				color_class: "slider_indicator";
				color3: TRANSPARENT;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1.to: "base";
				rel1.relative: 1.1 0.0;
				rel1.offset: 11 0;
				rel2.to: "base";
				rel2.relative: 1.1 1.0;
				rel2.offset: 11 -1;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.align: 0.0 0.5;
				text.text_class: "slider_indicator";
				text.ellipsis: -1;
			}
			desc {"visible"; inherit; vis; }
		}
	}
	programs {
		program {
			signal: "elm,popup,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,popup,hide"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,popup,hide"; source: "elm";
			action:  SIGNAL_EMIT "elm,popup,hide,done" "elm";
		}
		program {
			signal: "elm,state,val,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target: "clip";
		}
		program {
			signal: "elm,state,val,hide"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "clip";
		}
		program {
			signal: "elm,state,indicator,show"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal: "elm,state,indicator,hide"; source: "elm";
			action:  STATE_SET "visible" 0.0;
			target:  "elm.indicator";
			target:  "bevel";
		}
		program {
			signal:  "elm,state,disabled"; source: "elm";
			action:  STATE_SET "disabled" 0.0;
			target:  "base";
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target:  "base";
		}
	}
}
