		// this set of limits and bottoms is evil - but it's a nasty construct
		// allowing EITHER the title and subtitle texts OR the prev/next button
		// swallows to control the lower bounds of the naviframe title, depending
		// on which is taller
#define BOTTOMMAX() \
		spacer { "limit0";																								\
			desc { "default";																								\
				rel1.to_y: "title3";																					\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "elm.swallow.next_btn";														\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
		}																																	\
		spacer { "limit1";																								\
			desc { "default";																								\
				rel1.to_y: "elm.swallow.next_btn";														\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "title3";																					\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
		}																																	\
		spacer { "bottom0";																								\
			desc { "default";																								\
				rel1.to_y: "limit1";																					\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "limit0";																					\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
			desc { state: "other" 0.0;																			\
				inherit;																											\
				rel1.to_y: "limit0";																					\
				rel2.to_y: "limit1";																					\
			}																																\
		}																																	\
		program { "pbot0";																								\
			signal: "limit,height,zero"; source: "bottom0";									\
			script {																												\
				new st[31], Float:vl;																					\
				get_state(PART:"bottom0", st, 30, vl);												\
				if (st[0] == 'd') set_state(PART:"bottom0", "other", 1.0);		\
				else set_state(PART:"bottom0", "default", 1.0);								\
			}																																\
		}																																	\
		spacer { "limit2";																								\
			desc { "default";																								\
				rel1.to_y: "title3";																					\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "elm.swallow.prev_btn";														\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
		}																																	\
		spacer { "limit3";																								\
			desc { "default";																								\
				rel1.to_y: "elm.swallow.prev_btn";														\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "title3";																					\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
		}																																	\
		spacer { "bottom1";																								\
			desc { "default";																								\
				rel1.to_y: "limit3";																					\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "limit2";																					\
				rel2.offset: -1 0;																						\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
			desc { state: "other" 0.0;																			\
				inherit;																											\
				rel1.to_y: "limit2";																					\
				rel2.to_y: "limit3";																					\
			}																																\
		}																																	\
		program { "pbot1";																								\
			signal: "limit,height,zero"; source: "bottom1";									\
			script {																												\
				new st[31], Float:vl;																					\
				get_state(PART:"bottom1", st, 30, vl);												\
				if (st[0] == 'd') set_state(PART:"bottom1", "other", 1.0);		\
				else set_state(PART:"bottom1", "default", 1.0);								\
			}																																\
		}																																	\
		spacer { "bottom";																								\
			desc { "default";																								\
				rel1.to_y: "bottom1";																					\
				rel1.offset: 0 -1;																						\
				rel1.relative: 0.0 1.0;																				\
				rel2.to_y: "bottom0";																					\
				align: 0.5 1.0;																								\
				fixed: 0 1;																										\
				limit: HEIGHT;																								\
			}																																\
			desc { state: "other" 0.0;																			\
				inherit;																											\
				rel1.to_y: "bottom0";																					\
				rel2.to_y: "bottom1";																					\
			}																																\
		}																																	\
		program { "pbot";																									\
			signal: "limit,height,zero"; source: "bottom";									\
			script {																												\
				new st[31], Float:vl;																					\
				get_state(PART:"bottom", st, 30, vl);													\
				if (st[0] == 'd') set_state(PART:"bottom", "other", 1.0);			\
				else set_state(PART:"bottom", "default", 1.0);								\
			}																																\
		}

group { "elm/naviframe/item/basic/default";
	parts {
		BOTTOMMAX()
		text { "title1"; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; hid;
				color3: VISIBLE;
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 2;
				rel2.relative: 1.0 0.0;
				rel2.offset: -1 2;
				align: 0.5 0.0;
				text.font: "Sans"; text.size: 8;
				text.text: "X";
				text.text_class: "title_bar_sub";
				text.align: 0.5 0.0;
				text.min: 0 1;
				fixed: 0 1;
			}
		}
		text { "title2"; effect: SOFT_SHADOW BOTTOM; scale;
			desc { "default"; color: VISIBLE; color_class: "title_bar"; hid;
				color3: VISIBLE;
				rel1.to_y: "title1";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 -1;
				rel2.to_y: "title1";
				rel2.offset: -1 -1;
				align: 0.5 0.0;
				text.font: "Sans:style=Bold"; text.size: 10;
				text.text: "X";
				text.text_class: "title_bar";
				text.align: 0.5 0.0;
				text.min: 0 1;
				fixed: 0 1;
			}
		}
		text { "title3"; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; hid;
				color3: VISIBLE;
				rel1.to_y: "title2";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 -3;
				rel2.to_y: "title2";
				rel2.offset: -1 -3;
				align: 0.5 0.0;
				text.font: "Sans"; text.size: 8;
				text.text: "X";
				text.text_class: "title_bar_sub";
				text.align: 0.5 0.0;
				text.min: 0 1;
				fixed: 0 1;
			}
		}
		rect { "clip";
			desc { "default"; }
		}
		spacer { "base";
			desc { "default"; }
			desc { "prev"; inherit;
				rel1.relative: -1.0 0.0;
				rel2.relative: 0.0 1.0;
			}
			desc { "next"; inherit;
				rel1.relative: 1.0 0.0;
				rel2.relative: 2.0 1.0;
			}
		}
		swallow { "elm.swallow.content"; clip: "clip";
			desc { "default";
				rel1.to: "top";
				rel1.relative: 0.0 1.0;
				rel2.to: "base";
			}
			desc { "title-hidden"; inherit;
				rel1.to: "base";
				rel1.relative: 0.0 0.0;
			}
		}
		spacer { "tophide0";
			desc { "default";
				rel1.to: "base";
				rel2.to_x: "base";
				rel2.to_y: "bottom";
			}
		}
		spacer { "tophide1";
			desc { "default";
				rel1.to: "tophide0";
				rel1.relative: 0.0 -1.0;
				rel2.to: "tophide0";
			}
		}
		rect { "top"; clip: "clip";
			desc { "default"; color: TRANSPARENT;
				rel1.to: "base";
				rel2.to_x: "base";
				rel2.to_y: "bottom";
			}
			desc { "title-hidden"; inherit;
				rel1.to: "tophide1";
				rel2.to: "base";
				rel2.relative: 1.0 0.0;
			}
		}
		rect { "access.title"; repeat; clip: "clip";
			desc { "default";
				fixed: 1 1;
				color: "#00000000";
				rel1.to: "top";
				rel2.to: "top";
			}
		}
		text { "elm.text.title"; effect: SOFT_SHADOW BOTTOM; nomouse; scale;
			clip: "elements_clip";
			desc { "default"; color: VISIBLE; color_class: "label_text";
				color3: VISIBLE;
				rel1.to_x: "base";
				rel1.to_y: "top";
				rel1.relative: 0.0 0.5;
				rel2.offset: 0 -1;
				rel2.to_x: "base";
				rel2.to_y: "top";
				rel2.relative: 1.0 0.5;
				align: 0.5 0.5;
				text.font: "Sans:style=Bold"; text.size: 10;
				text.text_class: "title_bar";
				text.align: 0.5 0.5;
				text.min: 0 1;
				fixed: 0 1;
			}
			desc { "hidden"; inherit; hid; }
		}
		text { "elm.text.subtitle"; effect: SHADOW BOTTOM; nomouse; scale;
			clip: "elements_clip";
			desc { "default"; color: VISIBLE; color_class: "label_text";
				color3: VISIBLE;
				rel1.to_x: "base";
				rel1.to_y: "elm.text.title";
				rel1.relative: 0.0 1.0;
				rel1.offset: 0 -3;
				rel2.to_x: "base";
				rel2.to_y: "elm.text.title";
				rel2.offset: -1 -3;
				align: 0.5 0.0;
				text.font: "Sans"; text.size: 8;
				text.text_class: "title_bar_sub";
				text.align: 0.5 0.0;
				text.min: 0 1;
				fixed: 0 1;
			}
			desc { "hidden"; inherit; hid; }
		}
		rect { "buttons_clip"; clip: "elements_clip";
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
			}
			desc { "title-hidden"; inherit; hid; }
		}
		swallow { "elm.swallow.next_btn";  scale; clip: "buttons_clip";
			desc { "default"; min: 26 26; max: 1 1;
				rel1.to_x: "base";
				rel1.relative: 1.0 0.0;
				rel1.offset: -3 2;
				rel2.to_x: "base";
				rel2.to_y: "title3";
				rel2.offset: -3 -1;
				align: 1.0 0.5;
				fixed: 1 1;
			}
			desc { "hidden"; inherit; hid; }
		}
		swallow { "elm.swallow.prev_btn"; scale; clip: "buttons_clip";
			desc { "default"; min: 26 26; max: 1 1;
				rel1.to_x: "base";
				rel1.offset: 2 2;
				rel2.relative: 0.0 1.0;
				rel2.offset: 2 -1;
				rel2.to_x: "base";
				rel2.to_y: "title3";
				align: 0.0 0.5;
				fixed: 1 1;
			}
			desc { "hidden"; inherit; hid; }
		}
		swallow { "elm.swallow.icon"; clip: "elements_clip";
			desc { "default";
				rel1.to_x: "elm.swallow.prev_btn";
				rel1.to_y: "top";
				rel1.relative: 1.0 0.0;
				rel1.offset: 2 2;
				rel2.to_x: "elm.swallow.prev_btn";
				rel2.to_y: "top";
				rel2.offset: 2 -3;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				align: 0.0 0.5;
			}
			desc { "hidden"; inherit;
				rel1.to_x: "top";
				rel1.relative: 0.0 0.0;
				rel2.to_x: "top";
				rel2.offset: -3 -3;
			  align: 0.5 0.5;
			}
		}
		rect { "elements_clip"; clip: "clip";
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
			}
			desc { "hidden"; inherit; color: TRANSPARENT; hid; }
			desc { "next"; inherit; }
			desc { "prev"; inherit; }
		}
	}

	programs {
		program {
			signal: "elm,state,title,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "top";
			target: "elm.swallow.content";
			target: "buttons_clip";
		}
		program {
			signal: "elm,action,title,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "top";
			target: "elm.swallow.content";
			after: "titleshow2";
		}
		program { "titleshow2";
			action: STATE_SET "default" 0.0;
			target: "buttons_clip";
			after: "title_transition_finished";
		}
		program {
			signal: "elm,state,title,hide"; source: "elm";
			action: STATE_SET "title-hidden" 0.0;
			target: "buttons_clip";
			target: "top";
			target: "elm.swallow.content";
		}
		program {
			signal: "elm,action,title,hide"; source: "elm";
			action: STATE_SET "title-hidden" 0.0;
			target: "buttons_clip";
			after: "titlehide2";
		}
		program { "titlehide2";
			action: STATE_SET "title-hidden" 0.0;
			transition: ACCELERATE 0.5;
			target: "top";
			target: "elm.swallow.content";
			after: "title_transition_finished";
		}
		program { "title_transition_finished";
			action: SIGNAL_EMIT "elm,action,title,transition,finished" "elm";
		}
		program {
			signal: "elm,state,prev_btn,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.prev_btn";
		}
		program {
			signal: "elm,state,prev_btn,hide"; source: "elm";
			action: STATE_SET "hidden" 0.0;
			target: "elm.swallow.prev_btn";
		}
		program {
			signal: "elm,state,next_btn,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.next_btn";
		}
		program {
			signal: "elm,state,next_btn,hide"; source: "elm";
			action: STATE_SET "hidden" 0.0;
			target: "elm.swallow.next_btn";
		}
		program {
			signal: "mouse,clicked,1"; source: "top";
			action: SIGNAL_EMIT "elm,action,title,clicked" "elm";
		}
		program {
			signal: "elm,state,title_label,show"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.icon";
			target: "elm.text.title";
			target: "elm.text.subtitle";
		}
		program {
			signal: "elm,state,title_label,hide"; source: "elm";
			action: STATE_SET "hidden" 0.0;
			target: "elm.swallow.icon";
			target: "elm.text.title";
			target: "elm.text.subtitle";
		}
		program {
			signal: "elm,state,visible"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.content";
			target: "elements_clip";
		}

		/* current page is being pushed: [previous]<----[current] */
		program {
			signal: "elm,state,cur,pushed"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "elements_clip";
			after: "pushed2";
		}
		program { "pushed2";
			action: STATE_SET "prev" 0.0;
			transition: ACCELERATE 0.5;
			target: "base";
			target: "elements_clip";
			after: "pushed3";
		}
		program { "pushed3";
			action: SIGNAL_EMIT "elm,action,pushed,finished" "elm";
		}
		/* current page is being popped: [current]---->[next] */
		program {
			signal: "elm,state,cur,popped"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "elements_clip";
			after: "popped2";
		}
		program { "popped2";
			action: STATE_SET "next" 0.0;
			transition: ACCELERATE 0.5;
			target: "base";
			target: "elements_clip";
			after: "popped3";
		}
		program { "popped3";
			action: SIGNAL_EMIT "elm,action,popped,finished" "elm";
		}
		/* new page is being pushed: [current]<----[next] */
		program {
			signal: "elm,state,new,pushed"; source: "elm";
			action: STATE_SET "next" 0.0;
			target: "base";
			target: "elements_clip";
			after: "pushedb2";
		}
		program { "pushedb2";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "base";
			target: "elements_clip";
			after: "pushedb3";
		}
		program { "pushedb3";
			action: SIGNAL_EMIT "elm,action,show,finished" "elm";
		}
		/* previous page is being pushed: [previous]---->[current] */
		program {
			signal: "elm,state,prev,popped"; source: "elm";
			action: STATE_SET "prev" 0.0;
			target: "base";
			target: "elements_clip";
			after: "poppedb2";
		}
		program { "poppedb2";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "base";
			target: "elements_clip";
			after: "poppedb3";
		}
		program { "poppedb3";
			action: SIGNAL_EMIT "elm,action,show,finished" "elm";
		}
	}
}

group { "elm/naviframe/item/overlap/default";
	inherit: "elm/naviframe/item/basic/default";
	alias: "elm/naviframe/item/overlap/pager";

	parts {
		// this is a hack around an edje_cc inherit bug - group doesnt seem
		// to inherit properly with limits etc.
		BOTTOMMAX()
		part { "elm.swallow.content";
			desc { "default";
				rel1.to: "base";
				rel1.relative: 0.0 0.0;
			}
		}
		part { "top";
			desc { "default"; color: "#FFFFFFE0"; }
			desc { "title-hidden"; color: "#FFFFFFE0"; }
		}
	}

	programs {
		/* current page is being pushed: [previous]<----[current] */
		program {
			signal: "elm,state,cur,pushed"; source: "elm";
			action: SIGNAL_EMIT "elm,action,pushed,finished" "elm";
		}
		/* current page is being popped: [current]---->[next] */
		program {
			signal: "elm,state,cur,popped"; source: "elm";
			action: SIGNAL_EMIT "elm,action,popped,finished" "elm";
		}
		/* new page is being pushed: [current]<----[next] */
		program {
			signal: "elm,state,new,pushed"; source: "elm";
			action: SIGNAL_EMIT "elm,action,show,finished" "elm";
		}
		/* previous page is being pushed: [previous]---->[current] */
		program {
			signal: "elm,state,prev,popped"; source: "elm";
			action: SIGNAL_EMIT "elm,action,show,finished" "elm";
		}
	}
}

#undef BOTTOMMAX
