#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4

group { "elm/button/base/default";
	data.item: "focus_highlight" "on";
	alias: "elm/button/base/naviframe/back_btn/default";
	alias: "elm/button/base/naviframe/back_btn/pager";

	images.image: "button-normal.png" COMP;
	images.image: "button-pressed.png" COMP;
	images.image: "button-prelight.png" COMP;
	images.image: "button-insensitive.png" COMP;
	images.image: "focus.png" COMP;

	script {
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "icononly", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "icononly", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "textonly", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "disabled_textonly", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else {
				if (!d) {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				//set_state(PART:"elm.text", "icononly", 0.0);
				set_state(PART:"icon_clip", "default", 0.0);
				set_state(PART:"event", "default", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				//set_state(PART:"elm.text", "icononly", 0.0);
				set_state(PART:"icon_clip", "disabled", 0.0);
				set_state(PART:"event", "disabled", 0.0);
			}
			}
		}
	}

	parts {
		part { "base";
			desc { "default";
				image.normal: "button-normal.png";
				image.border: 6 6 6 6;
				rel1.offset: 1 2;
				rel2.offset: -1 -2;
				fill.smooth: 0;
			}
			desc { "clicked"; inherit;
				image.normal: "button-pressed.png";
			}
			desc { "prelight"; inherit;
				image.normal: "button-prelight.png";
			}
			desc { "disabled"; inherit;
				image.normal: "button-insensitive.png";
			}
		}
		rect { "icon_clip";
			desc { "default"; }
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		swallow { "elm.swallow.content"; nomouse; clip: "icon_clip";
			desc { "default"; hid;
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.offset: 6 5;
				rel1.to: "base";
				rel2.relative: 0.0 1.0;
				rel2.offset: 6 -8;
				rel2.to: "base";
			}
			desc { "visible"; inherit; vis;
				fixed: 1 0;
				aspect: 1.0 1.0;
			}
			desc { "icononly"; inherit; vis;
				fixed: 0 0;
				align: 0.5 0.5;
				rel2.relative: 1.0 1.0;
				rel2.offset: -7 -8;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				// fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "button_text";
			}
			desc { "visible"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.text: "M";
				text.ellipsis: -1;
			}
			desc { "icononly"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.text: "M";
				text.ellipsis: -1;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "button_text"; hid;
				color3: VISIBLE;
				rel1.offset: 0 5;
				rel1.relative: 1.0 0.0;
				rel1.to_x: "elm.swallow.content";
				rel1.to_y: "base";
				rel2.offset: -7 -7;
				rel2.to: "base";
				text.font: "Sans"; text.size: 10;
				text.align: 0.5 0.5;
				text.min: 0 0;
				text.text_class: "button";
			}
			desc { "visible"; inherit; vis;
				rel1.offset: 2 5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "textonly"; inherit; vis;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible"; inherit; vis;
				rel1.offset: 2 5;
				color: VISIBLE;
				color3: VISIBLE;
				color_class: "button_text_disabled";
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_textonly"; inherit; color: VISIBLE; vis;
				color_class: "button_text_disabled";
				color3: VISIBLE;
				text.min: 1 1;
				text.ellipsis: -1;
			}
		}
		image { "focus"; nomouse;
			desc { "default"; hid;
				image.normal: "focus.png";
				STAY_ON("base")
			}
			desc { "focused"; inherit; vis; }
		}
		part { "event"; type: RECT;
			desc { "default"; color: "#00000000"; }
			desc { "disabled"; inherit; hid; }
		}
	}

	programs {
		 OVER_P("base","event","default","prelight")
		program {
			signal: "mouse,down,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,press" "elm";
			after: "button_click_anim";
		}
		program { "button_click_anim";
			action: STATE_SET "clicked" 0.0;
			target: "base";
		}
		program { "button_unclick";
			signal: "mouse,up,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,unpress" "elm";
			after: "button_unclick_anim";
		}
		program { "button_unclick_anim";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program { "buttonactivate";
			signal: "elm,anim,activate"; source: "elm";
			action: STATE_SET "clicked" 0.0;
			target: "base";
			after: "button_unpressed_anim";
		}
		program { "button_unpressed_anim";
			action: STATE_SET "default" 0.0;
			in: 0.5 0.0;
			target: "base";
		}
		program {
		signal: "elm,action,focus_highlight,hide"; source: "elm";
		action: STATE_SET "default" 0.0;
			target: "focus";
		}
		program {
			signal: "elm,action,focus_highlight,show"; source: "elm";
			action: STATE_SET "focused" 0.0;
			target: "focus";
		}
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
		program { "button_text_visible";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_text_hidden";
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_icon_visible";
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_icon_hidden";
			signal: "elm,state,icon,hidden"; source: "elm";
			action:  STATE_SET "default" 0.0;
			script {
				new m = get_int(btmode);
				m &= ~ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_state_disabled";
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_state_disabled2";
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "base";
		}
		program { "button_state_enabled";
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "button_state_enabled2";
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
	}
}

group { "elm/button/base/anchor";
	inherit: "elm/button/base/default";
	parts {
		part { "base";
			desc { "default"; color: TRANSPARENT; }
			desc { "clicked"; inherit; color: VISIBLE;
				image.normal: "button-pressed.png";
			}
			desc { "prelight"; inherit; color: VISIBLE;
				image.normal: "button-prelight.png";
			}
		}
	}
}

group { "elm/button/base/colorselector/left/default";
	inherit: "elm/button/base/default";
	images.image: "menu_arrow_l_normal.png" COMP;

	parts {
		part { "ic"; nomouse;
			desc { "default";
				FIXED_SIZE(9,12)
				image.normal: "menu_arrow_l_normal.png";
			}
		}
	}
}

group { "elm/button/base/colorselector/right/default";
	inherit: "elm/button/base/default";
	images.image: "menu_arrow_normal.png" COMP;

	parts {
		part { "ic"; nomouse;
			desc { "default";
				FIXED_SIZE(9,12)
				image.normal: "menu_arrow_normal.png";
			}
		}
	}
}

group { "elm/button/base/media_player/prev/default";
	alias: "elm/button/base/media_player/rewind/default";
	alias: "elm/button/base/media_player/play/default";
	alias: "elm/button/base/media_player/pause/default";
	alias: "elm/button/base/media_player/stop/default";
	alias: "elm/button/base/media_player/forward/default";
	alias: "elm/button/base/media_player/next/default";
	alias: "elm/button/base/media_player/info/default";
	alias: "elm/button/base/media_player/eject/default";
	alias: "elm/button/base/media_player/volume/default";
	alias: "elm/button/base/media_player/mute/default";

	alias: "elm/button/base/media_player/prev/flush";
	alias: "elm/button/base/media_player/rewind/flush";
	alias: "elm/button/base/media_player/play/flush";
	alias: "elm/button/base/media_player/pause/flush";
	alias: "elm/button/base/media_player/stop/flush";
	alias: "elm/button/base/media_player/forward/flush";
	alias: "elm/button/base/media_player/next/flush";
	alias: "elm/button/base/media_player/info/flush";
	alias: "elm/button/base/media_player/eject/flush";
	alias: "elm/button/base/media_player/volume/flush";
	alias: "elm/button/base/media_player/mute/flush";
	inherit: "elm/button/base/anchor";
}

group { "elm/button/base/hoversel_vertical/default";
	inherit: "elm/button/base/default";
	alias: "elm/button/base/hoversel_vertical/entry";
	alias: "elm/button/base/hoversel_horizontal/default";
	alias: "elm/button/base/hoversel_horizontal/entry";
	alias: "elm/button/base/hoversel_vertical_entry/default";
	alias: "elm/button/base/hoversel_vertical_entry/entry";
	alias: "elm/button/base/hoversel_horizontal_entry/default";
	alias: "elm/button/base/hoversel_horizontal_entry/entry";

	images.image: "menu_arrow_d_normal.png" COMP;
	images.image: "menu_arrow_d_sel.png" COMP;

	parts {
		part { "elm.text"; type: TEXT;
			desc { "default";
				rel1.offset: 0 5;
				rel1.relative: 1.0 0.0;
				rel1.to_x: "elm.swallow.content";
				rel1.to_y: "base";
				rel2.to_y: "base";
				rel2.to_x: "separator";
				rel2.offset: -8 -7;
				rel2.relative: 0.0 1.0;
				text.text_class: "hoversel";
			}
			desc { "visible"; inherit; vis;
				rel1.offset: 2 5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "textonly"; inherit; vis;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible"; inherit; vis;
				color_class: "button_text_disabled";
				rel1.offset: 2 5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_textonly"; inherit; vis;
				color_class: "button_text_disabled";
				text.min: 1 1;
				text.ellipsis: -1;
			}
		}
		rect { "separator"; nomouse; type: RECT;
			desc { "default"; min: 1 1; max: 1 999; color: "#0000001E";
				rel1.to: "arrow";
				rel1.offset: -6 -8;
				rel2.to: "arrow";
				rel2.relative: 0.0 1.0;
				rel2.offset: -4 6;
			}
			desc { "disabled";  inherit; color: "#0000000A"; }
		}
		part { "arrow"; nomouse;
			desc { "default";
				align: 1.0 0.5;
				rel1.to: "base";
				rel1.relative: 1.0 0.0;
				rel1.offset: -8 0;
				rel2.to: "base";
				rel2.offset: -8 0;
				image.normal: "menu_arrow_d_normal.png";
				image.border: 2 2 1 1;
				FIXED_SIZE(12,9)
			}
			desc { "clicked"; inherit;
				image.normal: "menu_arrow_d_sel.png";
			}
			desc { "disabled"; inherit; color: "#FFFFFF7D"; }
		}
	}

	programs {
		program { "button_state_disabled2";
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "base";
			target: "arrow";
			target: "separator";
		}
		program { "button_state_enabled2";
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "arrow";
			target: "separator";
		}
		program { "button_click_anim";
			target: "arrow";
		}
		program { "button_unclick_anim";
			target: "arrow";
		}
		program { "buttonactivate";
			target: "arrow";
		}
		program { "button_unpressed_anim";
			target: "arrow";
		}
	}
}

group { "elm/button/base/hoversel_vertical_entry/default";
	alias: "elm/button/base/hoversel_vertical_entry/entry";

	images.image: "menuitem.png" COMP;

#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
	script {
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "icononly", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "icononly", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "textonly", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "disabled_textonly", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"icon_clip", "default", 0.0);
				set_state(PART:"event", "default", 0.0);
			}
		}
	}
	parts {
		part { "base"; nomouse;
			desc { "default"; hid;
				rel1.offset: -6 0;
				image.normal: "menuitem.png";
				image.border: 4 4 4 4;
			}
			desc { "active"; inherit; vis; }
		}
		part { "icon_clip"; type: RECT;
			desc { "default"; }
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		swallow { "elm.swallow.content"; nomouse; clip: "icon_clip";
			desc { "default"; hid;
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.offset: 6 6;
				rel1.to: "base";
				rel2.relative: 0.0 1.0;
				rel2.offset: 6 -3;
				rel2.to: "base";
			}
			desc { "visible"; inherit; vis;
				fixed: 1 0;
				aspect: 1.0 1.0;
			}
			desc { "icononly"; inherit; vis;
				fixed: 0 0;
				align: 0.5 0.5;
				rel2.relative: 1.0 1.0;
				rel2.offset: -7 -8;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 8;
				text.min: 0 0;
				text.text_class: "button_text";
			}
			desc { "visible"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
			desc { "icononly"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		rect { "click_clip";
			desc { "default"; }
			desc { "active"; inherit; hid; }
		}
		text { "elm.text"; nomouse; scale; clip: "click_clip";
			desc { "default"; color_class: "menu_item"; hid;
				color2: VISIBLE;
				rel1.offset: 0 0;
				rel1.relative: 1.0 0.0;
				rel1.to_x: "elm.swallow.content";
				rel1.to_y: "base";
				rel2.offset: -7 -2;
				rel2.to: "base";
				text.font: "Sans"; text.size: 10;
				text.align: 0.0 0.5;
				text.min: 0 0;
				text.text_class: "button";
			}
			desc { "visible"; inherit; vis;
				rel1.offset: 2 5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "textonly"; inherit; vis;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible"; inherit; vis;
				color_class: "menu_item_disabled";
				rel1.offset: 2 5;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_textonly"; inherit; vis;
				color_class: "menu_item_disabled";
				text.min: 1 1;
				text.ellipsis: -1;
			}
		}
		text { "label3"; nomouse; scale; 
			desc { "default"; color: VISIBLE; hid;
				color2: VISIBLE;
				color3: VISIBLE;
				color_class: "menu_item_active";
				fixed: 1 1;
				STAY_ON("elm.text")
				text.font: "Sans"; text.size: 10;
				text.text_source: "elm.text";
				text.align: 0.0 0.5;
				text.text_class: "hoversel_item";
			}
			desc { "active"; inherit; vis; }
		}
		rect { "event";
			desc { "default"; color: "#00000000"; }
			desc { "disabled"; inherit; hid; }
		}
	}

	programs {
		OVER_P("base","event","default","active")
		OVER_P("label3","event","default","active")
		OVER_P("click_clip","event","default","active")
		program {
			signal: "mouse,down,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,press" "elm";
		}
		program { "button_unclick";
			signal: "mouse,up,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,unpress" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
		program {  "button_text_visible";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {  "button_text_hidden";
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {  "button_icon_visible";
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {  "button_icon_hidden";
			signal: "elm,state,icon,hidden"; source: "elm";
			action:  STATE_SET "default" 0.0;
			script {
				new m = get_int(btmode);
				m &= ~ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {  "button_state_disabled";
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {  "button_state_enabled";
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
	}
}

group { "elm/button/base/hoversel_horizontal_entry/default";
	inherit: "elm/button/base/hoversel_vertical_entry/default";
	alias: "elm/button/base/hoversel_horizontal_entry/entry";

	parts {
		part { "base";
			desc { "default";
				rel1.offset: 0 0;
			}
			desc { "active"; inherit; vis; }
		}
	}
}

#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE

