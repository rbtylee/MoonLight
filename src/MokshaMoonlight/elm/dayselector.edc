#define DAYSELECOR_DAY_POS_LEFT 1
#define DAYSELECOR_DAY_POS_RIGHT 2
#define DAYSELECOR_DAY_POS_MIDDLE 3
#define DAYSELECOR_DAY_TYPE_WEEKDAY 1
#define DAYSELECOR_DAY_TYPE_WEEKEND_DEFAULT 2
#define DAYSELECOR_DAY_TYPE_WEEKEND_STYLE1 3
#define DAYSELECOR_DAY_STATE_DEFAULT 1
#define DAYSELECOR_DAY_STATE_PRESSED 2
#define DAYSELECOR_DAY_STATE_SELECTED 3

#define DAYSELECTOR_DAY(_pos, _after) \
	swallow { "day"#_pos; clip: "clipper"; scale;			\
		desc { "default"; min: 0 0; hid;								\
			align: 0.0 0.5;																\
			fixed: 1 0;																		\
			rel1.relative: 1.0 0.0;												\
			rel1.to: "day"#_after;												\
			rel1.offset: 0 0;															\
			rel2.relative: 1.0 1.0;												\
			rel2.to: "day"#_after;												\
		}																								\
		desc { "visible"; inherit; min: 48 32; vis; }		\
	}																									\
	programs{																					\
		program { "day"#_pos"visible";									\
			signal: "day"#_pos",visible";									\
			source: "elm";																\
			action: STATE_SET "visible" 0.0;							\
			target: "day"#_pos;														\
		}																								\
		program { "day"#_pos"notvisible";								\
			signal: "day"#_pos",default";									\
			source: "elm";																\
			action: STATE_SET "default" 0.0;							\
			target: "day"#_pos;														\
		}																								\
	}

group { "elm/dayselector/base/default";
	parts {
		swallow { "day0"; scale; clip: "clipper";
			desc { "default"; hid;
				align: 0.0 0.5;
				fixed: 1 0;
				rel2.relative: 0.0 1.0;
			}
			desc { "visible"; inherit; min: 48 32; vis; }
		}
		DAYSELECTOR_DAY(1, 0)
		DAYSELECTOR_DAY(2, 1)
		DAYSELECTOR_DAY(3, 2)
		DAYSELECTOR_DAY(4, 3)
		DAYSELECTOR_DAY(5, 4)
		DAYSELECTOR_DAY(6, 5)
		rect { "clipper"; nomouse;
			desc { "default";
				rel1.to: "day0";
				rel2.to: "day6";
			}
			desc { "visible"; inherit; color: "#FFFFFFB9"; }
		}
		rect { "disabler";
			desc { "default"; color: "#00000000"; hid; }
			desc { "visible"; inherit; vis; }
		}
	}

	programs {
		program { "disble_dayselector";
			signal: "elm,state,disabled";
			source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "disabler";
			target: "clipper";
		}
		program { "enable_dayselector";
			signal: "elm,state,enabled";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "disabler";
			target: "clipper";
		}
		program { "day0_visible";
			signal: "day0,visible";
			source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "day0";
		}
		program { "day0_default";
			signal: "day0,default";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "day0";
		}
	}
}

group { "elm/check/base/dayselector/default";
		images.image: "DT_left.png" COMP;
		images.image: "DT_left3.png" COMP;
		images.image: "DT_middle.png" COMP;
		images.image: "DT_middle3.png" COMP;
		images.image: "DT_right.png" COMP;
		images.image: "DT_right3.png" COMP; 

	script {
		public check_pos; // Left, Right, Middle.
		public check_type; // Weekday, Weekend.
		public check_state = DAYSELECOR_DAY_STATE_DEFAULT; // Default, Pressed, Selected.

		public check_bg_show() {
			if(get_int(check_pos) == DAYSELECOR_DAY_POS_LEFT) {
				if(get_int(check_state) == DAYSELECOR_DAY_STATE_DEFAULT) {
					set_state(PART:"bg", "default_left", 0.0);
				}
				else if(get_int(check_state) == DAYSELECOR_DAY_STATE_PRESSED) {
					set_state(PART:"bg", "pressed_left", 0.0);
				}
				else if(get_int(check_state) == DAYSELECOR_DAY_STATE_SELECTED) {
					set_state(PART:"bg", "selected_left", 0.0);
				}
			}
			else if(get_int(check_pos) == DAYSELECOR_DAY_POS_RIGHT) {
			  if(get_int(check_state) == DAYSELECOR_DAY_STATE_DEFAULT) {
				 set_state(PART:"bg", "default_right", 0.0);
				}
				else if(get_int(check_state) == DAYSELECOR_DAY_STATE_PRESSED) {
					set_state(PART:"bg", "pressed_right", 0.0);
				}
				else if(get_int(check_state) == DAYSELECOR_DAY_STATE_SELECTED) {
					set_state(PART:"bg", "selected_right", 0.0);
				}
			}
			else if(get_int(check_pos) == DAYSELECOR_DAY_POS_MIDDLE) {
				if (get_int(check_state) == DAYSELECOR_DAY_STATE_DEFAULT) {
					set_state(PART:"bg", "default_middle", 0.0);
				} else if(get_int(check_state) == DAYSELECOR_DAY_STATE_PRESSED) {
				 set_state(PART:"bg", "pressed_middle", 0.0);
				} else if(get_int(check_state) == DAYSELECOR_DAY_STATE_SELECTED) {
					set_state(PART:"bg", "selected_middle", 0.0);
				}
			}
		}
		public check_text_show() {
			if(get_int(check_state) == DAYSELECOR_DAY_STATE_SELECTED) {
				set_state(PART:"elm.text", "selected", 0.0);
				set_state(PART:"text2", "selected", 0.0);
			} else {
				if(get_int(check_type) == DAYSELECOR_DAY_TYPE_WEEKDAY) {
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"text2", "default", 0.0);
				} else if (get_int(check_type) == DAYSELECOR_DAY_TYPE_WEEKEND_DEFAULT) {
					set_state(PART:"elm.text", "weekend_default", 0.0);
					set_state(PART:"text2", "weekend_default", 0.0);
				}
				else if (get_int(check_type) == DAYSELECOR_DAY_TYPE_WEEKEND_STYLE1) {
					set_state(PART:"elm.text", "weekend_style1", 0.0);
					set_state(PART:"text2", "weekend_style1", 0.0);
				}
			}
		}
		public check_text_pressed() {
			set_state(PART:"elm.text", "pressed", 0.0);
			set_state(PART:"text2", "default", 0.0);
		}
	}

	parts {
		part { "bg";
			desc { "default";
				rel1.offset: 0 2;
				rel2.offset: -1 -1;
				image.normal: "DT_middle.png";
				image.border: 5 5 5 5;
			}
			desc { "default_left"; inherit;
				image.normal: "DT_left.png";
			}
			desc { "default_right"; inherit;
				image.normal: "DT_right.png";
			}
			desc { "default_middle"; inherit;
				image.normal: "DT_middle.png";
			}
			desc { "pressed_left"; inherit;
				image.normal: "DT_left3.png";
			}
			desc { "pressed_right"; inherit;
				image.normal: "DT_right3.png";
			}
			desc { "pressed_middle"; inherit;
				image.normal: "DT_middle3.png";
			}
			desc { "selected_left"; inherit;
				image.normal: "DT_left3.png";
			}
			desc { "selected_right"; inherit;
				image.normal: "DT_right3.png";
			}
			desc { "selected_middle"; inherit;
				image.normal: "DT_middle3.png";
			}
		}
		spacer { "left_padding"; scale;
			desc { "default"; min: 5 0;
				fixed: 1 0;
				align: 0.0 0.5;
				rel2.relative: 0.0 1.0;
			}
		}
		spacer { "right_padding"; scale;
			desc { "default"; min: 5 0;
				fixed: 1 0;
				align: 1.0 0.5;
				rel1.relative: 1.0 0.0;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default";color: VISIBLE; color_class: "button_text";
				color3: VISIBLE;
				rel1.to: "left_padding";
				rel1.relative: 1.0 0.0;
				rel2.to: "right_padding";
				rel2.relative: 0.0 1.0;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.ellipsis: -1;
				text.text_class: "button";
			}
			desc { "weekend_default"; inherit; vis;
				text.font: "Sans";
			}
			desc { "weekend_style1"; inherit; hid; }
			desc { "selected"; inherit; hid; }
			desc { "pressed"; inherit; vis; }
		}
		text { "text2"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "button_text"; hid;
				color2: VISIBLE;
				color3: VISIBLE;
				STAY_ON("elm.text")
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.ellipsis: -1;
				text.text_source: "elm.text";
				text.text_class: "button";
			}
			desc { state: "weekend_default" 0.0; inherit; hid;
				text.font: "Sans";
			}
			desc { state: "weekend_style1" 0.0; inherit; vis;
				text.font: "Sansd";
			}
			desc { state: "selected" 0.0; inherit; vis; }
		}
		rect { "events"; ignore: ON_HOLD;
			desc { "default"; color: "#00000000";
				rel1.to: "bg";
				rel2.to: "bg";
			}
		}
	}

	programs {
		program { "check,pressed";
			signal: "mouse,down,1"; source: "events";
			script {
				set_int(check_state, DAYSELECOR_DAY_STATE_PRESSED);
				check_bg_show();
				check_text_pressed();
			}
		}
		program { "check,toggle";
			signal: "mouse,up,1"; source: "events";
			action: SIGNAL_EMIT "elm,action,check,toggle" "elm";
		}
		program { "check,on";
			signal: "elm,state,check,on"; source: "elm";
			script {
				set_int(check_state, DAYSELECOR_DAY_STATE_SELECTED);
				check_bg_show();
				check_text_show();
			}
		}
		program { "check,off";
			signal: "elm,state,check,off"; source: "elm";
			script {
				set_int(check_state, DAYSELECOR_DAY_STATE_DEFAULT);
				check_bg_show();
				check_text_show();
			}
		}
		program { "check,left";
			signal: "elm,pos,check,left"; source: "elm";
			script {
				set_int(check_pos, DAYSELECOR_DAY_POS_LEFT);
				check_bg_show();
			}
		}
		program { "check,right";
			signal: "elm,pos,check,right"; source: "elm";
			script {
				set_int(check_pos, DAYSELECOR_DAY_POS_RIGHT);
				check_bg_show();
			}
		}
		program { "check,middle";
			signal: "elm,pos,check,middle"; source: "elm";
			script {
				set_int(check_pos, DAYSELECOR_DAY_POS_MIDDLE);
				check_bg_show();
			}
		}
		program { "check,weekday";
			signal: "elm,type,weekday,default"; source: "elm";
			script {
				set_int(check_type, DAYSELECOR_DAY_TYPE_WEEKDAY);
				check_text_show();
			}
		}
		program { "check,weekend,default";
			signal: "elm,type,weekend,default"; source: "elm";
			script {
				set_int(check_type, DAYSELECOR_DAY_TYPE_WEEKEND_DEFAULT);
				check_text_show();
			}
		}
		program { "check,weekend,style1";
			signal: "elm,type,weekend,style1"; source: "elm";
			script {
				set_int(check_type, DAYSELECOR_DAY_TYPE_WEEKEND_STYLE1);
				check_text_show();
			}
		}
	}
}

#undef DAYSELECOR_DAY_POS_LEFT
#undef DAYSELECOR_DAY_POS_RIGHT
#undef DAYSELECOR_DAY_POS_MIDDLE
#undef DAYSELECOR_DAY_TYPE_WEEKDAY
#undef DAYSELECOR_DAY_TYPE_WEEKEND_DEFAULT
#undef DAYSELECOR_DAY_TYPE_WEEKEND_STYLE1
#undef DAYSELECOR_DAY_STATE_DEFAULT
#undef DAYSELECOR_DAY_STATE_PRESSED
#undef DAYSELECOR_DAY_STATE_SELECTED
#undef DAYSELECTOR_DAY
