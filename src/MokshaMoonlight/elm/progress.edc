group { "elm/progressbar/horizontal/default";
	images.image: "slider_runnerh.png" COMP;
	images.image: "barH.png" COMP;

#define ICON    1
#define LABEL   2
#define DISABLE 4
	script {
		public slmode;
		public eval_mode(m) {
			new ic = m & ICON;
			new l = m & LABEL;
			new d = m & DISABLE;
			if (l) {
				if (!d) {
					set_state(PART:"elm.text", "visible", 0.0);
				} else {
					set_state(PART:"elm.text", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.text", "default", 0.0);
			}
			if (ic) {
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"sizer.content", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
			}
			if (!d) {
				set_state(PART:"dis_clip", "default", 0.0);
			} else {
				set_state(PART:"dis_clip", "disabled", 0.0);
			}
		}
	}
	parts {
		rect { "dis_clip";
			desc { "default";
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
			}
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		rect { "pulse_clip";
			desc { "default"; hid;
				rel1.relative: -2.0 -2.0;
				rel2.relative: 3.0 3.0;
			}
			desc { "pulse"; inherit; vis; }
		}
		rect { "fract_clip";
			desc { "default";
				rel1.relative: -2.0 -2.0;
				rel2.relative: 3.0 3.0;
			}
			desc { "pulse"; inherit; hid; }
		}
		swallow { "elm.swallow.content"; clip: "dis_clip";
			desc { "default"; hid;
				align: 0.0 0.5;
				rel1.offset: 0 2;
				rel2.offset: -1 -3;
				rel2.relative: 0.0 1.0;
			}
			desc { "visible"; inherit; vis;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				rel1.offset: 2 2;
				rel2.offset: 2 -3;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "progressbar_text";
			}
			desc { "visible"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; hid;
				color3: VISIBLE;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel1.offset: -1 2;
				rel2.to_x: "elm.swallow.content";
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 -3;
				text.font: "Sans"; text.size: 10;
				text.text_class: "progressbar";
				text.min: 0 0;
				text.align: 0.0 0.5;
			}
			desc { "visible"; inherit; vis;
				fixed: 1 0;
				rel1.offset: 2 2;
				rel2.offset: 2 -3;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible";
				inherit: "visible" 0.0;
				color_class: "label_text_disabled";
			}
		}
		part { "base"; scale;
			desc { "default"; min: 16 18; max: -1 18;
				rel1.to_x: "elm.text";
				rel1.relative: 1.0 0.0;
				rel1.offset: 3 3;
				rel2.offset: -4 -4;
				image.normal: "slider_runnerh.png";
				image.border: 4 4 4 4;
			}
		}
		spacer { "ins0"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to: "base";
				rel2.to: "base";
				rel2.relative: 0.0 1.0;
				align: 0.0 0.5;
			}
		}
		spacer { "ins1"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to: "base";
				rel1.relative: 1.0 0.0;
				rel2.to: "base";
				align: 1.0 0.5;
			}
		}
		swallow { "elm.swallow.bar"; nomouse;
			desc { "default";
				STAY_ON("base")
			}
		}
		spacer { "elm.cur.progressbar"; nomouse; scale;
			dragable.confine: "base";
			dragable.x: 1 1 1;
			dragable.y: 0 0 0;
			desc { "default";
				fixed: 1 1;
				min: 1 18;
				max: 1 18;
				rel1.to: "base";
				rel2.to: "base";
			}
		}
		spacer { "barend"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to_x: "elm.cur.progressbar";
				rel1.relative: 1.0 0.0;
				rel2.to_x: "elm.cur.progressbar";
				rel2.relative: 1.0 1.0;
				align: 0.0 0.5;
			}
			desc { "inv"; inherit;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 1.0;
				align: 1.0 0.5;
			}
		}
		part { "bar"; clip: "fract_clip"; scale;
			desc { "default";
				rel1.to_x: "ins0";
				rel1.to_y: "base";
				rel1.offset: 1 2;
				rel1.relative: 0.0 0.0;
				rel2.to_x: "barend";
				rel2.to_y: "base";
				rel2.offset: -3 -3;
				fixed: 1 1;
				rel2.relative: 1.0 1.0;
				image.normal: "barH.png";
				image.border: 5 5 5 5;
			}
			desc { "inv"; inherit;
				rel1.to_x: "barend";
				rel1.offset: 2 2;
				rel1.relative: 0.0 0.0;
				rel2.to_x: "ins1";
				rel2.offset: -2 -3;
				rel2.relative: 1.0 1.0;
			}
		}
		spacer { "insidep0"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to_x: "base";
				rel1.relative: 0.0 0.0;
				rel1.offset: 1 0;
				rel2.to_x: "base";
				rel2.relative: 0.0 1.0;
				align: 1.0 0.5;
			}
		}
		spacer { "insidep1"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to_x: "base";
				rel1.relative: 1.0 0.0;
				rel2.to_x: "base";
				rel2.relative: 1.0 1.0;
				align: 0.0 0.5;
			}
		}
		part { "pulse"; clip: "pulse_clip"; scale;
			desc { "default"; min: 50 0; max: 50 16;
				fixed: 1 1;
				rel1.to_x: "insidep0";
				rel1.to_y: "bar";
				rel1.relative: 0.0 0.0;
				rel1.offset: 1 0;
				rel2.to_x: "insidep1";
				rel2.to_y: "bar";
				rel2.offset: -3 -1;
				rel2.relative: 1.0 1.0;
				image.normal: "barH.png";
				image.border: 5 5 5 5;
				align: 0.0 0.5;
			}
			desc { "end"; inherit; align: 1.0 0.5; }
		}
		text { "elm.text.status"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; vis;
				color3: VISIBLE;
				fixed: 1 1;
				rel1.to: "base";
				rel2.to: "base";
				align: 0.5 0.5;
				text.font: "Sans"; text.size: 10;
				text.min: 0 1;
				text.text_class: "progress_status";
				text.align: 0.5 0.5;
			}
			desc { "hidden"; inherit; hid; }
		}
	}

	programs {
		program { "inverted-on";
			signal: "elm,state,inverted,on"; source: "elm";
			action:  STATE_SET "inv" 0.0;
			target: "bar";
			target: "barend";
		}
		program { "inverted-off";
			signal: "elm,state,inverted,off"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "bar";
			target: "barend";
		}
		program { "pulse-mode0";
			signal: "elm,state,pulse"; source: "elm";
			action:  STATE_SET "hidden" 0.0;
			target: "elm.text.status";
			after: "pulse-mode1";
		}
		program { "pulse-mode1";
			signal: "elm,state,pulse,start"; source: "elm";
			action:  STATE_SET "pulse" 0.0;
			target: "fract_clip";
		}
		program { "pulse-start";
			signal: "elm,state,pulse,start"; source: "elm";
			action:  STATE_SET "pulse" 0.0;
			target: "pulse_clip";
			target: "fract_clip";
			after: "pulse0";
		 }
		program { "pulse0";
			action:  STATE_SET "end" 0.0;
			transition: SINUSOIDAL 0.8;
			target: "pulse";
			after: "pulse1";
		}
		program { "pulse1";
			action:  STATE_SET "default" 0.0;
			transition: SINUSOIDAL 0.8;
			target: "pulse";
			after: "pulse0";
		}
		program { "fraction";
			signal: "elm,state,fraction"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "elm.text.status";
			after: "pulse-stop";
		}
		program { "elmpulse-stop";
			signal: "elm,state,pulse,stop"; source: "elm";
			action: ACTION_STOP;
			target: "pulse0";
			target: "pulse1";
			after: "pulse-stop";
		}
		program { "pulse-stop";
			action:  STATE_SET "default" 0.0;
			target: "pulse_clip";
		}
		program { "units-visible";
			signal: "elm,state,units,visible"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "elm.text.status";
		}
		program { "units-hidden";
			signal: "elm,state,units,hidden"; source: "elm";
			action:  STATE_SET "hidden" 0.0;
			target: "elm.text.status";
		}
		program { "text-visible";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "text-hidden";
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "icon-visible";
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "icon-hidden";
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "state-disabled";
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "state-enabled";
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(slmode);
				m &= ~DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
	}
#undef ICON
#undef LABEL
#undef UNITS
#undef DISABLE
}

group { "elm/progressbar/vertical/default";
	images.image: "slider_runnerv.png" COMP;
	images.image: "barV.png" COMP;

#define ICON    1
#define LABEL   2
#define DISABLE 4
	script {
		public slmode;
		public eval_mode(m) {
			new ic = m & ICON;
			new l = m & LABEL;
			new d = m & DISABLE;
			if (l) {
				if (!d) {
					set_state(PART:"elm.text", "visible", 0.0);
				} else {
					set_state(PART:"elm.text", "disabled_visible", 0.0);
				}
			} else {
				set_state(PART:"elm.text", "default", 0.0);
			}
			if (ic) {
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"sizer.content", "visible", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
			}
			if (!d) {
				set_state(PART:"dis_clip", "default", 0.0);
			} else {
				set_state(PART:"dis_clip", "disabled", 0.0);
			}
		}
	}
	parts {
		rect { "dis_clip";
			desc { "default";
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
			}
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		rect { "pulse_clip";
			desc { "default"; hid;
				rel1.relative: -2.0 -2.0;
				rel2.relative: 3.0 3.0;
			}
			desc { "pulse"; inherit; vis; }
		}
		rect { "fract_clip";
			desc { "default";
				rel1.relative: -2.0 -2.0;
				rel2.relative: 3.0 3.0;
			}
			desc { "pulse"; inherit; hid; }
		}
		swallow { "elm.swallow.content"; clip: "dis_clip";
			desc { "default"; hid;
				align: 0.5 0.0;
				rel1.offset: 2 0;
				rel2.offset: -3 -1;
				rel2.relative: 1.0 0.0;
			}
			desc { "visible"; inherit; vis;
				aspect: 1.0 1.0; aspect_preference: HORIZONTAL;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; hid;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "progressbar_text";
			}
			desc { "visible"; inherit; text.min: 1 1;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.text: "M";
				text.ellipsis: -1;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; hid;
				color3: VISIBLE;
				fixed: 1 1;
				align: 0.5 0.0;
				rel1.to_y: "elm.swallow.content";
				rel1.relative: 0.0 1.0;
				rel1.offset: 2 -1;
				rel2.to_y: "elm.swallow.content";
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -1;
				text.font: "Sans"; text.size: 10;
				text.text_class: "progressbar";
				text.min: 0 0;
				text.align: 0.5 0.0;
			}
			desc { "visible"; inherit; vis;
				fixed: 0 1;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible";
				inherit: "visible" 0.0;
				color_class: "progressbar_text_disabled";
				color: "#151515";
				color3: "#FFFFFF0F";
			}
		}
		part { "base"; scale;
			desc { "default"; min: 18 16; max: 18 -1;
				rel1.to_y: "elm.text";
				rel1.relative: 0.0 1.0;
				rel1.offset: 3 3;
				rel2.offset: -4 -4;
				image.normal: "slider_runnerv.png";
				image.border: 4 4 4 4;
				fill.smooth: 0;
			}
		}
		spacer { "ins0"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to: "base";
				rel2.to: "base";
				rel2.relative: 1.0 0.0;
				align: 0.5 0.0;
			}
		}
		spacer { "ins1"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to: "base";
				rel1.relative: 0.0 1.0;
				rel2.to: "base";
				align: 0.5 1.0;
			}
		}
		swallow { "elm.swallow.bar"; nomouse;
			desc { "default";
				STAY_ON("base")
			}
		}
		spacer { "elm.cur.progressbar"; nomouse; scale;
			dragable.confine: "base";
			dragable.x: 0 0 0;
			dragable.y: 1 1 1;
			desc { "default"; min: 18 1; max: 18 1;
				fixed: 1 1;
				STAY_ON("base")
			}
		}
		spacer { "barend"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to_y: "elm.cur.progressbar";
				rel1.relative: 0.0 1.0;
				rel2.to_y: "elm.cur.progressbar";
				rel2.relative: 1.0 1.0;
				align: 0.5 0.0;
			}
			desc { "inv"; inherit;
				rel1.relative: 0.0 0.0;
				rel2.relative: 1.0 0.0;
				align: 0.5 1.0;
			}
		}
		part { "bar"; clip: "fract_clip"; scale;
			desc { "default";
				rel1.to_y: "ins0";
				rel1.to_x: "base";
				rel1.offset: 2 1;
				rel1.relative: 0.0 0.0;
				rel2.to_y: "barend";
				rel2.to_x: "base";
				rel2.offset: -3 -3;
				fixed: 1 1;
				rel2.relative: 1.0 1.0;
				image.normal: "barV.png";
				image.border: 5 5 5 5;
			}
			desc { "inv"; inherit;
				rel1.to_y: "barend";
				rel1.relative: 0.0 0.0;
				rel1.offset: 2 2;
				rel2.to_y: "ins1";
				rel2.offset: -3 -2;
				rel2.relative: 1.0 1.0;
			}
		}
		spacer { "insidep0"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to_y: "base";
				rel1.relative: 0.0 0.0;
				rel2.to_y: "base";
				rel2.relative: 1.0 0.0;
				align: 0.5 1.0;
			}
		}
		spacer { "insidep1"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to_y: "base";
				rel1.relative: 0.0 1.0;
				rel2.to_y: "base";
				rel2.relative: 1.0 1.0;
				align: 0.5 0.0;
			}
		}
		part { "pulse"; clip: "pulse_clip"; scale;
			desc { "default"; min: 0 50; max: 16 50;
				fixed: 1 1;
				rel1.to_y: "insidep0";
				rel1.to_x: "bar";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 2;
				rel2.to_y: "insidep1";
				rel2.to_x: "bar";
				rel2.offset: -1 -2;
				rel2.relative: 1.0 1.0;
				image.normal: "barV.png";
				image.border: 5 5 5 5;
				align: 0.5 0.0;
			}
			desc { "end"; inherit;
				align: 0.5 1.0;
			}
		}
		spacer { "statbox"; scale;
			desc { "default";
				fixed: 1 1;
				rel1.to: "base";
				rel2.to: "base";
				aspect: 1.0 1.0; aspect_preference: NONE;
			}
		}
		text { "elm.text.status"; effect: GLOW; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "label_text"; vis;
				color3: VISIBLE;
				fixed: 1 1;
				rel1.to: "statbox";
				rel2.to: "statbox";
				align: 1.0 0.5;
				text.font: "Sans"; text.size: 10;
				text.min: 0 1;
				text.text_class: "progress_status";
				text.align: 1.0 0.5;
				map.on: 1;
				map.smooth: 0;
				map.rotation.center: "statbox";
				map.rotation.z: 90;
			}
			desc { "hidden"; inherit; hid; }
		}
	}

	programs {
		program { "inverted-on";
			signal: "elm,state,inverted,on"; source: "elm";
			action:  STATE_SET "inv" 0.0;
			target: "bar";
			target: "barend";
		}
		program { "inverted-off";
			signal: "elm,state,inverted,off"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "bar";
			target: "barend";
		}
		program { "pulse-mode0";
			signal: "elm,state,pulse"; source: "elm";
			action:  STATE_SET "hidden" 0.0;
			target: "elm.text.status";
			after: "pulse-mode1";
		}
		program { "pulse-mode1";
			signal: "elm,state,pulse,start"; source: "elm";
			action:  STATE_SET "pulse" 0.0;
			target: "fract_clip";
		}
		program { "pulse-start";
			signal: "elm,state,pulse,start"; source: "elm";
			action:  STATE_SET "pulse" 0.0;
			target: "pulse_clip";
			target: "fract_clip";
			after: "pulse0";
		}
		program { "pulse0";
			action:  STATE_SET "end" 0.0;
			transition: SINUSOIDAL 0.8;
			target: "pulse";
			after: "pulse1";
		}
		program { "pulse1";
			action:  STATE_SET "default" 0.0;
			transition: SINUSOIDAL 0.8;
			target: "pulse";
			after: "pulse0";
		}
		program { "fraction";
			signal: "elm,state,fraction"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "elm.text.status";
			after: "pulse-stop";
		}
		program { "elmpulsestop";
			signal: "elm,state,pulse,stop"; source: "elm";
			action: ACTION_STOP;
			target: "pulse0";
			target: "pulse1";
			after: "pulse-stop";
		}
		program { "pulse-stop";
			action:  STATE_SET "default" 0.0;
			target: "pulse_clip";
		}
		program { "unit-visible";
			signal: "elm,state,units,visible"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "elm.text.status";
		}
		program { "unit-hidden";
			signal: "elm,state,units,hidden"; source: "elm";
			action:  STATE_SET "hidden" 0.0;
			target: "elm.text.status";
		}
		program { "text-visible";
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "text-hidden";
			signal: "elm,state,text,hidden"; source: "elm";
			script {         
				new m = get_int(slmode);
				m &= ~LABEL; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "icon-visible";
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(slmode);
				m |= ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "icon-hidden";
			signal: "elm,state,icon,hidden"; source: "elm";
			script {         
				new m = get_int(slmode);
				m &= ~ICON; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "elmdisabled";
			signal: "elm,state,disabled"; source: "elm";
			script {         
				new m = get_int(slmode);
				m |= DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
		program { "elmenabled";
			signal: "elm,state,enabled"; source: "elm";
			script {         
				new m = get_int(slmode);
				m &= ~DISABLE; set_int(slmode, m);
				eval_mode(m);
			}
		}
	}
#undef ICON
#undef LABEL
#undef UNITS
#undef DISABLE
}

group { "elm/progressbar/horizontal/wheel";
	alias: "elm/progressbar/vertical/wheel";
	images.image: "logo.png" COMP;
	parts {
		swallow { "elm.swallow.bar"; nomouse;
			desc { "default"; min: 0 0; max: 0 0; hid; }
		}
		swallow { "elm.swallow.content";
			desc { "default"; min: 0 0; max: 0 0; hid; }
		}
		rect { "busy_clip";
			desc { "default"; color: TRANSPARENT; hid; }
			desc { "active"; color: VISIBLE; vis; }
		}
		part { "logo"; nomouse; clip: "busy_clip"; scale;
			desc { "default";
				image.normal: "logo.png";
				FIXED_SIZE(51,51)
				align: 0.0 0.0;
				rel1.offset: 3 3;
				rel2.offset: 3 3;
				map.on: 1;
				map.smooth: 1;
				map.rotation.center: "logo";
			}
			desc { "spin"; inherit;
				map.rotation.z: 360;
			}
		}
	}

	programs {
		program { "spin";
			signal: "elm,state,pulse,start"; source: "elm";
			action: STATE_SET "spin" 0.0;
			transition: LINEAR 1.0;
			target: "logo";
			after: "spin2";
		}
		program { "spin2";
			action: STATE_SET "default" 0.0;
			target: "logo";
			after: "spin";
		}
		program {
			signal: "elm,state,pulse,start"; source: "elm";
			action: STATE_SET "active" 0.0;
			transition: SINUSOIDAL 0.25;
			target: "busy_clip";
		}
		program {
			signal: "elm,state,pulse,stop"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 1.0;
			target: "busy_clip";
			after: "spin3";
		}
		program { "spin3";
			action: ACTION_STOP;
			target: "spin";
			target: "spin2";
			after: "spin4";
		}
		program { "spin4";
			action: STATE_SET "default" 0.0;
			target: "logo";
		}
	}
}

group { "elm/progressbar/horizontal/double";
	inherit: "elm/progressbar/horizontal/default";
	
	parts {
		spacer { "elm.cur.progressbar1"; nomouse; scale;
			dragable.confine: "base";
			dragable.x: 1 1 1;
			dragable.y: 0 0 0;
			desc { "default"; min: 8 4; max: 8 4;
				fixed: 1 1;
				STAY_ON("base")
			}
		}
		spacer { "barend1"; scale;
			desc { "default"; min: 1 18;
				fixed: 1 0;
				rel1.to_x: "elm.cur.progressbar1";
				rel1.relative: 1.0 0.0;
				rel2.to_x: "elm.cur.progressbar1";
				rel2.relative: 1.0 1.0;
				align: 0.0 0.5;
			}
			desc { "inv"; inherit;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 1.0;
				align: 1.0 0.5;
			}
		}
		part { "bar1"; clip: "fract_clip"; scale;
			after: "base";
			desc { "default"; color: "#DCDCDCC8";
				rel1.to_x: "ins0";
				rel1.to_y: "base";
				rel1.relative: 0.0 0.0;
				rel1.offset: 1 2;
				rel2.to_x: "barend1";
				rel2.to_y: "base";
				rel2.offset: -3 -3;
				fixed: 1 1;
				rel2.relative: 1.0 1.0;
				image.normal: "barH.png";
				image.border: 5 5 5 5;
			}
			desc { "inv"; inherit;
				rel1.to_x: "barend";
				rel2.to_x: "ins1";
			}
		}
	}

	programs {
		program { "inverted-on";
			signal: "elm,state,inverted,on"; source: "elm";
			action:  STATE_SET "inv" 0.0;
			target: "bar";
			target: "bar1";
			target: "barend";
			target: "barend1";
		}
		program
		 { "inverted-off";
			signal: "elm,state,inverted,off"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "bar";
			target: "bar1";
			target: "barend";
			target: "barend1";
		}
	}
}

group { "elm/progressbar/vertical/double";
	inherit: "elm/progressbar/vertical/default";

	parts {
		spacer { "elm.cur.progressbar1"; nomouse; scale;
			dragable.confine: "base";
			dragable.x: 0 0 0;
			dragable.y: 1 1 1;
			desc { "default"; min: 4 8; max: 4 8;
				fixed: 1 1;
				STAY_ON("base")
			}
		}
		spacer { "barend1"; scale;
			desc { "default"; min: 18 1;
				fixed: 0 1;
				rel1.to_y: "elm.cur.progressbar1";
				rel1.relative: 0.0 1.0;
				rel2.to_y: "elm.cur.progressbar1";
				rel2.relative: 1.0 1.0;
				align: 0.5 0.0;
			}
			desc { "inv"; inherit;
				rel1.relative: 0.0 0.0;
				rel2.relative: 1.0 0.0;
				align: 0.5 1.0;
			}
		}
		part { "bar1"; clip: "fract_clip"; scale;
			after: "base";
			desc { "default"; color: "#DCDCDCC8";
				rel1.to_y: "ins0";
				rel1.to_x: "base";
				rel1.relative: 0.0 0.0;
				rel1.offset: 2 1;
				rel2.to_y: "barend1";
				rel2.to_x: "base";
				rel2.offset: -3 -3;
				fixed: 1 1;
				rel2.relative: 1.0 1.0;
				image.normal: "barV.png";
				image.border: 5 5 5 5;
			}
			desc { "inv"; inherit;
				rel1.to_y: "barend1";
				rel2.to_y: "ins1";
			}
		}
	}

	programs {
		program { "inverted-on";
			signal: "elm,state,inverted,on"; source: "elm";
			action:  STATE_SET "inv" 0.0;
			target: "bar";
			target: "barend";
			target: "bar1";
			target: "barend1";
		}
		program { "inverted-off";
			signal: "elm,state,inverted,off"; source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "bar";
			target: "barend";
			target: "bar1";
			target: "barend1";
		}
	}
}
