#define FLIP_PICKER_MAX_LEN (50)
#define FLIP_PICKER_MAX_LEN_STR "50"

group { "elm/flipselector/base/default";
	images.image: "flip_shad.png" COMP;
	images.image: "menu_arrow_u_normal.png" COMP;
	images.image: "menu_arrow_d_normal.png" COMP;
	images.image: "shine.png" COMP;
	images.image: "shadow_square.png" COMP;
	images.image: "bevel_out.png" COMP;
	
	data.item: "max_len" FLIP_PICKER_MAX_LEN_STR;
	
	//FIXME: quick successive clicks on, say, up, lead to nastiness
	script {
		public cur, prev, next, lock;

      flip_up(str[]) {
			new tmp[FLIP_PICKER_MAX_LEN];
			if (get_int(lock) == 1) {
				replace_str(next, 0, str);
				return;
			}
			fetch_str(cur, 0, tmp, FLIP_PICKER_MAX_LEN);

			set_text(PART:"bottom_text_prev", tmp);
			set_state(PART:"elm.top", "shrink", 0.0);
			set_text(PART:"elm.top", tmp);
			set_state(PART:"elm.top", "default", 0.0);
			set_text(PART:"elm.top", tmp);

			replace_str(prev, 0, tmp);

			set_state(PART:"elm.bottom", "default", 0.0);
			set_text(PART:"elm.bottom", str);
			set_state(PART:"elm.bottom", "shrink", 0.0);
			set_text(PART:"elm.bottom", str);
			set_text(PART:"top_text_prev", str);

			replace_str(cur, 0, str);

			set_state(PART:"bottom_cur", "shrink", 0.0);
			set_state(PART:"top_cur", "default", 0.0);

			set_int(lock, 1);
			set_state(PART:"bottom_shadow", "default", 0.0);
			anim(0.2, "animator_top_down", 1);
		}
      flip_dn(str[]) {      
			new tmp[FLIP_PICKER_MAX_LEN];
			if (get_int(lock) == 1) {
				replace_str(next, 0, str);
				return;
			}

			fetch_str(cur, 0, tmp, FLIP_PICKER_MAX_LEN);

			set_text(PART:"top_text_prev", tmp);
			set_state(PART:"elm.bottom", "shrink", 0.0);
			set_text(PART:"elm.bottom", tmp);
			set_state(PART:"elm.bottom", "default", 0.0);
			set_text(PART:"elm.bottom", tmp);

			replace_str(prev, 0, tmp);

			set_state(PART:"elm.top", "default", 0.0);
			set_text(PART:"elm.top", str);
			set_state(PART:"elm.top", "shrink", 0.0);
			set_text(PART:"elm.top", str);
			set_text(PART:"bottom_text_prev", str);

			replace_str(cur, 0, str);

			set_state(PART:"bottom_cur", "default", 0.0);
			set_state(PART:"top_cur", "shrink", 0.0);

			set_int(lock, 1);
			set_state(PART:"bottom_shadow", "full", 0.0);
			anim(0.2, "animator_bottom_up", 1);
		}
		public animator_bottom_down(val, Float:pos) {
			new tmp[FLIP_PICKER_MAX_LEN];

			set_tween_state(PART:"elm.bottom", pos, "shrink", 0.0, "default", 0.0);
			set_tween_state(PART:"bottom_cur", pos, "shrink", 0.0, "default", 0.0);
			set_tween_state(PART:"bottom_shadow", pos, "half", 0.0, "full", 0.0);
			set_state(PART:"bottom_shine_cur", "visible", 0.0);

			if (pos >= 1.0) {
				set_state(PART:"bottom_shadow", "default", 0.0);
				set_state(PART:"bottom_shine_cur", "default", 0.0);
				set_int(lock, 0);
				fetch_str(next, 0, tmp, FLIP_PICKER_MAX_LEN);
				if (strncmp(tmp, "", FLIP_PICKER_MAX_LEN) != 0) {
					replace_str(next, 0, "");
					flip_up(tmp);
				}
			}
		}
		public animator_top_down(val, Float:pos) {
			set_tween_state(PART:"elm.top", pos, "default", 0.0, "shrink", 0.0);
			set_tween_state(PART:"top_cur", pos, "default", 0.0, "shrink", 0.0);
			set_tween_state(PART:"bottom_shadow", pos, "default", 0.0, "half",
								 0.0);
			if (pos >= 1.0)
			  {
				  set_state(PART:"top_shine_cur", "default", 0.0);
				  anim(0.2, "animator_bottom_down", val);
			  }
		}
		public animator_bottom_up(val, Float:pos) {
			set_tween_state(PART:"elm.bottom", pos, "default", 0.0, "shrink", 0.0);
			set_tween_state(PART:"bottom_cur", pos, "default", 0.0, "shrink", 0.0);
			set_tween_state(PART:"bottom_shadow", pos, "full", 0.0, "half", 0.0);

			if (pos >= 1.0) anim(0.2, "animator_top_up", val);
		}
		public animator_top_up(val, Float:pos) {
			new tmp[FLIP_PICKER_MAX_LEN];

			set_tween_state(PART:"elm.top", pos, "shrink", 0.0, "default", 0.0);
			set_tween_state(PART:"top_cur", pos, "shrink", 0.0, "default", 0.0);
			set_tween_state(PART:"bottom_shadow", pos, "half", 0.0, "default",
								 0.0);
			set_state(PART:"top_shine_cur", "visible", 0.0);

			if (pos >= 1.0) {
				set_state(PART:"bottom_shadow", "default", 0.0);
				set_int(lock, 0);

				fetch_str(next, 0, tmp, FLIP_PICKER_MAX_LEN);
				if (strncmp(tmp, "", FLIP_PICKER_MAX_LEN) != 0) {
					replace_str(next, 0, "");
					flip_dn(tmp);
				}
			}
		}
		public message(Msg_Type:type, id, ...) {
			/* flip down */
			if ((type == MSG_STRING) && (id == 1)) {
				new value[FLIP_PICKER_MAX_LEN];
				snprintf(value, FLIP_PICKER_MAX_LEN, "%s", getarg(2));
				flip_up(value);
			/* flip up */
			} else  if ((type == MSG_STRING) && (id == 2)) {
				new value[FLIP_PICKER_MAX_LEN];
				snprintf(value, FLIP_PICKER_MAX_LEN, "%s", getarg(2));
				flip_dn(value);
			}
		}
	}
	parts {
		part { "base_shadow"; nomouse;
			desc { state: "default" 0.0;
				image.normal: "shadow_square.png";
				image.border: 14 14 14 14;
				image.middle: 0;
				rel1.to: "base";
				rel1.offset: -7  -3;
				rel2.to: "base";
				rel2.offset: 6 11;
				fill.smooth: 0;
			}
		}
		part { "base"; type: RECT;
			scale;
			desc { state: "default" 0.0;
				rel1.offset: 6 6;
				rel2.offset: -7 -7;
			}
		}
		part { "bottom"; type: RECT;
			desc { state: "default" 0.0;
				rel1 { to: "base"; relative: 0.0 0.5; }
				rel2.to: "base";
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
		part { "top"; type: RECT;
			desc { state: "default" 0.0;
				rel1.to: "base";
				rel2 { to: "base"; relative: 1.0 0.5; }
				color: "#00000000";
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
		part { "bottom_prev";
			type: RECT;
			nomouse;
			desc { state: "default" 0.0;
				rel1.to: "bottom";
				rel2.to: "bottom";
				color: VISIBLE;
				color_class: "focus";
			}
		}
		part { "bottom_text_prev"; type: TEXT; nomouse;
			effect: SHADOW TOP;
			clip: "bottom_clipper";
			scale;
			desc { state: "default" 0.0;
				rel1.to_x: "base";
				rel1.to_y: "arrow_top";
				rel1.relative: 0.0 0.7;
				rel1.offset: 2 0;
				rel2.to: "base";
				rel2.to_y: "arrow_bottom";
				rel2.relative: 1.0 0.3;
				rel2.offset: -3 -1;
				text { font: "Sans"; size: 10;
					min: 1 1;
					ellipsis: -1;
					align: 0.5 0.5;
				}
				color: VISIBLE;
				color2: VISIBLE;
				color3: VISIBLE;
				color_class: "menu_item_active";
			}
			desc { "disabled";
				inherit: "default" 0.0;
				color: "#FFFFFF7D";
				color2: "#FFFFFF7D";
				color3: "#FFFFFF7D";
			}
		}
		part { "bottom_shadow"; nomouse;
			clip: "bottom_clipper";
			desc { state: "default" 0.0;
				rel1.to: "bottom";
				rel2 { to: "bottom"; relative: 1.0 0.0; }
				image.normal: "flip_shad.png";
				color: 255 255 255 200;
				fill.smooth: 0;
			}
			desc { state: "half" 0.0;
				inherit: "default" 0.0;
				rel2.relative: 1.0 1.0;
			}
			desc { state: "full" 0.0;
				inherit: "default" 0.0;
				rel2.relative: 1.0 2.0;
			}
		}
		part { "bottom_cur"; type: RECT; nomouse;
			desc { state: "default" 0.0;
				rel1.to: "bottom";
				rel2.to: "bottom";
				color: VISIBLE;
				color_class: "focus";
			}
			desc { state: "shrink" 0.0;
				inherit: "default" 0.0;
				rel2.relative: 1.0 0.0;
			}
		}
		part { "bottom_shine_cur"; nomouse;
			desc { state: "default" 0.0;
				rel1 { to: "bottom_cur"; relative: 0 1; }
				rel2.to: "bottom_cur";
				image.normal: "shine.png";
				min: 0 1;
				fixed: 0 1;
				align: 0.5 1;
				visible: 0;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}
		part { "elm.bottom"; type: TEXT; nomouse;
			effect: SHADOW BOTTOM;
			clip: "bottom_clipper";
			scale;
			desc { state: "default" 0.0;
				rel1.to_x: "base";
				rel1.to_y: "arrow_top";
				rel1.relative: 0.0 0.7;
				rel1.offset: 2 0;
				rel2.to: "base";
				rel2.to_y: "arrow_bottom";
				rel2.relative: 1.0 0.3;
				rel2.offset: -3 -1;
				text { font: "Sans"; size: 10;
					min: 1 1;
					ellipsis: -1;
					align: 0.5 0.5;
				}
				color: VISIBLE;
				color2: VISIBLE;
				color3: VISIBLE;
				color_class: "menu_item_active";
			}
			desc { state: "shrink" 0.0;
				inherit: "default" 0.0;
				color: 128 128 128 255;
				visible: 0;
				rel2.relative: 1.0 0.5; /* FIXME: same visual effect? --> MAP! */
			}
			desc { "disabled";
				inherit: "default" 0.0;           
				color: "#FFFFFF7D";
				color2: "#FFFFFF7D";
				color3: "#FFFFFF7D";
			}
		}
		part { "top_prev"; type: RECT; nomouse;
			desc { state: "default" 0.0;
				rel1.to: "top";
				rel2.to: "top";
				color: 239 239 239 255;
				color_class: "focus";
			}
		}
		part { "top_text_prev"; type: TEXT; nomouse;
			effect: SHADOW BOTTOM;
			clip: "top_clipper";
			scale;
			desc { state: "default" 0.0;
				rel1.to_x: "base";
				rel1.to_y: "arrow_top";
				rel1.relative: 0.0 0.7;
				rel1.offset: 2 0;
				rel2.to: "base";
				rel2.to_y: "arrow_bottom";
				rel2.relative: 1.0 0.3;
				rel2.offset: -3 -1;
				text { font: "Sans"; size: 10;
					min: 1 1;
					ellipsis: -1;
					align: 0.5 0.5;
					source: "elm.top";
				}
				color: 210 210 210 255;
				color2: 210 210 210 255;
				color3: 210 210 210 255;
				color_class: "menu_item_active";
			}
			desc { "disabled";
				inherit: "default" 0.0;
				color: 210 210 210 125;
				color2: 210 210 210 125;
				color3: 210 210 210 125;
				
			}
		}
		part { "top_shine_prev"; nomouse;
			desc { state: "default" 0.0;
				rel1.to: "top_prev";
				rel2 { to: "top_prev"; relative: 1 0; }
				image.normal: "shine.png";
				min: 0 1;
				fixed: 0 1;
				align: 0.5 0;
			}
		}
		part { "top_cur"; type: RECT; nomouse;
			desc { state: "default" 0.0;
				rel1.to: "top";
				rel2.to: "top";
				color: 239 239 239 255;
				color_class: "focus";
			}
			desc { state: "shrink" 0.0;
				inherit: "default" 0.0;
				rel1.relative: 0.0 1.0;
				color: 223 223 223 255;
			}
		}
		part { "elm.top"; type: TEXT; nomouse;
			effect: SHADOW BOTTOM;
			clip: "top_clipper";
			scale;
			desc { state: "default" 0.0;
				rel1.to: "base";
				rel1.offset: 2 2;
				rel2.to: "base";
				rel2.offset: -3 -3;
				text { font: "Sans"; size: 10;
					min: 1 1;
					ellipsis: -1;
					align: 0.5 0.5;
				}
				color: 210 210 210 255;
				color2: 210 210 210 255;
				color3: 210 210 210 255;
				color_class: "menu_item_active";
			}
			desc { state: "shrink" 0.0;
				inherit: "default" 0.0;
				visible: 0;
				rel1.relative: 0.0 0.5;
			}
			desc { "disabled";
				inherit: "default" 0.0;
				color: 210 210 210 125;
				color2: 210 210 210 125;
				color3: 210 210 210 125;
			}
		}
		part { "top_shine_cur"; nomouse;
			desc { state: "default" 0.0;
				rel1.to: "top_cur";
				rel2 { to: "top_cur"; relative: 1 0; }
				image.normal: "shine.png";
				min: 0 1;
				fixed: 0 1;
				align: 0.5 0;
				visible: 0;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}
		part { "bevel"; nomouse;
			desc { state: "default" 0.0;
				image.normal: "bevel_out.png";
				image.border: 1 1 1 1;
				image.middle: 0;
				rel1.to: "base";
				rel2.to: "base";
				fill.smooth: 0;
			}
		}
		part { "arrow_top"; nomouse;
			scale;
			desc { state: "default" 0.0;
				FIXED_SIZE(12,9)
				align: 0.5 0.0;
				rel1.to: "top";
				rel2.to: "top";
				image.normal: "menu_arrow_u_normal.png";
				color: 210 210 210 255;
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			desc { "disabled";
				inherit: "default" 0.0;
				color: 210 210 210 125;
			}
		}
		part { "arrow_bottom"; nomouse;
			scale;
			desc { state: "default" 0.0;
				FIXED_SIZE(12,9)
				align: 0.5 1.0;
				rel1.to: "bottom";
				rel2.to: "bottom";
				image.normal: "menu_arrow_d_normal.png";
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			desc { "disabled";
				inherit: "default" 0.0;
				color: "#FFFFFF7D";
			}
		}
		part { "top_clipper"; type: RECT;
			desc { state: "default" 0.0;
				rel1.to: "top";
				rel2.to: "top";
			}
		}
		part { "bottom_clipper"; type: RECT;
			desc { state: "default" 0.0;
				rel1.to: "bottom";
				rel2.to: "bottom";
			}
		}
		part { "event_blocker"; type: RECT;
			desc { state: "default" 0.0;
				color: "#00000000";
				visible: 0;
			}
			desc { "disabled";
				inherit: "default" 0.0;
				visible: 1;
			}
		}
	}
	programs {
		program {
			signal: "load"; source: "";
			script {
				append_str(cur, "");
				append_str(prev, "");
				append_str(next, "");
				set_int(lock, 0);
			}
		}
		program {
			signal: "elm,state,button,hidden"; source: "elm";
			action: STATE_SET "hidden" 0.0;
			target: "arrow_top";
			target: "arrow_bottom";
			target: "top";
			target: "bottom";
		}
		program {
			signal: "elm,state,button,visible"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "arrow_top";
			target: "arrow_bottom";
			target: "top";
			target: "bottom";
		}
		program { "up";
			signal: "mouse,down,1"; source: "top";
			action: SIGNAL_EMIT "elm,action,up,start" "elm";
		}
		program { "up,stop";
			signal: "mouse,up,1"; source: "top";
			action: SIGNAL_EMIT "elm,action,up,stop" "elm";
		}
		program { "down";
			signal: "mouse,down,1"; source: "bottom";
			action: SIGNAL_EMIT "elm,action,down,start" "elm";
		}
		program { "down,stop";
			signal: "mouse,up,1"; source: "bottom";
			action: SIGNAL_EMIT "elm,action,down,stop" "elm";
		}
		program { "disable";
			signal: "elm,state,disabled"; source: "elm";
			script {
				new st[31];
				new Float:vl;
				set_state(PART:"event_blocker", "disabled", 0.0);
				set_state(PART:"elm.bottom", "disabled", 0.0);
				set_state(PART:"elm.top", "disabled", 0.0);
				set_state(PART:"bottom_text_prev", "disabled", 0.0);
				set_state(PART:"top_text_prev", "disabled", 0.0);

				get_state(PART:"arrow_bottom", st, 30, vl);
				if (strcmp(st, "hidden"))
				  set_state(PART:"arrow_bottom", "disabled", 0.0);

				get_state(PART:"arrow_top", st, 30, vl);
				if (strcmp(st, "hidden"))
				  set_state(PART:"arrow_top", "disabled", 0.0);

				get_state(PART:"top_cur", st, 30, vl);
				if (strcmp(st, "shrink"))
				  set_state(PART:"top_shine_cur", "visible", 0.0);
			}
		}
		program { "enable";
			signal: "elm,state,enabled"; source: "elm";
			script {
				new st[31];
				new Float:vl;
				set_state(PART:"event_blocker", "default", 0.0);
				set_state(PART:"elm.bottom", "default", 0.0);
				set_state(PART:"elm.top", "default", 0.0);
				set_state(PART:"bottom_text_prev", "default", 0.0);
				set_state(PART:"top_text_prev", "default", 0.0);

				get_state(PART:"arrow_bottom", st, 30, vl);
				if (strcmp(st, "hidden"))
					set_state(PART:"arrow_bottom", "default", 0.0);

				get_state(PART:"arrow_top", st, 30, vl);
				if (strcmp(st, "hidden"))
					set_state(PART:"arrow_top", "default", 0.0);
			}
		}
	}
}
