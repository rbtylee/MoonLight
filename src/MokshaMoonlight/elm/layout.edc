group { "elm/layout/application/content-back";
	parts {
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "title_clipper";
					relative: 0.0 1.0;
					offset: -1 1;
				}
			}
		}
		part { "title_clipper"; type: RECT;
			desc { state: "default" 0.0;
				vis;
				rel1.to_y: "back";
				rel2.to_y: "back";
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				hid;
				rel2.relative: 1.0 0.0;
			}
		}
		part { "back_clipper"; type: RECT;
			clip: "title_clipper";
			desc { state: "default" 0.0;
				vis;
			}
			desc { state: "hidden" 0.0;
				hid;
			}
		}
		part { "back"; type: EXTERNAL;
			source: "elm/button";
			clip: "back_clipper";
			desc { state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					relative: 0.0 0.0;
					offset: 0 1;
				}
				rel2 {
					relative: 0.0 0.0;
					offset: 50 32;
				}
				params.string: "label" "Back";
			}
		}
		programs {
			program {
				signal: "clicked"; source: "back";
				action: SIGNAL_EMIT "elm,action,back" "elm";
			}
			program {
				signal: "elm,back,hide"; source: "elm";
				action: STATE_SET "hidden" 0.0;
				target: "back_clipper";
			}
			program {
				signal: "elm,back,show"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "back_clipper";
			}
			program {
				signal: "elm,title,hide"; source: "elm";
				action: STATE_SET "hidden" 0.0;
				transition: LINEAR 0.1;
				target: "title_clipper";
			}
			program {
				signal: "elm,title,show"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "title_clipper";
			}
		}
		part { "elm.swallow.end"; type: SWALLOW;
			desc { state: "default" 0.0;
				align: 1.0 0.0;
				fixed: 1 1;
				rel1 {
					relative: 1.0 0.0;
					offset: -2 1;
				}
				rel2 {
					relative: 1.0 0.0;
					offset: -1 32;
				}
			}
		}
		part { "elm.text.title"; type: TEXT;
			effect: SHADOW BOTTOM;
			scale;
			clip: "title_clipper";
			desc { state: "default" 0.0;
				rel1 {
					to_x: "back";
					relative: 1.0 0.0;
					offset: 2 1;
				}
				rel2 {
					to_y: "back";
					to_x: "elm.swallow.end";
					relative: 0.0 1.0;
					offset: -3 -1;
				}
				color_class: "label_text";
				color: VISIBLE;
				color3: VISIBLE;
				text { font: "Sans:style=Bold"; size: 10;
				}
			}
		}
	}
}

/* application with a main content area with a back and next buttons and title area */
group { "elm/layout/application/content-back-next";
	parts {
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "title_clipper";
					relative: 0.0 1.0;
					offset: -1 1;
				}
			}
		}
		part { "title_clipper"; type: RECT;
			desc { state: "default" 0.0;
				vis;
				rel1.to_y: "back";
				rel2.to_y: "back";
			}
			desc { state: "hidden" 0.0;
				inherit: "default" 0.0;
				hid;
				rel2.relative: 1.0 0.0;
			}
		}
		part { "back"; type: EXTERNAL;
			source: "elm/button";
			clip: "back_clipper";
			desc { state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					relative: 0.0 0.0;
					offset: 0 1;
				}
				rel2 {
					relative: 0.0 0.0;
					offset: 50 32;
				}
				params.string: "label" "Back";
			}
		}
		part { "back_clipper"; type: RECT;
			clip: "title_clipper";
			desc { state: "default" 0.0;
				vis;
			}
			desc { state: "hidden" 0.0;
				hid;
			}
		}
		part { "next"; type: EXTERNAL;
			source: "elm/button";
			clip: "next_clipper";
			desc { state: "default" 0.0;
				align: 1.0 0.0;
				fixed: 1 1;
				rel1 {
					relative: 1.0 0.0;
					offset: -2 1;
				}
				rel2 {
					relative: 1.0 0.0;
					offset: -1 32;
				}
				params.string: "label" "Next";
			}
		}
		part { "next_clipper"; type: RECT;
			clip: "title_clipper";
			desc { state: "default" 0.0;
				vis;
			}
			desc { state: "hidden" 0.0;
				hid;
			}
		}
		programs {
			program {
				signal: "clicked"; source: "back";
				action: SIGNAL_EMIT "elm,action,back" "elm";
			}
			program {
				signal: "elm,title,hide"; source: "elm";
				action: STATE_SET "hidden" 0.0;
				transition: LINEAR 0.1;
				target: "title_clipper";
			}
			program {
				signal: "elm,title,show"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "title_clipper";
			}
			program {
				signal: "elm,back,hide"; source: "elm";
				action: STATE_SET "hidden" 0.0;
				target: "back_clipper";
			}
			program {
				signal: "elm,back,show"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "back_clipper";
			}
			program {
				signal: "clicked"; source: "next";
				action: SIGNAL_EMIT "elm,action,next" "elm";
			}
			program {
				signal: "elm,next,hide"; source: "elm";
				action: STATE_SET "hidden" 0.0;
				target: "next_clipper";
			}
			program {
				signal: "elm,next,show"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "next_clipper";
			}
		}
		part { "elm.text.title"; type: TEXT;
			effect: SHADOW BOTTOM;
			scale;
			clip: "title_clipper";
			desc { state: "default" 0.0;
				rel1 {
					to_x: "back";
					relative: 1.0 0.0;
					offset: 2 1;
				}
				rel2 {
					to_y: "back";
					to_x: "next";
					relative: 0.0 1.0;
					offset: -3 -1;
				}
				color_class: "label_text";
				color: VISIBLE;
				color3: VISIBLE;
				text { font: "Sans:style=Bold"; size: 10;
				}
			}
		}
	}
}

/* application with toolbar and main content area */
group { "elm/layout/application/toolbar-content";
	parts {
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
					offset: -1 1;
				}
			}
		}
		part { "elm.external.toolbar"; type: EXTERNAL;
			source: "elm/toolbar";
			desc { state: "default" 0.0;
				align: 0.5 0.0;
				fixed: 0 1;
				rel2 {
					relative: 1.0 0.0;
					offset: -1 0;
				}
			}
		}
	}
}

/* application with toolbar and main content area with a back button and title area */
group { "elm/layout/application/toolbar-content-back";
	inherit: "elm/layout/application/content-back";
	parts {
		part { "elm.external.toolbar"; type: EXTERNAL;
			insert_after: "elm.swallow.content";
			source: "elm/toolbar";
			desc { state: "default" 0.0;
				fixed: 0 1;
				align: 0.5 0.0;
				rel2 {
					relative: 1.0 0.0;
					offset: -1 0;
				}
			}
		}
		part { "back";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
				}
				rel2 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
				}
			}
		}
		part { "elm.swallow.end";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
				rel2 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
			}
		}
		part { "elm.text.title";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
			}
		}
	}
}

/* application with toolbar and main content area with a back and next buttons and title area */
group { "elm/layout/application/toolbar-content-back-next";
	inherit: "elm/layout/application/content-back-next";
	parts {
		part { "elm.external.toolbar"; type: EXTERNAL;
			source: "elm/toolbar";
			desc { state: "default" 0.0;
				fixed: 0 1;
				align: 0.5 0.0;
				rel2 {
					relative: 1.0 0.0;
					offset: -1 0;
				}
			}
		}
		part { "back";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
				}
				rel2 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
				}
			}
		}
		part { "next";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
				rel2 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
			}
		}
		part { "elm.text.title";
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 1.0 1.0;
				}
			}
		}
	}
}

/* application with toolbar and main content area as a vertical box */
group { "elm/layout/application/toolbar-vbox";
	parts {
		part { "elm.box.content"; type: BOX;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
					offset: -1 0;
				}
				box.layout: "vertical";
			}
		}
		part { "elm.external.toolbar"; type: EXTERNAL;
			source: "elm/toolbar";
			desc { state: "default" 0.0;
				align: 0.5 0.0;
				fixed: 0 1;
				rel2 {
					relative: 1.0 0.0;
					offset: -1 0;
				}
			}
		}
	}
}

/* application with toolbar and main content area as a table */
group { "elm/layout/application/toolbar-table";
	parts {
		part { "elm.table.content"; type: TABLE;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.external.toolbar";
					relative: 0.0 1.0;
					offset: -1 0;
				}
			}
		}
		part { "elm.external.toolbar"; type: EXTERNAL;
			source: "elm/toolbar";
			desc { state: "default" 0.0;
				align: 0.5 0.0;
				fixed: 0 1;
				rel2 {
					relative: 1.0 0.0;
					offset: -1 0;
				}
			}
		}
	}
}

/* a simple title layout, with a label and two icons */
group { "elm/layout/application/titlebar";
	parts {
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1 {
					to_y: "elm.swallow.icon";
					relative: 0.0 1.0;
					offset: -1 0;
				}
			}
		}
		part { "elm.swallow.icon"; type: SWALLOW;
			scale;
			desc { state: "default" 0.0;
				hid;
				fixed: 1 1;
				align: 0.0 0.0;
				min: 24 24;
				rel1 {
					relative: 0.0 0.0;
					offset: 2 2;
				}
				rel2 {
					relative: 0.0 0.0;
					offset: 2 2;
				}
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		part { "elm.swallow.end"; type: SWALLOW;
			scale;
			desc { state: "default" 0.0;
				hid;
				fixed: 1 1;
				align: 1.0 0.0;
				min: 24 24;
				rel1 {
					relative: 1.0 0.0;
					offset: -3 2;
				}
				rel2 {
					relative: 1.0 0.0;
					offset: -3 2;
				}
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		programs {
			program {
				signal: "elm,state,icon,visible"; source: "elm";
				action: STATE_SET "visible" 0.0;
				target: "elm.swallow.icon";
			}
			program {
				signal: "elm,state,icon,hidden"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "elm.swallow.icon";
			}
			program {
				signal: "elm,state,end,visible"; source: "elm";
				action: STATE_SET "visible" 0.0;
				target: "elm.swallow.end";
			}
			program {
				signal: "elm,state,end,hidden"; source: "elm";
				action: STATE_SET "default" 0.0;
				target: "elm.swallow.end";
			}
		}
		part { "elm.text"; type: TEXT;
			effect: SHADOW BOTTOM;
			scale;
			desc { state: "default" 0.0;
				rel1 {
					to: "elm.swallow.icon";
					relative: 1.0 0.0;
				}
				rel2 {
					to: "elm.swallow.end";
					relative: 0.0 1.0;
				}
				color_class: "label_text";
				color: VISIBLE;
				color3: VISIBLE;
				text { font: "Sans:style=Bold"; size: 10;
				}
			}
		}
	}
}
