group { "elm/notify/block_events/popup/default";
	parts {
		part { "base"; type: RECT;
			desc { state: "default" 0.0;
				color: 0 0 0 100;
			}
		}
		program {
			signal: "mouse,clicked,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
	}
}

group { "elm/notify/block_events/popup/transparent";
	parts {
		part { "base"; type: RECT;
			desc { state: "default" 0.0;
				color: 0 0 0 0;
			}
			desc { state: "clicked" 0.0;
				color: 0 0 0 192;
			}
		}
		program {
			signal: "mouse,down,1"; source: "base";
			action: SIGNAL_EMIT "elm,action,click" "elm";
			after: "click1";
		}
		program { "click1";
			action: STATE_SET "clicked" 0.0;
			target: "base";
			transition: SINUSOIDAL 0.2;
		}
		program {
			signal: "mouse,up,1"; source: "base";
			action: STATE_SET "default" 0.0;
			target: "base";
			transition: DECELERATE 0.5;
		}
	}
}

group { "elm/notify/top/popup/default";
	inherit: "elm/notify/top/default";
#define OVERRIDE_BASE() \
	images.image: "dia_bg.png" COMP; \
	parts { \
		part { "base";	\
			desc { state: "default" 0.0;	\
				color_class: "dialog_base";	\
				image.normal: "dia_bg.png";	\
				image.border: 15 15 2 2;	\
				fill.smooth: 0;	\
			}	\
			desc { state: "visible" 0.0;	\
				color_class: "dialog_base";	\
				color: 255 255 255 255;	\
				image.normal: "dia_bg.png";	\
				image.border: 15 15 2 2;	\
				fill.smooth: 0;	\
			}	\
		}	\
	}
	OVERRIDE_BASE()
}

group { "elm/notify/bottom/popup/default";
	inherit: "elm/notify/bottom/default";
	OVERRIDE_BASE()
}

group { "elm/notify/left/popup/default";
	inherit: "elm/notify/left/default";
	OVERRIDE_BASE()
}

group { "elm/notify/right/popup/default";
	inherit: "elm/notify/right/default";
	OVERRIDE_BASE()
}

group { "elm/notify/top_left/popup/default";
	inherit: "elm/notify/top_left/default";
	OVERRIDE_BASE()
}

group { "elm/notify/top_right/popup/default";
	inherit: "elm/notify/top_right/default";
	OVERRIDE_BASE()
}

group { "elm/notify/bottom_left/popup/default";
	inherit: "elm/notify/bottom_left/default";
	OVERRIDE_BASE()
}

group { "elm/notify/bottom_right/popup/default";
	inherit: "elm/notify/bottom_right/default";
	OVERRIDE_BASE()
}

group { "elm/notify/center/popup/default";
	inherit: "elm/notify/center/default";
	OVERRIDE_BASE()
}
#undef OVERRIDE_BASE

group { "elm/notify/top/popup/transparent";
	inherit: "elm/notify/top/default";
}

group { "elm/notify/bottom/popup/transparent";
	inherit: "elm/notify/bottom/default";
}

group { "elm/notify/left/popup/transparent";
	inherit: "elm/notify/left/default";
}

group { "elm/notify/right/popup/transparent";
	inherit: "elm/notify/right/default";
}

group { "elm/notify/top_left/popup/transparent";
	inherit: "elm/notify/top_left/default";
}

group { "elm/notify/top_right/popup/transparent";
	inherit: "elm/notify/top_right/default";
}

group { "elm/notify/bottom_left/popup/transparent";
	inherit: "elm/notify/bottom_left/default";
}

group { "elm/notify/bottom_right/popup/transparent";
	inherit: "elm/notify/bottom_right/default";
}

group { "elm/notify/center/popup/transparent";
	inherit: "elm/notify/center/default";
}

group { "elm/label/base/popup/default";
	styles {
		style { "popup_desc_style";
			base: "font=""Sans"" font_size=10 text_class=label align=center color=#fff wrap=mixed";
			tag: "br" "\n";
			tag: "hilight" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "b" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "whitecolor" "+ color=#fff";
			tag: "tab" "\t";
		}
	}
	parts {
		part { "elm.text"; type: TEXTBLOCK; mouse_events: 0;
			scale: 1;
			desc { state: "default" 0.0;
			 color_class: "label_text";
				text {
					style: "popup_desc_style";
					min: 0 1;
					max: 0 1;
				}
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
		}
	}
}

group { "elm/label/base/popup/transparent";
	styles {
		/*style { "popup_desc_style_trasp";
			base: "font=""Sans"" font_size=10 text_class=label align=center color=#fff wrap=mixed";
			tag: "br" "\n";
			tag: "hilight" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "b" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "whitecolor" "+ color=#fff";
			tag: "tab" "\t";
		}*/
	}
	parts {
		part { "elm.text"; type: TEXTBLOCK; mouse_events: 0;
			scale: 1;
			desc { state: "default" 0.0;
				text {
					style: "popup_desc_style";
					min: 0 1;
					max: 0 1;
				}
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
		}
	}
}

group { "elm/button/base/popup/default";
	inherit: "elm/button/base/default";
}

group { "elm/button/base/popup/transparent";
	inherit: "elm/button/base/anchor";
}

group { "elm/popup/base/default";
	styles {
		style { "popup_title_style";
			base: "font=""Sans:style=Bold"" font_size=10 text_class=label align=center color=#fff wrap=mixed";
			tag: "br" "\n";
			tag: "hilight" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "b" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "whitecolor" "+ color=#fff";
			tag: "tab" "\t";
		}
	}
	parts {
		part { "base"; type: SPACER;
			scale: 1;
			desc { state: "default" 0.0;
				min: 240 0;
			}
		}
		part { "elm.bg.title"; type: RECT;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.text.title";
				rel2.to: "elm.text.title";
				hid;
			}
		}
		part { "elm.text.title"; type: TEXTBLOCK;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 0 1;
				color_class: "label_text";
				text {
					style: "popup_title_style";
					min: 1 1;
					ellipsis: -1;
				}
				hid;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
				rel2.relative: 1.0 0.0;
				align: 0.5 0.0;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		part { "elm.swallow.title.icon"; type: SWALLOW;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1.to_y: "elm.text.title";
				rel2.to_y: "elm.text.title";
				rel2.relative: 0.0 1.0;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				hid;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
			desc { state: "show_title_area" 0.0;
				inherit: "default" 0.0;
				rel1.relative: 0.0 1.0;
				rel1.to_y: "elm.bg.title";
			}
			desc { state: "show_action_area" 0.0;
				inherit: "default" 0.0;
				rel2.relative: 1.0 0.0;
				rel2.to_y: "elm.swallow.action_area";
			}
			desc { state: "show_action_title_area" 0.0;
				inherit: "default" 0.0;
				rel1.relative: 0.0 1.0;
				rel1.to_y: "elm.bg.title";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "elm.swallow.action_area";
			}
		}
		part { "elm.swallow.action_area"; type: SWALLOW;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 0 1;
				align: 0.5 1.0;
				hid;
				rel1.relative: 0.0 1.0;
				rel1.offset: 2 -3;
				rel1.to: "base";
				rel2.offset: -3 -3;
				rel2.to: "base";
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		
		part { "access.title"; type: RECT; repeat_events: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.bg.title";
				rel2.to: "elm.bg.title";
				color: 0 0 0 0;
			}
		}
		part { "access.body"; type: RECT; repeat_events: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				color: 0 0 0 0;
			}
		}
	}
	programs {
		program {
			signal: "elm,state,title,icon,visible"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "elm.swallow.title.icon";
		}
		program {
			signal: "elm,state,title,icon,hidden"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.title.icon";
		}
		program {
			signal: "elm,state,title,text,visible"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "elm.text.title";
		}
		program {
			signal: "elm,state,title,text,hidden"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text.title";
		}
		program {
			signal: "elm,state,title_area,visible"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.swallow.action_area", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "show_title_area", 0.0);
				set_state(PART:"elm.text.title", "visible", 0.0);
			}
		}
		program {
			signal: "elm,state,title_area,hidden"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.swallow.action_area", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"elm.text.title", "default", 0.0);
			}
		}
		program {
			signal: "elm,state,action_area,visible"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.text.title", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "show_action_area", 0.0);
				set_state(PART:"elm.swallow.action_area", "visible", 0.0);
			}
		}
		program {
			signal: "elm,state,action_area,hidden"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.text.title", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"elm.swallow.action_area", "default", 0.0);
			}
		}
	}
}

group { "elm/popup/base/transparent";
	styles {
		/*style { "popup_title_style_trasp";
			base: "font=""Sans:style=Bold"" font_size=10 text_class=label align=center color=#fff wrap=mixed";
			tag: "br" "\n";
			tag: "hilight" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "b" "+ font=""Sans:style=Bold"" text_class=label_light";
			tag: "whitecolor" "+ color=#fff";
			tag: "tab" "\t";
		}*/
	}
	parts {
		part { "base"; type: SPACER;
			scale: 1;
			desc { state: "default" 0.0;
				min: 240 0;
			}
		}
		part { "elm.bg.title"; type: RECT;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.text.title";
				rel2.to: "elm.text.title";
				hid;
			}
		}
		part { "elm.text.title"; type: TEXTBLOCK;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 0 1;
				text {
					style: "popup_title_style";
					min: 1 1;
					ellipsis: -1;
				}
				hid;
				rel1.offset: 2 2;
				rel2.offset: -3 2;
				rel2.relative: 1.0 0.0;
				align: 0.5 0.0;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		part { "elm.swallow.title.icon"; type: SWALLOW;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1.to_y: "elm.text.title";
				rel2.to_y: "elm.text.title";
				rel2.relative: 0.0 1.0;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				hid;
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		part { "elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
			desc { state: "show_title_area" 0.0;
				inherit: "default" 0.0;
				rel1.relative: 0.0 1.0;
				rel1.to_y: "elm.bg.title";
			}
			desc { state: "show_action_area" 0.0;
				inherit: "default" 0.0;
				rel2.relative: 1.0 0.0;
				rel2.to_y: "elm.swallow.action_area";
			}
			desc { state: "show_action_title_area" 0.0;
				inherit: "default" 0.0;
				rel1.relative: 0.0 1.0;
				rel1.to_y: "elm.bg.title";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "elm.swallow.action_area";
			}
		}
		part { "elm.swallow.action_area"; type: SWALLOW;
			scale: 1;
			desc { state: "default" 0.0;
				fixed: 0 1;
				align: 0.5 1.0;
				hid;
				rel1.relative: 0.0 1.0;
				rel1.offset: 2 -3;
				rel1.to: "base";
				rel2.offset: -3 -3;
				rel2.to: "base";
			}
			desc { state: "visible" 0.0;
				inherit: "default" 0.0;
				vis;
			}
		}
		
		part { "access.title"; type: RECT; repeat_events: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.bg.title";
				rel2.to: "elm.bg.title";
				color: 0 0 0 0;
			}
		}
		part { "access.body"; type: RECT; repeat_events: 1;
			desc { state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				color: 0 0 0 0;
			}
		}
	}
	programs {
		program {
			signal: "elm,state,title,icon,visible"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "elm.swallow.title.icon";
		}
		program {
			signal: "elm,state,title,icon,hidden"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.swallow.title.icon";
		}
		program {
			signal: "elm,state,title,text,visible"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "elm.text.title";
		}
		program {
			signal: "elm,state,title,text,hidden"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text.title";
		}
		program {
			signal: "elm,state,title_area,visible"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.swallow.action_area", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "show_title_area", 0.0);
				set_state(PART:"elm.text.title", "visible", 0.0);
			}
		}
		program {
			signal: "elm,state,title_area,hidden"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.swallow.action_area", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"elm.text.title", "default", 0.0);
			}
		}
		program {
			signal: "elm,state,action_area,visible"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.text.title", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_action_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "show_action_area", 0.0);
				set_state(PART:"elm.swallow.action_area", "visible", 0.0);
			}
		}
		program {
			signal: "elm,state,action_area,hidden"; source: "elm";
			script {
				new st[31], Float:vl;
				get_state(PART:"elm.text.title", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.content", "show_title_area", 0.0);
				else
					set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"elm.swallow.action_area", "default", 0.0);
			}
		}
	}
}

group { "elm/popup/content/popup/default";
	alias: "elm/popup/content/popup/transparent";
	parts {
		part {"elm.swallow.content"; type: SWALLOW;
			desc { state: "default" 0.0;
			}
		}
	}
}

group { "elm/popup/buttons1/popup/default";
	alias: "elm/popup/buttons1/popup/transparent";
	data.item: "action_area_height" "80";
	parts {
		part {"elm.swallow.content.button1"; type: SWALLOW;
			desc { state: "default" 0.0;
			}
		}
	}
}

group { "elm/popup/buttons2/popup/default";
	alias: "elm/popup/buttons2/popup/transparent";
	data.item: "action_area_height" "80";
	parts{
		part{"elm.swallow.content.button1"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel2.relative: 0.5 1.0;
			}
		}
		part{"elm.swallow.content.button2"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1.relative: 0.5 0.0;
			}
		}
	}
}

group { "elm/popup/buttons3/popup/default";
	alias: "elm/popup/buttons3/popup/transparent"; 
	data.item: "action_area_height" "80";
	parts{
		part{"elm.swallow.content.button1"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel2.relative: (1/3) 1.0;
			}
		}
		part{"elm.swallow.content.button2"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1.relative: 1.0 0.0;
				rel1.to: "elm.swallow.content.button1";
				rel2.relative: 0.0 1.0;
				rel2.to: "elm.swallow.content.button3";
			}
		}
		part{"elm.swallow.content.button3"; type: SWALLOW;
			desc { state: "default" 0.0;
				rel1.relative: (2/3) 0.0;
			}
		}
	}
}

group { "elm/popup/item/popup/default";
	inherit: "elm/list/item/default";
	parts {
		part { "elm.swallow.content"; type: SWALLOW;
			insert_after: "elm.swallow.icon";
			desc { state: "default" 0.0;
				fixed: 0 1;
				rel1.to: "elm.swallow.icon";
				rel2.to: "elm.swallow.icon";
			}
		}
	}
	programs {
		program {
			signal: "mouse,down,1"; source: "event";
			action: SIGNAL_EMIT "elm,state,selected" "elm";
		}
		program {
			signal: "mouse,up,1"; source: "event";
			action: SIGNAL_EMIT "elm,state,unselected" "elm";
		}
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
	}
}
