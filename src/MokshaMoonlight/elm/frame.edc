group { "elm/frame/base/default";
	inherit: "e/widgets/frame";
	parts {
		text { "elm.text"; nomouse; scale;
			desc { "default"; color: "#00000080";
				align: 0.0 0.0;
				fixed: 0 1;
				rel1.relative: 0.0 0.0;
				rel1.offset: 6 6;
				rel2.relative: 1.0 0.0;
				rel2.offset: -7 6;
				text.font: "Sans:style=Bold"; text.size: 10;
				text.min: 1 1; text.max: 1 1;
				text.align: 0.0 0.0;
				text.text_class: "frame";
			}
		}
		swallow { "elm.swallow.content"; clip: "clip";
			desc { "default";
				align: 0.0 1.0;
				rel1.to_y: "e.text.label";
				rel1.relative: 0.0 1.0;
				rel1.offset: 8 2;
				rel2.offset: -9 -9;
			}
			desc { "collapsed"; inherit; minmul: 1.0 0.0; }
		}
		rect { "clip";
			desc { "default";
				rel1.relative: 0.0 1.0;
				rel1.offset: 5 0;
				rel1.to_y: "elm.text";
				rel2.offset: -6 -6;
			}
		}
		rect { "event"; ignore: ON_HOLD; before: "e.text.label";
			desc { "default"; color: "#00000000";
				rel1.to_y: "elm.text";
				rel2.to_y: "elm.text";
			}
		}
	}
	programs {
		program { "collapse";
			action:  STATE_SET "collapsed" 0.0;
			target: "elm.swallow.content";
			transition: ACCELERATE 0.3;
			after: "signal";
		}
		program { "expand";
			action:  STATE_SET "default" 0.0;
			target: "elm.swallow.content";
			transition: DECELERATE 0.3;
			after: "signal";
		}
		program {
			signal:  "mouse,up,1"; source:  "event";
			action:  SIGNAL_EMIT "elm,action,click" "elm";
		}
		program {
			signal:  "elm,action,toggle"; source: "elm";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.swallow.content", st, 30, vl);
				if (!strcmp(st, "default"))
					run_program(PROGRAM:"collapse");
				else
					run_program(PROGRAM:"expand");
			}
		}
		program {
			signal:  "elm,action,switch"; source: "elm";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.swallow.content", st, 30, vl);
				if (!strcmp(st, "default"))
					set_state(PART:"elm.swallow.content", "collapsed", 0.0);
				else
					set_state(PART:"elm.swallow.content", "default", 0.0);
			}
		}
		program { "signal";
			action: SIGNAL_EMIT "elm,anim,done" "elm";
		}
	}
}
/* REMOVED: FIXME
 * group { "elm/frame/base/default";
*/
group { "elm/frame/base/pad_small";
	parts {
		spacer { "b0"; scale;
			desc { "default"; min: 3 3; max: 3 3;
				align: 0.0 0.0;
			}
		}
		spacer { "b1"; scale;
			desc { "default"; min: 3 3; max: 3 3;
				align: 1.0 1.0;
			}
		}
		swallow { "elm.swallow.content";
			desc { "default";
				rel1.to: "b0";
				rel1.relative: 1.0 1.0;
				rel2.to: "b1";
				rel2.relative: 0.0 0.0;
			}
		}
	}
}

group { "elm/frame/base/pad_medium";
	inherit: "elm/frame/base/pad_small";
	parts {
		part { "b0";
			desc { "default"; min: 6 6; max: 6 6; }
		}
		part { "b1";
			desc { "default"; min: 6 6; max: 6 6; }
		}
	}
}

group { "elm/frame/base/pad_large";
	inherit: "elm/frame/base/pad_small";
	parts {
		part { "b0";
			desc { "default"; min: 12 12; max: 12 12; }
		}
		part { "b1";
			desc { "default"; min: 12 12; max: 12 12; }
		}
	}
}

group { "elm/frame/base/pad_huge";
	inherit: "elm/frame/base/pad_small";
	parts {
		part { "b0";
			desc { "default"; min: 24 24; max: 24 24; }
		}
		part { "b1";
			desc { "default"; min: 24 24; max: 24 24; }
		}
	}
}

group { "elm/frame/base/outdent_top";
	images.image: "separator_horiz.png" COMP;
	parts {
		swallow { "elm.swallow.content";
			desc { "default";
				rel1.offset: 3 3;
				rel2.offset: -4 -4;
			}
		}
		part { "base";
			desc { "default";  min: 0 2;
				image.normal: "separator_horiz.png";
				rel1.offset: 0 2;
				rel2.offset: -1 3;
				rel2.relative: 1.0 0.0;
				fill.smooth: 0;
			}
		}
	}
}

group { "elm/frame/base/outdent_bottom";
	images.image: "separator_horiz.png" COMP;
	parts {
		swallow { "elm.swallow.content";
			desc { "default";
				rel1.offset: 3 3;
				rel2.offset: -4 -4;
			}
		}
		part { "base";
			desc { "default"; min: 0 2;
				image.normal: "separator_horiz.png";
				rel1.offset: 0 -4;
				rel1.relative: 0.0 1.0;
				rel2.offset: -1 -3;
				fill.smooth: 0;
			}
		}
	}
}
