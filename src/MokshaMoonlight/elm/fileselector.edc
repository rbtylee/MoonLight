group { "elm/entry/path/separator/default";
	images.image: "fselector_sep.png" COMP;

	parts {
		part { "icon"; nomouse;
			desc { "default";
				image.normal: "fselector_sep.png";
				FIXED_SIZE(25, 25)
			}
		}
	}
}

group { "elm/fileselector/base/default";
	data.item: "path_separator" "<item relsize=15x15 vsize=full href=path/separator></item>";

	parts {
		swallow { "elm.swallow.up";
			desc { "default";
				align: 0.0 0.0;
				fixed: 1 1;
				rel1.offset: 3 3;
				rel2.relative: 0.0 0.0;
				rel2.offset: 3 3;
			}
		}
		swallow { "elm.swallow.home";
			desc { "default";
				align: 0.0 0.5;
				fixed: 1 0;
				rel1.to: "elm.swallow.up";
				rel1.relative: 1.0 0.0;
				rel1.offset: 3 0;
				rel2.to: "elm.swallow.up";
				rel2.relative: 1.0 1.0;
				rel2.offset: 3 -1;
			}
		}
		swallow { "elm.swallow.search";
			desc { "default"; min: 65 0;
				rel1.to: "elm.swallow.home";
				rel1.relative: 1.0 0.0;
				rel1.offset: 3 0;
				rel2.to_y: "elm.swallow.home";
				rel2.relative: 1.0 1.0;
				rel2.offset: -4 -1;
			}
		}
#ifdef ELM_CANCEL_OK
		swallow { "elm.swallow.ok";
#else
		swallow { "elm.swallow.cancel";
#endif
			desc { "default";
				align: 1.0 1.0;
				fixed: 1 1;
				rel1.relative: 1.0 1.0;
				rel1.offset: -4 -4;
				rel2.relative: 1.0 1.0;
				rel2.offset: -4 -4;
			}
		}
#ifdef ELM_CANCEL_OK
		swallow { "elm.swallow.cancel";
#else
		swallow { "elm.swallow.ok";
#endif
			desc { "default";
				align: 1.0 0.5;
				fixed: 1 0;
#ifdef ELM_CANCEL_OK
				rel1.to: "elm.swallow.ok";
#else
				rel1.to: "elm.swallow.cancel";
#endif
				rel1.relative: 0.0 0.0;
				rel1.offset: -4 0;
#ifdef ELM_CANCEL_OK
				rel2.to: "elm.swallow.ok";
#else
				rel2.to: "elm.swallow.cancel";
#endif
				rel2.relative: 0.0 1.0;
				rel2.offset: -4 -1;
			}
		}
		swallow { "elm.swallow.filters";
			desc { "default";
				align: 1.0 1.0;
				fixed: 1 1;
				rel1.to_y: "elm.swallow.ok";
				rel1.relative: 1.0 0.0;
				rel1.offset: -4 -4;
				rel2.to_y: "elm.swallow.ok";
				rel2.relative: 1.0 0.0;
				rel2.offset: -4 -4;
			}
		}
		swallow { "elm.swallow.filename";
			desc { "default";
				align: 0.5 1.0;
				fixed: 0 1;
				rel1.to_y: "elm.swallow.filters";
				rel1.relative: 0.0 0.0;
				rel1.offset: 3 -4;
				rel2.to_y: "elm.swallow.filters";
				rel2.relative: 1.0 0.0;
				rel2.offset: -4 -4;
			}
		}
		swallow { "elm.swallow.path";
			desc { "default";
				align: 0.5 1.0;
				fixed: 0 1;
				rel1.to_y: "elm.swallow.filename";
				rel1.relative: 0.0 0.0;
				rel1.offset: 3 -4;
				rel2.to_y: "elm.swallow.filename";
				rel2.relative: 1.0 0.0;
				rel2.offset: -4 -4;
			}
		}
		swallow { "elm.swallow.files";
			desc { "default";
				rel1.to_y: "elm.swallow.home";
				rel1.relative: 0.0 1.0;
				rel1.offset: 3 3;
				rel2.to_y: "elm.swallow.path";
				rel2.relative: 1.0 0.0;
				rel2.offset: -4 -4;
			}
		}
		swallow { "elm.swallow.spinner"; clip: "elm.spinner.clip";
			desc { "default";
				fixed: 1 1;
				align: 1.0 0.0;
				rel1.relative: 1.0 0.0;
				rel1.offset: -4 3;
				rel2.relative: 1.0 0.0;
				rel2.offset: -4 3;
			}
		}
		rect { "elm.spinner.clip";
			desc { "default"; color: TRANSPARENT;
				fixed: 1 1;
				rel1.to: "elm.swallow.spinner";
				rel2.to: "elm.swallow.spinner";
			}
			desc { "visible"; inherit; color: VISIBLE; }
		}
	}
	programs {
		program {
			signal: "elm,action,spinner,show"; source: "elm";
			action: STATE_SET "visible" 0.0;
			transition: LINEAR 0.2;
			target: "elm.spinner.clip";
		}
		program {
			signal: "elm,action,spinner,hide"; source: "elm";
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.5 CURRENT;
			target: "elm.spinner.clip";
		}
	}
}

group { "elm/fileselector_entry/base/default";
	parts {
		swallow { "elm.swallow.button"; scale;
			desc { "default"; min: 40 4;
				align: 1.0 0.0;
				fixed: 1 0;
				rel1.relative: 1.0 0.0;
				rel1.offset: -1 0;
			}
		}
		swallow { "elm.swallow.entry"; scale;
			desc { "default";
				align: 0.0 0.5;
				min: 50 4;
				rel2.to_x: "elm.swallow.button";
				rel2.relative: 0.0 1.0;
				rel2.offset: -1 -1;
			}
		}
	}
}
