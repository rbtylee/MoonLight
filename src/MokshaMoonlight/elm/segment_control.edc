#define SEGMENT_TYPE_SINGLE 1
#define SEGMENT_TYPE_LEFT 2
#define SEGMENT_TYPE_MIDDLE 3
#define SEGMENT_TYPE_RIGHT 4
#define SEGMENT_STATE_NORMAL 1
#define SEGMENT_STATE_PRESSED 2
#define SEGMENT_STATE_SELECTED 3
#define SEGMENT_STATUS_ENABLED 0
#define SEGMENT_STATUS_DISABLED 1

group { "elm/segment_control/base/default";
	parts {
		rect { "bg"; nomouse;
			desc { "default"; color: "#00000000"; min: 160 31; }
		}
	}
}

group { "elm/segment_control/item/default";
	images.image: "button-normal.png" COMP;
	images.image: "button-insensitive.png" COMP;
	images.image: "button-prelight.png" COMP;
	images.image: "button-pressed.png" COMP;
	images.image: "DT_left.png" COMP;
	images.image: "DT_left2.png" COMP;
	images.image: "DT_left3.png" COMP;
	images.image: "DT_left0.png" COMP;
	images.image: "DT_right.png" COMP;
	images.image: "DT_right2.png" COMP;
	images.image: "DT_right3.png" COMP; 
	images.image: "DT_right0.png" COMP; 
	images.image: "DT_middle.png" COMP;
	images.image: "DT_middle2.png" COMP;
	images.image: "DT_middle3.png" COMP;
	images.image: "DT_middle0.png" COMP;

	parts {
		part { "bg";
			desc { "default";
				rel1.offset: 0 2;
				rel2.offset: -1 -1;
				image.normal: "button-normal.png";
				image.border: 5 5 5 5;
			}
			desc {"default_single"; inherit;
				image.normal: "button-normal.png";
			}
			desc {"default_left"; inherit;
				image.normal: "DT_left.png";
			}
			desc {"default_right"; inherit;
				image.normal: "DT_right.png";
			}
			desc {"default_middle"; inherit;
				image.normal: "DT_middle.png";
			}
			desc {"pressed_single"; inherit;
				image.normal: "button-pressed.png";
			}
			desc {"pressed_left"; inherit;
				image.normal: "DT_left2.png";
			}
			desc {"pressed_right"; inherit;
				image.normal: "DT_right2.png";
			}
			desc {"pressed_middle"; inherit;
				image.normal: "DT_middle2.png";
			}
			desc {"selected_single"; inherit;
				image.normal: "button-prelight.png";
			}
			desc {"selected_left"; inherit;
				image.normal: "DT_left3.png";
			}
			desc {"selected_right"; inherit;
				image.normal: "DT_right3.png";
			}
			desc {"selected_middle"; inherit;
				image.normal: "DT_middle3.png";
			}
			desc {"disabled_single"; inherit;
				image.normal: "button-insensitive.png";
			}
			desc {"disabled_left"; inherit;
				image.normal: "DT_left0.png";
			}
			desc {"disabled_right"; inherit;
				image.normal: "DT_right0.png";
			}
			desc {"disabled_middle"; inherit;
				image.normal: "DT_middle0.png";
			}
		}
		swallow { "elm.swallow.icon"; scale; clip: "disabler";
			desc { "default";
				align: 0.5 0.5;
				rel1.offset: 10 3;
				rel2.relative: 0.0 1.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
			}
			desc { "visible"; inherit;
				rel2.relative: 0.25 1.0;
				rel2.offset: -5 -4;
			}
			desc { "icononly"; inherit;
				rel1.offset: 5 2;
				rel2.relative: 1.0 1.0;
				rel2.offset: -5 -4;
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; min: 1 1; color: VISIBLE; hid;
				color3: VISIBLE;
				color_class: "button_text";
				fixed: 1 1;
				rel1.to_x: "elm.swallow.icon";
				rel1.relative: 1.0 0.0;
				rel1.offset: 0 -1;
				rel2.offset: -8 -2;
				text.font: "Sans"; text.size: 10;
				text.min: 0 1;
				text.text_class: "button_text";
			}
			desc { "normal"; inherit; vis; }
			desc { "pressed"; inherit; color: VISIBLE; vis;
				color3: VISIBLE;
				color_class: "button_text";
			}
			desc { "disabled"; inherit; color: VISIBLE; vis;
				color3: VISIBLE;
				color_class: "button_text_disabled";
			}
		}
		text { "text2"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; min: 1 1; color: VISIBLE; hid;
				color2: VISIBLE;
				color3: VISIBLE;
				color_class: "button_text";
				fixed: 1 1;
				rel1.to: "elm.text";
				rel2.to: "elm.text";
				text.font: "Sans"; text.size: 10;
				text.min: 0 1;
				text.text_source: "elm.text";
				text.text_class: "button";
			}
			desc { "selected"; inherit; vis; }
		}
		rect { "events"; ignore: ON_HOLD;
			desc { "default"; color: "#00000000";
				rel1.to: "bg";
				rel2.to: "bg";
			}
			desc { "disabled"; inherit; hid; }
		}
		rect { "disabler";
			desc { "default";
			 STAY_ON("bg")
			}
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
	}

	programs {
		script {
			public seg_type; // Single, Left, Middle, Right.
			public seg_state; // Normal/Default, Pressed, Selected.
			public seg_status;// Enabled/Default, Disabled

			public update_state() {
				new type, state, status;
				type = get_int(seg_type);
				state = get_int(seg_state);
				status = get_int(seg_status);

				if (status == SEGMENT_STATUS_ENABLED) {
					if(state == SEGMENT_STATE_NORMAL) {
						if(type == SEGMENT_TYPE_SINGLE) {
							set_state(PART:"bg", "default_single", 0.0);
						} else if(type == SEGMENT_TYPE_LEFT) {
							set_state(PART:"bg", "default_left", 0.0);
						} else if(type == SEGMENT_TYPE_MIDDLE) {
							set_state(PART:"bg", "default_middle", 0.0);
						} else if(type == SEGMENT_TYPE_RIGHT) {
							set_state(PART:"bg", "default_right", 0.0);
						}
						set_state(PART:"elm.text", "normal", 0.0);
						set_state(PART:"text2", "default", 0.0); 
					} else if(state == SEGMENT_STATE_PRESSED) {
						if(type == SEGMENT_TYPE_SINGLE) {
							set_state(PART:"bg", "pressed_single", 0.0);
						} else if(type == SEGMENT_TYPE_LEFT) {
							set_state(PART:"bg", "pressed_left", 0.0);
						} else if(type == SEGMENT_TYPE_MIDDLE) {
							set_state(PART:"bg", "pressed_middle", 0.0);
						} else if(type == SEGMENT_TYPE_RIGHT) {
							set_state(PART:"bg", "pressed_right", 0.0);
						}
						set_state(PART:"elm.text", "pressed", 0.0);
						set_state(PART:"text2", "default", 0.0);
					} else if(state == SEGMENT_STATE_SELECTED) {
						if(type == SEGMENT_TYPE_SINGLE) {
							set_state(PART:"bg", "selected_single", 0.0);
						} else if(type == SEGMENT_TYPE_LEFT) {
							set_state(PART:"bg", "selected_left", 0.0);
						} else if(type == SEGMENT_TYPE_MIDDLE) {
							set_state(PART:"bg", "selected_middle", 0.0);
						} else if(type == SEGMENT_TYPE_RIGHT) {
							set_state(PART:"bg", "selected_right", 0.0);
						}
						set_state(PART:"elm.text", "default", 0.0);
						set_state(PART:"text2", "selected", 0.0);
					}
					set_state(PART:"disabler", "default", 0.0);
					set_state(PART:"events", "default", 0.0);
				} else {
					set_state(PART:"elm.text", "disabled", 0.0);
					set_state(PART:"text2", "normal", 0.0);
					set_state(PART:"disabler", "disabled", 0.0);
					set_state(PART:"events", "disabled", 0.0);
					if(type == SEGMENT_TYPE_SINGLE) {
						set_state(PART:"bg", "disabled_single", 0.0);
					} else if(type == SEGMENT_TYPE_LEFT) {
						set_state(PART:"bg", "disabled_left", 0.0);
					} else if(type == SEGMENT_TYPE_MIDDLE) {
						set_state(PART:"bg", "disabled_middle", 0.0);
					} else if(type == SEGMENT_TYPE_RIGHT) {
						set_state(PART:"bg", "disabled_right", 0.0);
					}
				}
			} 
		}
		program { "segment_type_s";
			signal: "elm,type,segment,single";
			source: "elm";
			script {
				set_int(seg_type, SEGMENT_TYPE_SINGLE);
				update_state();
			}
		}
		program { "segment_type_l";
			signal: "elm,type,segment,left";
			source: "elm";
			script {
				set_int(seg_type, SEGMENT_TYPE_LEFT);
				update_state();
			}
		}
		program { "segment_type_m";
			signal: "elm,type,segment,middle";
			source: "elm";
			script {
				set_int(seg_type, SEGMENT_TYPE_MIDDLE);
				update_state();
			}
		}
		program { "segment_type_r";
			signal: "elm,type,segment,right";
			source: "elm";
			script {
				set_int(seg_type, SEGMENT_TYPE_RIGHT);
				update_state();
			}
		}
		program { "normal_segment";
			signal: "elm,state,segment,normal";
			source: "elm";
			script {
				set_int(seg_state, SEGMENT_STATE_NORMAL);
				update_state();
			}
		}
		program { "pressed_segment";
			signal: "elm,state,segment,pressed";
			source: "elm";
			script {
				set_int(seg_state, SEGMENT_STATE_PRESSED);
				update_state();
			}
		}
		program { "selected_segment";
			signal: "elm,state,segment,selected";
			source: "elm";
			script {
				set_int(seg_state, SEGMENT_STATE_SELECTED);
				update_state();
			}
		}
		program { "disable_segment";
			signal: "elm,state,disabled";
			source: "elm";
			script {
				set_int(seg_status, SEGMENT_STATUS_DISABLED);
				update_state();
			}
		}
		program { "enable_segment";
			signal: "elm,state,enabled";
			source: "elm";
			script {
				set_int(seg_status, SEGMENT_STATUS_ENABLED);
				update_state();
			}
		}
		program { "text_show";
			signal: "elm,state,text,visible";
			source: "elm";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.swallow.icon", st, 30, vl);
				if (!strcmp(st, "icononly"))
				  set_state(PART:"elm.swallow.icon", "visible", 0.0);
			}
		}
		program { "text_hide";
			signal: "elm,state,text,hidden";
			source: "elm";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.swallow.icon", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.swallow.icon", "icononly", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"text2", "default", 0.0);
			}
		}
		program { "icon_show";
			signal: "elm,state,icon,visible";
			source: "elm";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.text", st, 30, vl);
				if ((!strcmp(st, "normal")) || (!strcmp(st, "selected")))
					set_state(PART:"elm.swallow.icon", "visible", 0.0);
				else
					set_state(PART:"elm.swallow.icon", "icononly", 0.0);
			}
		}
		program { "icon_hide";
			signal: "elm,state,icon,hidden";
			source: "elm";
			action:  STATE_SET "default" 0.0;
			target: "elm.swallow.icon";
		}
	}
}

#undef SEGMENT_TYPE_SINGLE
#undef SEGMENT_TYPE_LEFT
#undef SEGMENT_TYPE_MIDDLE
#undef SEGMENT_TYPE_RIGHT
#undef SEGMENT_STATE_NORMAL
#undef SEGMENT_STATE_PRESSED
#undef SEGMENT_STATE_SELECTED
#undef SEGMENT_STATUS_ENABLED
#undef SEGMENT_STATUS_DISABLED

