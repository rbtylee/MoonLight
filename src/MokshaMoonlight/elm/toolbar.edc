group { "elm/toolbar/base/default";
	images.image: "icon_right_arrow.png" COMP;
	images.image: "icon_up_arrow.png" COMP;
	images.image: "icon_left_arrow.png" COMP;
	images.image: "icon_down_arrow.png" COMP;
	parts {
		rect { "base";
			desc { "default"; color: TRANSPARENT; }
		}
		rect { "clipper";
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
			}
		}
		swallow { "elm.swallow.content"; clip: "clipper";
			desc { "default";
				rel1.offset: 2 4;
				rel2.offset: -3 -5;
			}
		}
		rect { "arrow_clipper_l";
			desc { "default"; hid; }
			desc { "visible"; inherit; vis; }
		}
		part { "arrow_l"; clip: "arrow_clipper_l"; nomouse;
			desc { "default";
				rel1.to: "arrow_l_ev";
				rel2.to: "arrow_l_ev";
				image.normal: "icon_left_arrow.png";
				FIXED_SIZE(32, 32)
			}
			desc { "clicked"; inherit;
				rel1.offset: -4 0;
			}
		}
		rect { "arrow_l_ev"; clip: "arrow_clipper_l"; scale;
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
				align: 0.0 0.5;
				color: "#00000000";
				FIXED_SIZE(32, 32)
			}
		}
		rect { "arrow_clipper_r";
			desc { "default"; hid; }
			desc { "visible"; inherit; vis; }
		}
		part { "arrow_r"; nomouse;
			clip: "arrow_clipper_r";
			desc { "default";
				rel1.to: "arrow_r_ev";
				rel2.to: "arrow_r_ev";
				image.normal: "icon_right_arrow.png";
				FIXED_SIZE(32, 32)
			}
			desc { "clicked"; inherit;
				rel1.offset: 4 0;
			}
		}
		rect { "arrow_r_ev"; scale; clip: "arrow_clipper_r";
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
				align: 1.0 0.5;
				color: "#00000000";
				FIXED_SIZE(32, 32)
			}
		}
		rect { "arrow_clipper_u";
			desc { "default"; hid; }
			desc { "visible"; inherit; vis; }
		}
		part { "arrow_u"; clip: "arrow_clipper_u"; nomouse;
			desc { "default";
				rel1.to: "arrow_u_ev";
				rel2.to: "arrow_u_ev";
				image.normal: "icon_up_arrow.png";
				FIXED_SIZE(32,32)
			}
			desc { "clicked"; inherit;
				rel1.offset: 0 -4;
			}
		}
		rect { "arrow_u_ev"; clip: "arrow_clipper_u"; scale;
			desc { "default";
				rel1.to: "base";
				rel2.to: "base";
				align: 0.5 0.0;
				color: "#00000000";
				FIXED_SIZE(32, 32)
			}
		}
		rect { "arrow_clipper_d";
			desc { "default"; hid; }
			desc { "visible"; inherit; vis; }
		}
		part { "arrow_d"; clip: "arrow_clipper_d"; nomouse;
			desc { "default";
				rel1.to: "arrow_d_ev";
				rel2.to: "arrow_d_ev";
				image.normal: "icon_down_arrow.png";
				FIXED_SIZE(32, 32)
			}
			desc { "clicked"; inherit;
				rel1.offset: 0 4;
			}
		}
		rect { "arrow_d_ev"; clip: "arrow_clipper_d"; scale;
			desc { "default"; color: "#00000000";
				rel1.to: "base";
				rel2.to: "base";
				align: 0.5 1.0;
				FIXED_SIZE(32, 32)
			}
		}
	}

	programs {
		program {
			signal: "elm,action,show,left"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "arrow_clipper_l";
			target: "arrow_clipper_l";
		}
		program {
			signal: "elm,action,hide,left"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "arrow_clipper_l";
			target: "arrow_clipper_l";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_l_ev";
			action: SIGNAL_EMIT "elm,action,left" "elm";
			after: "arrow_l_repeat";
		}
		program { "arrow_l_repeat";
			action: SIGNAL_EMIT "elm,action,left" "elm";
			in: 0.3 0.0;
			after: "arrow_l_repeat";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_l_ev";
			action: ACTION_STOP;
			target: "arrow_l_repeat";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_l_ev";
			action: STATE_SET "clicked" 0.0;
			target: "arrow_l";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_l_ev";
			action: STATE_SET "default" 0.0;
			target: "arrow_l";
		}

		program {
			signal: "elm,action,show,right"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "arrow_clipper_r";
			target: "arrow_clipper_r";
		}
		program {
			signal: "elm,action,hide,right"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "arrow_clipper_r";
			target: "arrow_clipper_r";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_r_ev";
			action: SIGNAL_EMIT "elm,action,right" "elm";
			after: "arrow_r_repeat";
		}
		program { "arrow_r_repeat";
			action: SIGNAL_EMIT "elm,action,right" "elm";
			in: 0.3 0.0;
			after: "arrow_r_repeat";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_r_ev";
			action: ACTION_STOP;
			target: "arrow_r_repeat";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_r_ev";
			action: STATE_SET "clicked" 0.0;
			target: "arrow_r";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_r_ev";
			action: STATE_SET "default" 0.0;
			target: "arrow_r";
		}

		program {
			signal: "elm,action,show,up"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "arrow_clipper_u";
			target: "arrow_clipper_u";
		}
		program {
			signal: "elm,action,hide,up"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "arrow_clipper_u";
			target: "arrow_clipper_u";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_u_ev";
			action: SIGNAL_EMIT "elm,action,up" "elm";
			after: "arrow_u_repeat";
		}
		program { "arrow_u_repeat";
			action: SIGNAL_EMIT "elm,action,up" "elm";
			in: 0.3 0.0;
			after: "arrow_u_repeat";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_u_ev";
			action: ACTION_STOP;
			target: "arrow_u_repeat";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_u_ev";
			action: STATE_SET "clicked" 0.0;
			target: "arrow_u";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_u_ev";
			action: STATE_SET "default" 0.0;
			target: "arrow_u";
		}

		program {
			signal: "elm,action,show,down"; source: "elm";
			action: STATE_SET "visible" 0.0;
			target: "arrow_clipper_d";
			target: "arrow_clipper_d";
		}
		program {
			signal: "elm,action,hide,down"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "arrow_clipper_d";
			target: "arrow_clipper_d";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_d_ev";
			action: SIGNAL_EMIT "elm,action,down" "elm";
			after: "arrow_d_repeat";
		}
		program { "arrow_d_repeat";
			action: SIGNAL_EMIT "elm,action,down" "elm";
			in: 0.3 0.0;
			after: "arrow_d_repeat";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_d_ev";
			action: ACTION_STOP;
			target: "arrow_d_repeat";
		}
		program {
			signal: "mouse,down,1*"; source: "arrow_d_ev";
			action: STATE_SET "clicked" 0.0;
			target: "arrow_d";
		}
		program {
			signal: "mouse,up,1"; source: "arrow_d_ev";
			action: STATE_SET "default" 0.0;
			target: "arrow_d";
		}
	}
}

group { "elm/toolbar/item/default";
	data.item: "transition_animation_on" "1";

	images.image: "button-prelight.png" COMP;
	images.image: "button-pressed.png" COMP;

#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
	script {
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.icon", "default", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.icon", "default", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"elm.text", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.icon", "icononly", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"elm.text", "icononly", 0.0);
				} else {
					set_state(PART:"elm.swallow.icon", "icononly", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"elm.text", "icononly", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.icon", "noicon", 0.0);
					set_state(PART:"icon_clip", "default", 0.0);
					set_state(PART:"elm.text", "noicon", 0.0);
				} else {
					set_state(PART:"elm.swallow.icon", "noicon", 0.0);
					set_state(PART:"icon_clip", "disabled", 0.0);
					set_state(PART:"elm.text", "noicon_disabled", 0.0);
				}
			} else {
			if (!d) {
				set_state(PART:"elm.swallow.icon", "noicon", 0.0);
				set_state(PART:"icon_clip", "default", 0.0);
				set_state(PART:"elm.text", "noicon", 0.0);
			} else {
				set_state(PART:"elm.swallow.icon", "noicon", 0.0);
				set_state(PART:"icon_clip", "disabled", 0.0);
				set_state(PART:"elm.text", "noicon_disabled", 0.0);
			}
			}
		}
	}
	parts {
		spacer { "base";
			desc { "default"; }
			desc { "vert";
				rel1.offset: -1 0;
				rel2.offset: 0 -1;
			}
		}
		CLIP_SWITCH("shadow","base","base","default","prelight")
		part { "shadow1"; clip: "shadow_clip_default"; nomouse;
			desc { "default"; hid;
				rel1.to: "base";
				rel1.offset: 1 0;
				rel2.offset: -2 -1;
				rel2.to: "base";
				image.normal: "button-pressed.png";
				image.border: 6 6 6 6;
			}
			desc { "selected"; inherit; vis; }
		}
		part { "shadow1_pre"; clip: "shadow_clip_prelight"; nomouse;
			desc { "default";
				rel1.to: "base";
				rel1.offset: 1 0;
				rel2.offset: -2 -1;
				rel2.to: "base";
				image.normal: "button-prelight.png";
				image.border: 6 6 6 6;
			}
			desc { "selected"; inherit;
				image.normal: "button-prelight.png";
			}
			desc { "pressed"; inherit;
				image.normal: "button-pressed.png";
			}
		}
		rect { "icon_clip";
			desc { "default"; }
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		}
		rect { "icon_clip1";  clip: "icon_clip";
			desc { "default"; color: VISIBLE; vis; }
			desc { "animation"; inherit; color: TRANSPARENT; hid; }
		}
		swallow { "elm.swallow.icon"; clip: "icon_clip1";
			desc { "default";
				align: 0.5 0.5;
				rel1.relative: 0.0 0.0;
				rel1.offset: 4 4;
				rel2.to_y: "elm.text";
				rel2.relative: 1.0 0.0;
				rel2.offset: -5 -1;
			}
			desc { "noicon"; inherit; hid;
				rel1.offset: 4 0;
				rel2.relative: 1.0 0.0;
				rel2.offset: -5 -4;
			}
			desc { "icononly"; inherit; hid;
				rel2.relative: 1.0 1.0;
				rel2.offset: -5 -3;
				rel2.to_y: "icon_clip";
			}
		}
		rect { "icon_clip2";  clip: "icon_clip";
			desc { "default"; color: TRANSPARENT; hid; }
			desc { "animation"; inherit; color: VISIBLE; vis; }
		}
		swallow { "elm.swallow.icon_new"; clip: "icon_clip2";
			desc { "default";
				align: 0.5 0.5;
				rel1.relative: 0.0 0.0;
				rel1.offset: 4 4;
				rel2.to_y: "elm.text";
				rel2.relative: 1.0 0.0;
				rel2.offset: -5 -1;
			}
			desc { "noicon"; inherit; hid;
				rel1.offset: 4 0;
				rel2.relative: 1.0 0.0;
				rel2.offset: -5 -4;
			}
			desc { "icononly"; inherit; hid;
				rel2.relative: 1.0 1.0;
				rel2.offset: -5 -3;
				rel2.to_y: "icon_clip";
			}
		}
		rect { "text_clip1";
			desc { "default"; color: VISIBLE; vis; }
			desc { "animation"; inherit; color: TRANSPARENT; hid; }
		}
		text { "elm.text"; effect: SHADOW BOTTOM;  nomouse; scale;
			clip: "text_clip1";
			desc { "default"; color: VISIBLE; color_class: "label_text";
				color3: VISIBLE;
				rel1.offset: 8 -3;
				rel1.relative: 0.0 1.0;
				rel2.offset: -9 -3;
				align: 0.5 1.0;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.align: 0.5 0.5;
				text.text_class: "toolbar_item";
				text.ellipsis: -1;
				fixed: 0 1;
			}
			desc { "selected"; inherit; color_class: "label_text"; vis; }
			desc { "disabled"; inherit; color_class: "label_text_disabled"; }
			desc { "noicon"; inherit;
				rel1.offset: 6 2;
				rel1.relative: 0.0 0.0;
				align: 0.5 0.5;
			}
			desc { "noicon_disabled"; color_class: "label_text_disabled";
				inherit: "noicon" 0.0;
			}
			desc { "icononly"; inherit; hid;
				text.min: 0 0;
				fixed: 1 1;
			}
		}
		rect { "text_clip2";
			desc { "default"; color: TRANSPARENT; hid; }
			desc { "animation"; inherit; color: VISIBLE; vis; }
		}
		text { "elm.text_new"; effect: SHADOW BOTTOM; nomouse; scale;
			clip: "text_clip2";
			desc { "default"; color: VISIBLE; color_class: "label_text";
				color3: VISIBLE;
				rel1.offset: 8 -3;
				rel1.relative: 0.0 1.0;
				rel2.offset: -9 -3;
				align: 0.5 1.0;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.align: 0.5 0.5;
				text.text_class: "toolbar_item";
				text.ellipsis: -1;
				fixed: 0 1;
			}
			desc { "selected"; inherit; color_class: "label_text"; }
			desc { "disabled"; inherit; color_class: "label_text_disabled"; }
			desc { "noicon"; inherit;
				rel1.offset: 6 2;
				rel1.relative: 0.0 0.0;
				align: 0.5 0.5;
			}
			desc { "noicon_disabled"; color_class: "label_text_disabled";
				inherit: "noicon" 0.0;
			}
			desc { "icononly"; inherit; hid;
				text.min: 0 0;
				fixed: 1 1;
			}
		}
		rect { "event";  ignore: ON_HOLD;
			desc { "default"; color: "#00000000"; }
			desc { "disabled"; hid; }
		}
	}

	programs {
		OVER_P("shadow_clip_default","event","default","prelight")
		OVER_P("shadow_clip_prelight","event","default","prelight")
		program {
			signal: "mouse,up,1"; source: "event";
			action: STATE_SET "default" 0.0;
			target: "shadow1_pre";
	  }
		program {
			signal: "mouse,down,1"; source: "event";
			action: STATE_SET "pressed" 0.0;
			target: "shadow1_pre";
	  }
		program {
			signal: "elm,orient,horizontal"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program {
			signal: "elm,orient,vertical"; source: "elm";
			action: STATE_SET "vert" 0.0;
			target: "base";
		}
		program { "st0";
			signal: "load"; source: "";
			script {
				set_int(btmode, LABEL | ICON);
			}
		}
		program {
			signal: "elm,state,selected"; source: "elm";
			action: STATE_SET "selected" 0.0;
			target: "elm.text";
			target: "shadow1";
		}
		program {
			signal: "elm,state,unselected"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text";
			target: "shadow1";
		}
		program {
			signal: "mouse,up,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,click" "elm";
		}
		program {
			signal: "mouse,down,1*"; source: "event";
			action: STATE_SET "selected" 0.0;
			target: "shadow1_pre";
		}
		program {
			signal: "mouse,up,1*"; source: "event";
			action: STATE_SET "default" 0.0;
			target: "shadow1_pre";
		}
		program { "disabler";
			signal: "elm,state,disabled"; source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "event";
		}
		program { "enabler";
			signal: "elm,state,enabled"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "event";
		}
		program {
			signal:  "mouse,in"; source:  "event";
			action:  SIGNAL_EMIT "elm,mouse,in" "elm";
		}
		program { "mouse,out";
			signal:  "mouse,out"; source:  "event";
			action:  SIGNAL_EMIT "elm,mouse,out" "elm";
		}
		program { "st1";
			signal: "elm,text,hidden"; source: "elm";
			action: STATE_SET "notext" 0.0;
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "st2";
			signal: "elm,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "st3";
			signal: "elm,icon,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "st4";
			signal: "elm,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "st5";
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program { "st6";
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,moving"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "shadow1";
		}
		program {
			signal: "elm,state,icon_set,forward"; source: "elm";
			after: "icon_set,animation";
		}
		program {
			signal: "elm,state,icon_set,backward"; source: "elm";
			after: "icon_set,animation";
		}
		program { "icon_set,animation";
			signal: "elm,state,icon_set"; source: "elm";
			action: STATE_SET "animation" 0.0;
			target: "icon_clip1";
			target: "icon_clip2";
			transition: LINEAR 0.2;
			after: "icon_set,animation,done";
		}
		program { "icon_set,animation,done";
			action: SIGNAL_EMIT "elm,state,icon_set,done" "elm";
		}
		program {
			signal: "elm,state,icon,reset"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "icon_clip1";
			target: "icon_clip2";
		}
		program {
			signal: "elm,state,label_set,forward"; source: "elm";
			after: "label_set,animation";
		}
		program {
			signal: "elm,state,label_set,backward"; source: "elm";
			after: "label_set,animation";
		}
		program { "label_set,animation";
			signal: "elm,state,label_set"; source: "elm";
			action: STATE_SET "animation" 0.0;
			target: "text_clip1";
			target: "text_clip2";
			transition: LINEAR 0.2;
			after: "label_set,animation,done";
		}
		program { "label_set,animation,done";
			action: SIGNAL_EMIT "elm,state,label_set,done" "elm";
		}
		program {
			signal: "elm,state,label,reset"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "text_clip1";
			target: "text_clip2";
		}
	}
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
}

// === item: style assumed to exist
group { "elm/toolbar/item/item_horizontal";
	inherit: "elm/toolbar/item/default";
	parts {
		part { "elm.swallow.icon";
			desc { "default";
				fixed: 1 0;
				aspect_preference: VERTICAL;
				align: 0.0 0.5;
				rel1.offset: 2 2;
				rel2.relative: 0.0 1.0;
				rel2.offset: 2 -3;
			}
			desc { "noicon"; inherit; hid;
				rel1.offset: 1 0;
				rel2.relative: 0.0 1.0;
				rel2.offset: 1 -3;
			}
			desc { "icononly"; inherit; hid;
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -3;
				rel2.to_y: "icon_clip";
			}
		}
		part { "elm.swallow.icon_new";
			desc { "default";
				aspect_preference: VERTICAL;
				align: 0.0 0.5;
				rel1.offset: 2 2;
				rel2.relative: 0.0 1.0;
				rel2.offset: 2 -3;
			}
			desc { "noicon"; inherit; hid;
				rel1.offset: 1 0;
				rel2.relative: 0.0 1.0;
				rel2.offset: 1 -3;
			}
			desc { "icononly"; inherit; hid;
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -3;
				rel2.to_y: "icon_clip";
			}
		}
		part { "elm.text";
			desc { "default";
				rel1.offset: 1 2;
				rel1.relative: 1.0 0.0;
				rel1.to_x: "elm.swallow.icon";
				rel2.offset: -5 -3;
				align: 0.0 0.5;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.align: 0.0 0.5;
				text.text_class: "toolbar_item";
				text.ellipsis: -1;
			}
			desc { "selected"; inherit; vis; }
			desc { "disabled"; inherit; }
			desc { "noicon"; inherit;
				rel1.offset: 4 2;
				rel1.relative: 0.0 0.0;
				rel1.to: "icon_clip";
				align: 0.5 0.5;
			}
			desc { "noicon_disabled"; inherit: "noicon" 0.0; }
			desc { "icononly"; inherit; hid;
				text.min: 0 0;
				fixed: 1 1;
			}
		}
		part { "elm.text_new";
			desc { "default";
				rel1.offset: 1 2;
				rel1.relative: 1.0 0.0;
				rel1.to_x: "elm.swallow.icon";
				rel2.offset: -5 -3;
				align: 0.0 0.5;
				text.font: "Sans"; text.size: 10;
				text.min: 1 1;
				text.align: 0.0 0.5;
				text.text_class: "toolbar_item";
				text.ellipsis: -1;
			}
			desc { "selected"; inherit; }
			desc { "disabled"; inherit; }
			desc { "noicon"; inherit;
				rel1.offset: 4 2;
				rel1.relative: 0.0 0.0;
				rel1.to: "icon_clip";
				align: 0.5 0.5;
			}
			desc { "noicon_disabled";
				inherit: "noicon" 0.0;
			}
			desc { "icononly"; inherit; hid;
				text.min: 0 0;
				fixed: 1 1;
			}
		}
	}
}

// === item: style assumed to exist
// XXX: vert vs horiz (should emit)
// XXX: seriously... why do we have this style?
group { "elm/toolbar/item/item_centered";
	inherit: "elm/toolbar/item/default";
	parts {
	}
}


group { "elm/toolbar/separator/default";
	images.image: "vline.png" COMP;
	images.image: "menu_sep.png" COMP;

	parts {
		part { "base";
			desc { "default"; min: 2 16; max: 2 99999;
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
				image.normal: "vline.png";
				image.border: 1 1 1 1;
				fill.smooth: 0;
			}
			desc { "vert"; inherit; min: 1 2; max: -1 2;
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
				image.normal: "menu_sep.png";
				image.border: 2 2 0 0;
				fill.smooth: 0;
			}
		}
	}
	programs {
		program {
			signal: "elm,orient,horizontal"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
		}
		program {
			signal: "elm,orient,vertical"; source: "elm";
			action: STATE_SET "vert" 0.0;
			target: "base";
		}
	}
}

group { "elm/toolbar/object/default";
	parts {
		swallow { "elm.swallow.object";
			desc { "default";
				rel1.offset: 2 2;
				rel2.offset: -3 -3;
			}
		}
		/* NO HIGHLIGHT EFFECT IN OPENGEU THEME, SORRY!! */
	}
}

// === item: the more PANEL that slides out under the toolbar
// XXX: vert vs horiz (should emit)
group { "elm/toolbar/more/default";
	images.image: "base_bg.png" COMP;
	parts {
		part { "base";
			desc { "default"; hid;
				rel2.relative: 1.0 0.0;
				rel1.offset: 2 2;
				rel2.offset: -3 1;
				fixed: 1 1;
				image.normal: "base_bg.png";
				image.border: 2 2 2 2 ;
				fill.smooth: 0;
			}
			desc { "open"; inherit; vis;
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -3;
			}
			desc { "open2"; inherit; vis;
				rel2.relative: 1.0 2.0;
				rel2.offset: -3 -3;
			}
		}
		rect { "clipper";
			desc { "default"; hid;
				rel1.to: "base";
				rel2.to: "base";
				fixed: 1 1;
			}
			desc { "open"; inherit; vis;
				rel2.relative: 1.0 1.0;
			}
			desc { "open2"; inherit; vis;
				rel2.relative: 1.0 0.5;
			}
		}
		rect { "clipper2";
			desc { "default"; hid;
				rel1.relative: 0.0 0.5;
				rel1.to: "base";
				rel2.to: "base";
				fixed: 1 1;
			}
			desc { "open"; inherit; vis;
				rel1.relative: 0.0 1.0;
			}
			desc { "open2"; inherit; vis;
				rel1.relative: 0.0 0.5;
			}
		}
		swallow { "elm.swallow.content"; clip: "clipper";
			desc { "default";
				fixed: 1 1;
				rel1.to: "clipper";
				rel2.to: "clipper";
			}
		}
		swallow { "elm.swallow.content2"; clip: "clipper2";
			desc { "default";
				fixed: 1 1;
				rel1.to: "clipper2";
				rel2.to: "clipper2";
			}
		}
	}

	programs {
		program {
			signal: "elm,state,open"; source: "elm";
			action: STATE_SET "open" 0.0;
			target: "base";
			target: "clipper";
			target: "clipper2";
			transition: DECELERATE 0.15;
		}
		program {
			signal: "elm,state,open2"; source: "elm";
			action: STATE_SET "open2" 0.0;
			target: "base";
			target: "clipper";
			target: "clipper2";
			transition: DECELERATE 0.3;
		}
		program {
			signal: "elm,state,close"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			transition: DECELERATE 0.5;
		}
	}
}
