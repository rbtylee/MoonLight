#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4

group { "elm/radio/base/default";
	images.image: "radio_base.png" COMP;
	images.image: "radio_on.png" COMP;
	images.image: "radio_sel.png" COMP;

	script {
		public btmode;
		public eval_mode(m) {
			new m1 = m & MASK;
			new d = m & DISABLE;
			if (m1 == (ICON | LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "visible", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (ICON)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "visible", 0.0);
					set_state(PART:"sizer.content", "icononly", 0.0);
					set_state(PART:"elm.text", "disabled", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
			} else if (m1 == (LABEL)) {
				if (!d) {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "visible", 0.0);
					set_state(PART:"base", "default", 0.0);
					set_state(PART:"clip", "default", 0.0);
					set_state(PART:"event", "default", 0.0);
				} else {
					set_state(PART:"elm.swallow.content", "default", 0.0);
					set_state(PART:"sizer.content", "default", 0.0);
					set_state(PART:"elm.text", "disabled_visible", 0.0);
					set_state(PART:"base", "disabled", 0.0);
					set_state(PART:"clip", "disabled", 0.0);
					set_state(PART:"event", "disabled", 0.0);
				}
		} else {
			if (!d) {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"base", "default", 0.0);
				set_state(PART:"clip", "default", 0.0);
				set_state(PART:"event", "default", 0.0);
			} else {
				set_state(PART:"elm.swallow.content", "default", 0.0);
				set_state(PART:"sizer.content", "default", 0.0);
				set_state(PART:"elm.text", "default", 0.0);
				set_state(PART:"base", "disabled", 0.0);
				set_state(PART:"clip", "disabled", 0.0);
				set_state(PART:"event", "disabled", 0.0);
			}
			}
		}
	}
	parts {
		part { "base"; nomouse; scale;
			desc { "default";
				image.normal: "radio_base.png";
				align: 0.0 0.5;
				FIXED_SIZE(19, 19)
			}
			desc {"selected"; inherit; hid; }
			desc { "disabled"; inherit; color: "#FFFFFF7D"; }
		}
		part { "base_selected"; nomouse;
		desc { "default"; hid;
			image.normal: "radio_on.png";
			align: 0.0 0.5;
			FIXED_SIZE(19,19)
			}
			desc {"selected"; inherit; vis; }
		}
		rect { "clip";
			desc { "default"; }
			desc { "disabled"; inherit; color: "#FFFFFF40"; }
		} 
		swallow { "elm.swallow.content"; scale; clip: "clip";
			desc { "default"; max: 0 0; hid;
				fixed: 1 0;
				align: 0.0 0.5;
				rel1.to_x: "base";
				rel1.relative: 1.0 0.0;
				rel1.offset: 1 1;
				rel2.to_x: "base";
				rel2.offset: 1 -2;
				rel2.relative: 1.0 1.0;
			}
			desc { "visible"; inherit; min: 18 18; vis;
				fixed: 0 0;
				aspect: 1.0 1.0;
			}
		}
		text { "sizer.content"; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "radio_text"; hid;
				color3: VISIBLE;
				fixed: 1 1;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.text_class: "radio_button";
			}
			desc { "visible"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
			desc { "icononly"; inherit;
				rel1.to: "elm.swallow.content";
				rel2.to: "elm.swallow.content";
				text.min: 1 1;
				text.ellipsis: -1;
				text.text: "M";
			}
		}
		text { "elm.text"; effect: SHADOW BOTTOM; nomouse; scale;
			desc { "default"; color: VISIBLE; color_class: "radio_text";
				color3: VISIBLE;
				rel1.offset: 2 2;
				rel1.to_x: "elm.swallow.content";
				rel1.relative: 1.0 0.0;
				rel2.offset: -3 -3;
				text.font: "Sans"; text.size: 10;
				text.min: 0 0;
				text.align: 0.0 0.5;
				text.text_class: "radio_button";
			}
			desc { "disabled"; inherit; color_class: "radio_text_disabled"; }
			desc { "visible"; inherit; vis;
				text.min: 1 1;
				text.ellipsis: -1;
			}
			desc { "disabled_visible"; inherit; vis;
				color_class: "radio_text_disabled";
				text.min: 1 1;
				text.ellipsis: -1;
			}
		}
		rect { "event";
			desc { "default"; color: "#00000000"; }
			desc { "disabled"; inherit; hid; }
		}
	}

	programs {
		program {
			signal: "mouse,clicked,1"; source: "event";
			action: SIGNAL_EMIT "elm,action,radio,toggle" "elm";
		}
		program {
			signal: "elm,state,radio,on"; source: "elm";
			action: STATE_SET "selected" 0.0;
			target: "base";
			target: "base_selected";
		}
		program {
			signal: "elm,state,radio,off"; source: "elm";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "base_selected";
		}
		program {
			signal: "elm,state,text,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,text,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~LABEL; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,visible"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,icon,hidden"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~ICON; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,disabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m |= DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
		program {
			signal: "elm,state,enabled"; source: "elm";
			script {
				new m = get_int(btmode);
				m &= ~DISABLE; set_int(btmode, m);
				eval_mode(m);
			}
		}
	}
}

#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
