group { "e/shelf/default/inset";
	alias: "e/shelf/alternate/inset";
	images.image: "shelf_inset.png" COMP;
	parts {
		image { "base";
			desc { "default"; color: VISIBLE;
				rel1.offset: 1 1;
				rel2.offset: -2 -2;
				image.normal: "shelf_inset.png";
				image.border: 7 7 7 7;
			}
		}
		rect { "clip";
			desc { "default"; color: VISIBLE;
				rel1.to: "base";
				rel2.to: "base";

			}
		}
		swallow { "e.swallow.content"; clip: "clip";
			desc { "default";
				rel1.to: "base";
				rel1.offset: 2 3;
				rel2.to: "base";
				rel2.offset: -2 -3;
			}
		}
	}
}

group { "e/shelf/default/plain";
	alias: "e/shelf/alternate/plain";
	parts {
		rect { "clip";
			desc { "default"; color: VISIBLE; }
		}
		swallow { "e.swallow.content"; clip: "clip";
			desc { "default";
				rel1.offset: 0 0;
				rel2.offset: 0 0;
			}
		}
	}
}

group { "e/shelf/invisible/base";
	//data.item: "shaped" "1";
	parts {
		swallow { "e.swallow.content";
			desc { "default";
				rel1.relative: 0.0 0.0;
				rel1.offset: 0 0;
				rel2.relative: 1.0 1.0;
				rel2.offset: -1 -1;
			}
		}
	}
}

group { "e/shelf/invisible/plain";
	alias: "e/shelf/invisible/inset";
	parts {
		rect { "clip";
			desc { "default"; color: VISIBLE; }
		}
		swallow { "e.swallow.content"; clip: "clip";
			desc { "default";
				rel1.offset: 1 1;
				rel2.offset: -2 -2;
			}
		}
	}
}

#define BASE_ORIENT(POS, IMG) \
desc { POS 0.0; inherit;						\
	image.normal: IMG;								\
}

#define ORIENT(POS, OFF1, OFF2) \
desc { POS 0.0; inherit;									\
	rel1.relative: 0.01 0.01;								\
	rel2.relative: 0.99 0.99;								\
	rel1.offset: OFF1;											\
	rel2.offset: OFF2;											\
}

#define ORIENT_PROGRAM(POS) \
program { POS; 											\
	signal: "e,state,orientation,"POS;			\
	source: "e"; 														\
	action: STATE_SET POS 0.0;							\
	target: "base"; 												\
	target: "e.swallow.content"; 						\
}

//Shelf has rounded border, panel doesn't
#define SHELF(NAME, IMAGE_TOP, IMAGE_LEFT, IMAGE_RIGHT, IMAGE_BOTTOM) \
group { NAME; 																							\
	images.image: IMAGE_TOP COMP;															\
	images.image: IMAGE_LEFT COMP;														\
	images.image: IMAGE_RIGHT COMP;														\
	images.image: IMAGE_BOTTOM COMP;													\
	parts 																									\
		part { "base"; nomouse;																	\
			desc { "default"; color_class: "shelf_base";					\
				image.normal: IMAGE_BOTTOM;													\
				image.border: 10 10 10 10;													\
				fill.smooth: 0;																			\
			}																											\
			BASE_ORIENT("left", IMAGE_LEFT)												\
			BASE_ORIENT("left_top", IMAGE_LEFT)										\
			BASE_ORIENT("left_bottom", IMAGE_LEFT)								\
			BASE_ORIENT("right", IMAGE_RIGHT)											\
			BASE_ORIENT("right_top", IMAGE_RIGHT)									\
			BASE_ORIENT("right_bottom", IMAGE_RIGHT)							\
			BASE_ORIENT("top", IMAGE_TOP)													\
			BASE_ORIENT("top_left", IMAGE_TOP)										\
			BASE_ORIENT("top_right", IMAGE_TOP)										\
			BASE_ORIENT("bottom", IMAGE_BOTTOM)										\
			BASE_ORIENT("bottom_left", IMAGE_BOTTOM)							\
			BASE_ORIENT("bottom_right", IMAGE_BOTTOM)							\
		} 																											\
		swallow { "e.swallow.content";										\
			desc { "default"; }																		\
			ORIENT("left", 1 1, 0 0)															\
			ORIENT("left_top", 1 0, 0 0)													\
			ORIENT("left_bottom", 1 0, 0 0)												\
			ORIENT("right", 0 1, 0 0)															\
			ORIENT("right_top", 0 1, 0 0)													\
			ORIENT("right_bottom", 0 1, 0 0)											\
			ORIENT("top", 1 1, 0 0)																\
			ORIENT("top_left", 1 1,  0 0)													\
			ORIENT("top_right", 1 1, 0 0 )												\
			ORIENT("bottom", 1 0, 0 0 )														\
			ORIENT("bottom_left", 1 0, 0 0)												\
			ORIENT("bottom_right", 1 0, 0 -1)											\
		}																												\
	}																													\
	programs 																							\
		ORIENT_PROGRAM("left")																	\
		ORIENT_PROGRAM("left_top")															\
		ORIENT_PROGRAM("left_bottom")														\
		ORIENT_PROGRAM("right")																	\
		ORIENT_PROGRAM("right_top")															\
		ORIENT_PROGRAM("right_bottom")													\
		ORIENT_PROGRAM("top")																		\
		ORIENT_PROGRAM("top_left")															\
		ORIENT_PROGRAM("top_right")															\
		ORIENT_PROGRAM("bottom")																\
		ORIENT_PROGRAM("bottom_left")														\
		ORIENT_PROGRAM("bottom_right")													\
	}																													\
}
#define PANEL(NAME, IMAGE_TOP, IMAGE_LEFT, IMAGE_RIGHT, IMAGE_BOTTOM) \
group { NAME; 																							\
	data.item: "hidden_state_size" RADCONF_SHELF_HID_SIZE;		\
	images.image: IMAGE_TOP COMP;															\
	images.image: IMAGE_LEFT COMP;														\
	images.image: IMAGE_RIGHT COMP;														\
	images.image: IMAGE_BOTTOM COMP;													\
	parts 																									\
		part { "base";	 																				\
			desc { "default"; color_class: "shelf_base"; 					\
				image.normal: IMAGE_BOTTOM;													\
				image.border: 2 2 2 2;															\
				fill.smooth: 0;																			\
			}																											\
			BASE_ORIENT("left", IMAGE_LEFT)												\
			BASE_ORIENT("left_top", IMAGE_LEFT)										\
			BASE_ORIENT("left_bottom", IMAGE_LEFT)								\
			BASE_ORIENT("right", IMAGE_RIGHT)											\
			BASE_ORIENT("right_top", IMAGE_RIGHT)									\
			BASE_ORIENT("right_bottom", IMAGE_RIGHT)							\
			BASE_ORIENT("top", IMAGE_TOP)													\
			BASE_ORIENT("top_left", IMAGE_TOP)										\
			BASE_ORIENT("top_right", IMAGE_TOP)										\
			BASE_ORIENT("bottom", IMAGE_BOTTOM)										\
			BASE_ORIENT("bottom_left", IMAGE_BOTTOM)							\
			BASE_ORIENT("bottom_right", IMAGE_BOTTOM)							\
		}																												\
		swallow { "e.swallow.content"; 													\
			desc { "default"; }																		\
				ORIENT("left", 1 1, 0 0)														\
				ORIENT("left_top", 1 0, 0 0)												\
				ORIENT("left_bottom", 1 0, 0 0)											\
				ORIENT("right", 0 1, 0 0)														\
				ORIENT("right_top", 0 1, 0 0)												\
				ORIENT("right_bottom", 0 1, 0 0)										\
				ORIENT("top", 1 1, 0 0)															\
				ORIENT("top_left", 1 1, 0 0)												\
				ORIENT("top_right", 1 1, 0 0 )											\
				ORIENT("bottom", 1 0, 0 0 )													\
				ORIENT("bottom_left", 1 0, 0 0)											\
				ORIENT("bottom_right", 1 0, 0 -1)										\
		}																												\
	}																													\
	programs { 																								\
		ORIENT_PROGRAM("left")																	\
		ORIENT_PROGRAM("left_top")															\
		ORIENT_PROGRAM("left_bottom")														\
		ORIENT_PROGRAM("right")																	\
		ORIENT_PROGRAM("right_top")															\
		ORIENT_PROGRAM("right_bottom")													\
		ORIENT_PROGRAM("top")																		\
		ORIENT_PROGRAM("top_left")															\
		ORIENT_PROGRAM("top_right")															\
		ORIENT_PROGRAM("bottom")																\
		ORIENT_PROGRAM("bottom_left")														\
		ORIENT_PROGRAM("bottom_right")													\
	}																													\
}

SHELF("e/shelf/default/base", "shelf_bg_top.png", "shelf_bg_left.png", "shelf_bg_right.png", "shelf_bg.png")
PANEL("e/shelf/squared/base", "shelf_bgs_top.png", "shelf_bgs_left.png", "shelf_bgs_right.png", "shelf_bgs.png")

group { "e/shelf/alternate/base";
	data.item: "hidden_state_size" RADCONF_SHELF_HID_SIZE;
	images.image: "shelf_bga.png" COMP;
	images.image: "shelf_bga_top.png" COMP;
	images.image: "shelf_bga_left.png" COMP;
	images.image: "shelf_bga_right.png" COMP;
	parts {
		part { "base"; nomouse;
			desc { "default"; color_class: "shelf_base";
				image.normal: "shelf_bga.png";
				image.border: 2 2 2 2;
				fill.size.relative: 0 0;
				fill.size.offset: 8 100;
				fill.smooth: 0;
			}
			desc { "top"; inherit;
				image.normal: "shelf_bga_top.png";
			}
			desc { "left"; inherit;
				image.normal: "shelf_bga_left.png";
			}
			desc { "right"; inherit;
				image.normal: "shelf_bga_right.png";
			}
		}
		swallow { "e.swallow.content";
			desc { "default";
				rel1.relative: 0.0 0.0;
				rel1.offset: 2 2;
				rel2.relative: 1.0 1.0;
				rel2.offset: -3 -3;
			}
			desc { "top"; inherit; }
			desc { "left"; inherit; }
			desc { "right"; inherit; }
		}
	}

	programs {
		program { "orient1";
			signal: "e,state,orientation,bottom";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient2";
			signal: "e,state,orientation,bottom_left";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient3";
			signal: "e,state,orientation,bottom_right";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient4";
			signal: "e,state,orientation,top";
			source: "e";
			action: STATE_SET "top" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient5";
			signal: "e,state,orientation,top_left";
			source: "e";
			action: STATE_SET "top" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient6";
			signal: "e,state,orientation,top_right";
			source: "e";
			action: STATE_SET "top" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient7";
			signal: "e,state,orientation,left";
			source: "e";
			action: STATE_SET "left" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient8";
			signal: "e,state,orientation,left_top";
			source: "e";
			action: STATE_SET "left" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient9";
			signal: "e,state,orientation,left_bottom";
			source: "e";
			action: STATE_SET "left" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient10";
			signal: "e,state,orientation,right";
			source: "e";
			action: STATE_SET "right" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient11";
			signal: "e,state,orientation,right_top";
			source: "e";
			action: STATE_SET "right" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
		program { "orient12";
			signal: "e,state,orientation,right_bottom";
			source: "e";
			action: STATE_SET "right" 0.0;
			target: "base";
			target: "e.swallow.content";
		}
	}
}

group { "e/shelf/alternate/plain";
	parts {
		rect { "clip";
			desc { "default";
				color: VISIBLE;
			}
		}
		swallow { "e.swallow.content"; clip: "clip";
			desc { "default";
				rel1.offset: 1 1;
				rel2.offset: -2 -2;
			}
		}
	}
}

group { "e/shelf/alternate/inset";
	images.image: "shelf_invisible_inset.png" COMP;
	parts {
		image { "background"; nomouse;
			desc { "default";
				image.normal: "shelf_invisible_inset.png";
				image.border: 8 8 10 10;
				fill.smooth: 0;
			}
		}
		rect { "items_clip"; nomouse;
			desc { "default"; color: VISIBLE;
				rel1.to: "background";
				rel1.relative: 0.0 0.0;
				rel1.offset: 3 4;
				rel2.to: "background";
				rel2.relative: 1.0 1.0;
				rel2.offset: -6 -4;
			}
		}
		swallow { "e.swallow.content"; clip: "items_clip";
			desc { "default";
				rel1.to: "items_clip";
				rel2.to: "items_clip";
			}
		}
	}
}
